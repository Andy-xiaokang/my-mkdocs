{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CSDIY \u8bfe\u7a0b\u8def\u7ebf","text":""},{"location":"#_1","title":"\u7f16\u7a0b\u5165\u95e8","text":"<ul> <li> MIT-missing semester</li> <li> CS50X</li> <li> CS50P</li> <li> Stanford CS106B Programming Abstractions In C++</li> <li> Stanford CS106L Standard C++ programming</li> <li> UCB CS61A: Structure and Interpretation of Computer Programs</li> </ul>"},{"location":"#_2","title":"\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5","text":"<ul> <li> UCB CS61B \u5f53Java\u5165\u95e8\u770b\u4e86</li> <li> Coursera Algorithm I &amp; II</li> <li> MIT Introduction to Algorithms 6.006</li> </ul>"},{"location":"#_3","title":"\u4f53\u7cfb\u7ed3\u6784","text":"<ul> <li> Coursera Nand2tetris</li> <li> UCB CS61C</li> <li> CMU 15-213: CSAPP</li> </ul>"},{"location":"#_4","title":"\u64cd\u4f5c\u7cfb\u7edf","text":"<ul> <li> MIT 6.S081</li> <li> UCB CS162</li> </ul>"},{"location":"#_5","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf\u5b89\u5168","text":"<ul> <li> UCB CS161</li> </ul>"},{"location":"#_6","title":"\u8ba1\u7b97\u673a\u7f51\u7edc","text":"<ul> <li> Computer Networking: A top-down approach</li> <li> Stanford CS144: Computer Network</li> </ul>"},{"location":"#web","title":"web \u5f00\u53d1","text":"<ul> <li> MIT web development course</li> </ul>"},{"location":"#_7","title":"\u8f6f\u4ef6\u5de5\u7a0b","text":"<ul> <li> MIT 6.031: Software Construction  *</li> <li> UCB CS169: Software engineering</li> </ul>"},{"location":"#_8","title":"\u6570\u636e\u5e93\u7cfb\u7edf","text":"<ul> <li> UCB CS186: Introduction to Database System</li> <li> CMU 15-445: Database Systems   *</li> </ul>"},{"location":"#_9","title":"\u6570\u5b66\u7406\u8bba","text":"<ul> <li> UCB CS70: discrete math and probability theory</li> <li> UCB CS126: probability theory</li> </ul>"},{"location":"#_10","title":"\u4eba\u5de5\u667a\u80fd&amp;\u6df1\u5ea6\u5b66\u4e60\uff08\u4e86\u89e3\uff09","text":"<ul> <li> Harvard CS50: Introduction to AI with Python</li> <li> Coursera: Deep Learning</li> </ul>"},{"location":"#postscript","title":"postscript","text":"<p>\u6b64\u7f51\u7ad9\u642d\u5efa\u81eamkdocs-material\uff0c\u6a21\u677f\u3001\u5b57\u4f53\u3001\u989c\u8272\u5f15\u7528\u81eaCSDIY \u5185\u5bb9\u81ea\u5b9a\uff0c\u610f\u5728\u642d\u5efa\u4e00\u4e2a\u8bb0\u5f55\u81ea\u5df1\u6210\u957f\uff0c\u8bfe\u7a0b\u9009\u81eaCSDIY\u7684\u8def\u7ebf\u7b14\u8bb0\u672c\uff0c\u5e0c\u671b\u51e0\u5e74\u540e\u80fd\u770b\u5230\u4e00\u4e2a\u622a\u7136\u4e0d\u540c\u7684\u81ea\u5df1\u3002\u76ee\u6807\u662f</p> <ul> <li>\u8ffd\u6c42\u81ea\u5df1\u7684\u4e2a\u4eba\u4ef7\u503c</li> <li>\u8d81\u5e74\u8f7b\u6781\u5c3d\u5168\u529b\u8ba4\u8bc6\u81ea\u5df1\u6709\u80fd\u529b\u8ba4\u8bc6\u7684\u4e8b\u7269</li> <li>\u8d70\u51fa\u6d1e\u7a74\uff0c\u8ba4\u8bc6\u4e16\u754c\u7684\u771f\u76f8</li> </ul> <p></p>"},{"location":"mkdocs_markdownsyntax/","title":"Reference","text":"<p>Here are some markdown_extensions from reference page, I think it may be enough for me to build my online docs. for more extensions visit Material for MkDocs. a design principle from philosophy from getting started page draw my attention. </p> <p>It's just markdown: focus on the content of your documentation and create a professional static site in minutes.</p> <p>That's what I need, so I explore some simple but useful extensions and want to write a markdown file to test. I think my docs may accompany me to record future study. The docs is designed for myself to record daily study, something interesting and something easily forgotten. If I get strong enough in the future, I believe what I get from Internet I will return to the Internet. My English level is so poor but I think practice makes perfect so I will write in English as much as possible.</p>"},{"location":"mkdocs_markdownsyntax/#admonitions","title":"Admonitions","text":""},{"location":"mkdocs_markdownsyntax/#configuration","title":"configuration","text":"<pre><code>markdown_extensions:\n  - admonition\n  - pymdownx.details\n  - pymdownx.superfences\n</code></pre>"},{"location":"mkdocs_markdownsyntax/#usage","title":"usage","text":"admonition<pre><code>!!! note \n    this is a note \n</code></pre> <p>Note</p> <p>this is a note </p>"},{"location":"mkdocs_markdownsyntax/#changing-the-title","title":"changing the title","text":"Admonition with custom title<pre><code>!!! note \"custom title\"\n    note with a custom title\n</code></pre> <p>custom title</p> <p>note with a custom title</p>"},{"location":"mkdocs_markdownsyntax/#collapsible-blocks","title":"collapsible blocks","text":"collapsible admonition<pre><code>??? note \"collapsible admonitions and initially collapsed\"\n    this is a collapsible admonitions and initially collapsed\n</code></pre> collapsible admonitions and initially collapsed <p>this is a collapsible admonitions and initially collapsed</p> collapsible admonition and initially expanded<pre><code>???+ note \"collapsible admonitions and initially expanded\"\n    this is a collapsible admonitions and initially expanded\n</code></pre> collapsible admonitions and initially expanded <p>this is a collapsible admonitions and initially expanded</p> <pre><code>=== \"inline end\"\n    !!! info inline end \"a info in line end\"\n        this is a test for info admonition \n        in line end\n    ```markdown\n    !!! info inline end \"a info in line end\"\n        this is a test for info admonition \n        in line end\n    ```\n=== \"inline front\"\n    !!! info inline \"a info in line front\"\n        this is a test for info admonition in \n        line front\n\n    ```markdown\n    !!! info inline \"a info in line front\"\n        this is a test for info admonition in \n        line front\n    ```\n</code></pre> inline endinline front <p>a info in line end</p> <p>this is a test for info admonition  in line end</p> <pre><code>!!! info inline end \"a info in line end\"\n    this is a test for info admonition \n    in line end\n</code></pre> <p>a info in line front</p> <p>this is a test for info admonition in  line front</p> <pre><code>!!! info inline \"a info in line front\"\n    this is a test for info admonition in \n    line front\n</code></pre> <p>important: admonitions that use <code>inline</code> modifiers must be declared prior to the content block you want to place them beside. If there's insufficient space to render the admonition next to the block, the admonition will stretch to the full width of the viewport, e.g., on mobile viewports.</p>"},{"location":"mkdocs_markdownsyntax/#supported-types","title":"supported types","text":"<p>Abstract</p> <p>this is abstract type</p> <p>Tip</p> <p>this is tip type</p> <p>Success</p> <p>this is success type</p> <p>Question</p> <p>this is question type</p> <p>Warning</p> <p>this is warning type</p> <p>Failure</p> <p>this is failure type</p> <p>Danger</p> <p>this is danger type</p> <p>Bug</p> <p>this is bug type</p> <p>Example</p> <p>this is example type</p> <p>Quote</p> <p>this is quote type</p>"},{"location":"mkdocs_markdownsyntax/#code-blocks","title":"Code blocks","text":""},{"location":"mkdocs_markdownsyntax/#configuration_1","title":"Configuration","text":"<p><pre><code>markdown_extensions:\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.superfences\n</code></pre> <pre><code>theme:\n  features:\n    - content.code.copy\n</code></pre></p>"},{"location":"mkdocs_markdownsyntax/#usage_1","title":"Usage","text":"<p>code block<pre><code>    ``` py\n    import tensorflow as tf\n    ```\n</code></pre> <pre><code>import tensorflow as tf\n</code></pre></p>"},{"location":"mkdocs_markdownsyntax/#adding-title","title":"adding title","text":"<p>code block with title<pre><code>    ``` py title=\"bubble_sort.py\"\n    def bubble_sort(items):\n        for i in range(len(items)):\n            for j in range(len(items) - 1 - i):\n                if items[j] &gt; items[j + 1]:\n                    items[j], items[j + 1] = items[j + 1], items[j]\n    ```\n</code></pre> bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre></p>"},{"location":"mkdocs_markdownsyntax/#add-line-numbers","title":"add line numbers","text":"<p>code block with line numbers<pre><code>    ``` py linenums=\"1\"\n    def bubble_sort(items):\n        for i in range(len(items)):\n            for j in range(len(items) - 1 - i):\n                if items[j] &gt; items[j + 1]:\n                    items[j], items[j + 1] = items[j + 1], items[j]\n    ```\n</code></pre> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre></p>"},{"location":"mkdocs_markdownsyntax/#highlighting-specific-lines","title":"Highlighting specific lines","text":"<p>code blocks with highlighted specific lines<pre><code>    ``` py hl_lines=\"2 3\"\n    def bubble_sort(items):\n        for i in range(len(items)):\n            for j in range(len(items) - 1 - i):\n                if items[j] &gt; items[j + 1]:\n                    items[j], items[j + 1] = items[j + 1], items[j]\n    ```\n</code></pre> bubble_sort<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre></p>"},{"location":"mkdocs_markdownsyntax/#content-tabs","title":"Content tabs","text":""},{"location":"mkdocs_markdownsyntax/#configuration_2","title":"Configuration","text":"<p><pre><code>markdown_extensions:\n  - pymdownx.superfences\n  - pymdownx.tabbed:\n      alternate_style: true \n</code></pre> <pre><code>theme:\n  features:\n    - content.tabs.link\n</code></pre></p>"},{"location":"mkdocs_markdownsyntax/#usage_2","title":"Usage","text":""},{"location":"mkdocs_markdownsyntax/#grouping-code-blocks","title":"grouping code blocks","text":"grouping code blocks<pre><code>=== \"C\"\n    ```c\n    #include&lt;stdio.h&gt;\n    int main(void)\n    {\n        printf(\"Hello World!\\n\");\n        return 0;\n    }\n    ```\n=== \"C++\"\n    ``` c++\n    #include &lt;iostream&gt;\n    int main(void) {\n      std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n      return 0;\n    }\n    ```\n</code></pre> CC++ <pre><code>#include&lt;stdio.h&gt;\nint main(void)\n{\n    printf(\"Hello World!\\n\");\n    return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>"},{"location":"mkdocs_markdownsyntax/#grouping-other-content","title":"grouping other content","text":"content list<pre><code>=== \"content unordered list\"\n    * first unordered item\n    * second unordered item\n    * third unordered item\n\n=== \"ordered list\"\n    1. first ordered item\n    2. second ordered item\n    3. third ordered item\n</code></pre> content unordered listordered list <ul> <li>first unordered item</li> <li>second unordered item</li> <li>third unordered item</li> </ul> <ol> <li>first ordered item</li> <li>second ordered item</li> <li>third ordered item</li> </ol>"},{"location":"mkdocs_markdownsyntax/#embedded-content","title":"Embedded content","text":"content tabs in admonition<pre><code>!!! example \n    === \"content unordered list\"\n        * ==first unordered item==\n        * second unordered item\n        * third unordered item\n\n    === \"ordered list\"\n        1. first ordered item\n        2. second ordered item\n        3. third ordered item\n</code></pre> <p>Example</p> content unordered listordered list <ul> <li>first unordered item</li> <li>second unordered item</li> <li>third unordered item</li> </ul> <ol> <li>first ordered item</li> <li>second ordered item</li> <li>third ordered item</li> </ol>"},{"location":"mkdocs_markdownsyntax/#data-tables","title":"Data Tables","text":""},{"location":"mkdocs_markdownsyntax/#configuration_3","title":"Configuration","text":"<pre><code>markdown_extensions:\n  - tables\n</code></pre>"},{"location":"mkdocs_markdownsyntax/#usage_3","title":"Usage","text":"data table<pre><code>| Method      | Description                          |\n| ----------- | ------------------------------------ |\n| `GET`       |     Fetch resource  |\n| `PUT`       |  Update resource |\n| `DELETE`    |      Delete resource |\n</code></pre> Method Description <code>GET</code> Fetch resource <code>PUT</code> Update resource <code>DELETE</code> Delete resource <p>place<code>:</code>on the left, both side or right to align a specific column</p>"},{"location":"mkdocs_markdownsyntax/#footnote","title":"Footnote","text":""},{"location":"mkdocs_markdownsyntax/#configuration_4","title":"Configuration","text":"<p><pre><code>markdown_extensions:\n  - footnotes\n</code></pre> text with footnote<pre><code>this is footnote1[^1], and this is footnote2[^2]\n[^1]: I am xiaokang\n[^2]: I am practicing some extensions for mkdown\n</code></pre> this is footnote1<sup>1</sup>, and this is footnote2<sup>2</sup></p>"},{"location":"mkdocs_markdownsyntax/#formatting","title":"formatting","text":""},{"location":"mkdocs_markdownsyntax/#configuration_5","title":"Configuration","text":"<pre><code>markdown_extensions:\n  - pymdownx.critic\n  - pymdownx.caret\n  - pymdownx.keys\n  - pymdownx.mark\n  - pymdownx.tilde\n</code></pre>"},{"location":"mkdocs_markdownsyntax/#usage_4","title":"Usage","text":"text with highlighting<pre><code>* ==This was marked==\n* ^^This was inserted^^\n* ~~This was deleted~~\n</code></pre> <ul> <li>This was marked</li> <li>This was inserted</li> <li>This was deleted</li> </ul>"},{"location":"mkdocs_markdownsyntax/#sub-and-superscripts","title":"sub and superscripts","text":"text with sub and superscripts<pre><code>- H~2~O\n- A^T^A\n</code></pre> <ul> <li>H<sub>2</sub>O</li> <li>A<sup>T</sup>A</li> </ul>"},{"location":"mkdocs_markdownsyntax/#lists","title":"Lists","text":""},{"location":"mkdocs_markdownsyntax/#configuration_6","title":"configuration","text":"<pre><code>markdown_extensions:\n  - def_list\n  - pymdownx.tasklist:\n      custom_checkbox: true\n</code></pre>"},{"location":"mkdocs_markdownsyntax/#usage_5","title":"Usage","text":""},{"location":"mkdocs_markdownsyntax/#using-unordered-lists","title":"using unordered lists","text":"unordered list<pre><code>* unordered list item1\n* unordered list item2\n    * nested unordered list item1\n    * nested unordered list item2\n* unordered list item3\n</code></pre> <ul> <li>unordered list item1</li> <li>unordered list item2<ul> <li>nested unordered list item1</li> <li>nested unordered list item2</li> </ul> </li> <li>unordered list item3</li> </ul>"},{"location":"mkdocs_markdownsyntax/#using-ordered-lists","title":"using ordered lists","text":"ordered list<pre><code>1. first ordered item\n2. second ordered item\n    1. first nested item\n    2. second nested item\n        1. nested nested item\n        2. second nested nested item\n3. third ordered item\n</code></pre> <ol> <li>first ordered item</li> <li>second ordered item<ol> <li>first nested item</li> <li>second nested item<ol> <li>nested nested item</li> <li>second nested nested item</li> </ol> </li> </ol> </li> <li>third ordered item</li> </ol>"},{"location":"mkdocs_markdownsyntax/#task-lists","title":"task lists","text":"task list<pre><code>- [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n- [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [ ] Praesent sed risus massa\n- [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n</code></pre> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul> <p>caution: there need four spaces or a tab for nested item; and there mustn't text in front of list </p>"},{"location":"mkdocs_markdownsyntax/#mathjax","title":"MathJax","text":""},{"location":"mkdocs_markdownsyntax/#configuration_7","title":"Configuration","text":"docs/javascripts/mathjax.jsmkdocs.yml <pre><code>window.MathJax = {\ntex: {\n    inlineMath: [[\"\\\\(\", \"\\\\)\"]],\n    displayMath: [[\"\\\\[\", \"\\\\]\"]],\n    processEscapes: true,\n    processEnvironments: true\n},\noptions: {\n    ignoreHtmlClass: \".*|\",\n    processHtmlClass: \"arithmatex\"\n}\n};\n\ndocument$.subscribe(() =&gt; { \nMathJax.typesetPromise()\n})\n</code></pre> <pre><code>markdown_extensions:\n- pymdownx.arithmatex:\n    generic: true\n\nextra_javascript:\n- javascripts/mathjax.js\n- https://polyfill.io/v3/polyfill.min.js?features=es6\n- https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\n</code></pre>"},{"location":"mkdocs_markdownsyntax/#usage_6","title":"Usage","text":"mathjax<pre><code>$$\n\\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}}\n$$\nThe homomorphism $f$ is injective if and only if its kernel is only the \nsingleton set $e_G$, because otherwise $\\exists a,b\\in G$ with $a\\neq b$ such \nthat $f(a)=f(b)$.\n</code></pre> \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] <p>The homomorphism \\(f\\) is injective if and only if its kernel is only the  singleton set \\(e_G\\), because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such  that \\(f(a)=f(b)\\).</p> <ol> <li> <p>I am xiaokang\u00a0\u21a9</p> </li> <li> <p>I am practicing some extensions for mkdown, this test footnote be paragraphs what will happen. nothing happen and everything is normal. nothing change.\u00a0\u21a9</p> </li> </ol>"},{"location":"CS106B/introduction/","title":"introduction","text":""},{"location":"CS106B/introduction/#lecture-1","title":"lecture 1","text":"<p>  variable name represents a location in memory | variable name is an alias of a M register  </p>"},{"location":"CS106B/introduction/#lecture-13","title":"lecture 13","text":"<ul> <li>In C++ when pass by value, the argument will copy the value passed in. when pass by reference, the argument and the variable passed in is the same thing(the same M register in the memory).  </li> <li>in Java there is only one type pass by value, when pass the primitive type we pass the value of the data type; when pass object, we pass the address(reference) of the object, in this case, we called \"pass by reference\", but actually, there is only pass by value, we divide the pass circumstance into two type.  </li> </ul> variable name address in memory (front)(list) OX... ... non-pointerpointer <pre><code>void foo() {\n    Date d1;\n    d1.month = 7;\n    d1.day = 13;\n    // d1 is thrown away\n}\n</code></pre> <pre><code>void foo() {\n    Date* d1 = new Date();\n    d1-&gt;month = 7;  \n    (*d1).month = 7; // -&gt; = (*).   operator \n    d1-&gt;day = 13;\n    // d1 is not thrown away, let user manage the memory self\n} \n</code></pre>"},{"location":"CS106B/introduction/#lecture-14","title":"lecture 14","text":""},{"location":"CS106B/s1/","title":"S1 C++ fundamentals","text":""},{"location":"CS106B/s1/#set-and-map","title":"set and map","text":"<p>The syntax for creating a map is as follows. As with the other ADTs we've seen so far (vectors, grids, stacks, and queues), the Stanford map is a homogenous container, in that the keys must all be of the same type, and the value must all be of the same type (although the key type may be different from the value type).  </p>"},{"location":"CS61A-2020-summer/chapter1/","title":"Chapter 1: Building Abstractions with Functions","text":"<p>\u6211\u4eceCS61A\u8001\u5e08\u90a3\u91cc\u5b66\u5230\u7684\u54f2\u5b66\u662f  </p> <ul> <li>\u591a\u505a\u4e00\u4e9b\u81ea\u5df1\u6ca1\u6709\u505a\u8fc7\u7684\u4e8b</li> <li>\u4e0d\u8981\u8fc7\u5206\u7684\u770b\u91cd\u6d4b\u8bd5\u548c\u5206\u6570\uff0c\u4f60\u4e0d\u5fc5\u5c06\u6bcf\u4e00\u4ef6\u4e8b\u90fd\u505a\u5230\u5b8c\u7f8e\uff0c\u4f46\u4e0d\u8981\u505c\u4e0b\u4f60\u524d\u8fdb\u7684\u811a\u6b65\uff0c\u4e13\u6ce8\u4e8e\u5b66\u4e60\u3001\u8fdb\u6b65\u548c\u6bc5\u529b\u3002\u4f60\u5f88\u5feb\u5c31\u80fd\u6bd4\u8fc7\u53bb\u591a\u89e3\u51b3\u5f88\u591a\u95ee\u9898 </li> <li>don't compare with others</li> </ul>"},{"location":"CS61A-2020-summer/chapter1/#11-getting-started","title":"1.1 Getting Started","text":""},{"location":"CS61A-2020-summer/chapter1/#114","title":"1.1.4","text":"<p>Statements &amp; Expressions. Python code consists of expressions and statements. Broadly, computer programs consist of instructions to either  </p> <ol> <li>Compute some value</li> <li>Carry out some action  </li> </ol> <p>Statements typically describe actions. When the Python interpreter executes a statement, it carries out the corresponding action. On the other hand, expressions typically describe computations. When Python evaluates an expression, it computes the value of that expression.   </p> <p>Functions. Functions encapsulate logic that manipulates data. Objects. A set is a type of object, one that supports set operations like computing intersections and membership. An object seamlessly bundles together data and the logic that manipulates that data, in a way that manages the complexity of both. Interpreters. Evaluating compound expressions requires a precise procedure that interprets code in a predictable way. A program that implements such a procedure, evaluating compound expressions, is called an interpreter.</p>"},{"location":"CS61A-2020-summer/chapter1/#12-elements-of-programming","title":"1.2 Elements of Programming","text":""},{"location":"CS61A-2020-summer/chapter1/#121-expressions","title":"1.2.1 Expressions","text":""},{"location":"CS61A-2020-summer/chapter1/#122-call-expressions","title":"1.2.2 Call Expressions","text":"<p>The most important kind of compound expression is a call expression, which applies a function to some arguments. <code>max(7.5, 9.5)</code> This call expression has subexpressions: the operator is an expression that precedes parentheses, which enclose a comma-delimited list of operand expressions. The operator specifies a function. When this call expression is evaluated(\u6c42\u503c), we say that the function max is called with arguments 7.5 and 9.5, and returns a value of 9.5.  </p>"},{"location":"CS61A-2020-summer/chapter1/#124-names-and-the-environment","title":"1.2.4 Names and the Environment","text":"<p>A critical aspect of a programming language is the means it provides for using names to refer to computational objects. If a value has been given a name, we say that the name binds to the value.</p> <p>The possibility of binding names to values and later retrieving those values by name means that the interpreter must maintain some sort of memory that keeps track of the names, values, and bindings. This memory is called an environment. </p> <p>Names can also be bound to functions. In Python, names are often called variable names or variables because they can be bound to different values in the course of executing a program. When a name is bound to a new value through assignment, it is no longer bound to any previous value. One can even bind built-in names to new values.  </p> <ul> <li>A numeral evaluates to the number it names,</li> <li>A name evaluates to the value associated with that name in the current environment. </li> </ul> <p><code>x=3</code> does not return a value nor evaluate a function on some arguments, since the purpose of assignment is instead to bind a name to a value. In general, statements are not evaluated but executed; they do not produce a value but instead make some change. Each type of expression or statement has its own evaluation or execution procedure.  </p>"},{"location":"CS61A-2020-summer/chapter1/#126-the-non-pure-print-function","title":"1.2.6 The Non-Pure Print Function","text":"<ul> <li>Pure functions. Functions have some input (their arguments) and return some output (the result of applying them). The built-in function</li> <li>Non-pure functions. In addition to returning a value, applying a non-pure function can generate side effects, which make some change to the state of the interpreter or computer. A common side effect is to generate additional output beyond the return value, using the print function.</li> </ul>"},{"location":"CS61A-2020-summer/chapter1/#13-defining-new-functions","title":"1.3 Defining New Functions","text":"<p>How to define a function. Function definitions consist of a def statement that indicates a <code>&lt;name&gt;</code> and a comma-separated list of named <code>&lt;formal parameters&gt;</code>, then a return statement, called the function body, that specifies the <code>&lt;return expression&gt;</code> of the function, which is an expression to be evaluated whenever the function is applied:</p> <p><pre><code>def &lt;name&gt;(&lt;formal parameters&gt;):\n    return &lt;return expression&gt;\n</code></pre> The return expression is not evaluated right away; it is stored as part of the newly defined function and evaluated only when the function is eventually applied.  </p>"},{"location":"CS61A-2020-summer/chapter1/#131-environments","title":"1.3.1 Environments","text":"<p>An environment in which an expression is evaluated consists of a sequence of frames, depicted as boxes. Each frame contains bindings, each of which associates a name with its corresponding value. An <code>import</code> statement binds a name to a built-in function. A <code>def</code> statement binds a name to a user-defined function created by the definition. Each function is a line that starts with <code>func</code>, followed by the function name and formal parameters. Built-in functions such as <code>mul</code> do not have formal parameter names, and so ... is always used instead. The name of a function is repeated twice, once in the frame and again as part of the function itself. The name appearing in the function is called the intrinsic name. The name in a frame is a bound name. There is a difference between the two: different names may refer to the same function, but that function itself has only one intrinsic name. The name bound to a function in a frame is the one used during evaluation. The intrinsic name of a function does not play a role in evaluation. Function Signatures. A description of the formal parameters of a function is called the function's signature.</p>"},{"location":"CS61A-2020-summer/chapter1/#132-calling-user-defined-functions","title":"1.3.2 Calling User-Defined Functions","text":"<p>Applying a user-defined function introduces a second local frame, which is only accessible to that function. To apply a user-defined function to some arguments:</p> <ol> <li>Bind the arguments to the names of the function's formal parameters in a new local frame.</li> <li>Execute the body of the function in the environment that starts with this frame.</li> </ol> <p>The environment in which the body is evaluated consists of two frames: first the local frame that contains formal parameter bindings, then the global frame that contains everything else. Each instance of a function application has its own independent local frame. Name Evaluation. A name evaluates to the value bound to that name in the earliest frame of the current environment in which that name is found. Aspects of a functional abstraction. To master the use of a functional abstraction, it is often useful to consider its three core attributes. The domain of a function is the set of arguments it can take. The range of a function is the set of values it can return. The intent of a function is the relationship it computes between inputs and output (as well as any side effects it might generate). Understanding functional abstractions via their domain, range, and intent is critical to using them correctly in a complex program.  </p>"},{"location":"CS61A-2020-summer/chapter1/#14-designing-functions","title":"1.4 Designing Functions","text":"<p>Fundamentally, the qualities of good functions all reinforce the idea that functions are abstractions.</p> <ul> <li>Each function should have exactly one job. That job should be identifiable with a short name and characterizable in a single line of text. Functions that perform multiple jobs in sequence should be divided into multiple functions.</li> <li>Don't repeat yourself is a central tenet of software engineering. The so-called DRY principle states that multiple fragments of code should not describe redundant logic. Instead, that logic should be implemented once, given a name, and applied multiple times. If you find yourself copying and pasting a block of code, you have probably found an opportunity for functional abstraction.</li> <li>Functions should be defined generally. Squaring is not in the Python Library precisely because it is a special case of the pow function, which raises numbers to arbitrary powers.  </li> </ul>"},{"location":"CS61A-2020-summer/chapter1/#15-control","title":"1.5 Control","text":""},{"location":"CS61A-2020-summer/chapter1/#152-compound-statements","title":"1.5.2 Compound Statements","text":"<p>A compound statement is so called because it is composed of other statements (simple and compound). Compound statements typically span multiple lines and start with a one-line header ending in a colon, which identifies the type of statement. Together, a header and an indented suite of statements is called a clause. A compound statement consists of one or more clauses:</p> <p><pre><code>&lt;header&gt;:\n    &lt;statement&gt;\n    &lt;statement&gt;\n    ...\n&lt;separating header&gt;:\n    &lt;statement&gt;\n    &lt;statement&gt;\n    ...\n...\n</code></pre> Expressions can also be executed as statements, in which case they are evaluated, but their value is discarded. We can understand the statements we have already introduced in these terms.  </p> <ul> <li>Expressions, return statements, and assignment statements are simple statements.</li> <li>A <code>def</code> statement is a compound statement. The suite that follows the def header defines the function body. </li> </ul> <p>Specialized evaluation rules for each kind of header dictate when and if the statements in its suite are executed. We say that the header controls its suite. For example, in the case of def statements, we saw that the return expression is not evaluated immediately, but instead stored for later use when the defined function is eventually called. We can also understand multi-line programs now.  </p> <ul> <li>To execute a sequence of statements, execute the first statement. If that statement does not redirect control, then proceed to execute the rest of the sequence of statements, if any remain.  </li> </ul> <p>This definition exposes the essential structure of a recursively defined sequence: a sequence can be decomposed into its first element and the rest of its elements. The \"rest\" of a sequence of statements is itself a sequence of statements! Thus, we can recursively apply this execution rule. This view of sequences as recursive data structures will appear again in later chapters. The important consequence of this rule is that statements are executed in order, but later statements may never be reached, because of redirected control.  </p>"},{"location":"CS61A-2020-summer/chapter1/#153-defining-functions-ii-local-assignment","title":"1.5.3 Defining Functions II: Local Assignment","text":"<p>A <code>return</code> statement redirects control: the process of function application terminates whenever the first <code>return</code> statement is executed, and the value of the <code>return</code> expression is the returned value of the function being applied. The effect of an assignment statement is to bind a name to a value in the first frame of the current environment.  Boolean contexts. Python includes several false values, including <code>0</code>, <code>None</code>, and the boolean value <code>False</code>. All other numbers are true values. every built-in kind of data in Python has both true and false values.  </p>"},{"location":"CS61A-2020-summer/chapter1/#16-higher-order-functions","title":"1.6 Higher-Order Functions","text":"<p>Functions that manipulate functions are called higher-order functions.</p>"},{"location":"CS61A-2020-summer/chapter1/#161-functions-as-arguments","title":"1.6.1 Functions as Arguments","text":""},{"location":"CS61A-2020-summer/chapter1/#162-functions-as-general-methods","title":"1.6.2 Functions as General Methods","text":""},{"location":"CS61A-2020-summer/chapter1/#163-defining-functions-iii-nested-definitions","title":"1.6.3 Defining Functions III: Nested Definitions","text":"<p>The above examples demonstrate how the ability to pass functions as arguments significantly enhances the expressive power of our programming language. Each general concept or equation maps onto its own short function. One negative consequence of this approach is that the global frame becomes cluttered with names of small functions, which must all be unique. Another problem is that we are constrained by particular function signatures: the update argument to improve must take exactly one argument. Nested function definitions address both of these problems, but require us to enrich our environment model.</p> <p><pre><code>&gt;&gt;&gt; def sqrt(a):\n        def sqrt_update(x):\n            return average(x, a/x)\n        def sqrt_close(x):\n            return approx_eq(x * x, a)\n        return improve(sqrt_update, sqrt_close)\n</code></pre> Like local assignment, local <code>def</code> statements only affect the current local frame. These functions are only in scope while <code>sqrt</code> is being evaluated. Consistent with our evaluation procedure, these local <code>def</code> statements don't even get evaluated until <code>sqrt</code> is called.</p> <pre><code>n = 9\ndef make_adder(n):\n    return lambda k: k + n\nadd_ten = make_adder(n+1)\nresult = add_ten(n)\n</code></pre> <p>Lexical scope. Locally defined functions also have access to the name bindings in the scope in which they are defined. In this example, <code>sqrt_update</code> refers to the name <code>a</code>, which is a formal parameter of its enclosing function <code>sqrt</code>. This discipline of sharing names among nested definitions is called lexical scoping. Critically, the inner functions have access to the names in the environment where they are defined (not where they are called). We require two extensions to our environment model to enable lexical scoping.  </p> <ol> <li>Each user-defined function has a parent environment: the environment in which it was defined</li> <li>When a user-defined function is called, its local frame extends its parent environment.</li> </ol> <pre><code>1   def average(x, y):\n2       return (x + y)/2\n3   \n4   def improve(update, close, guess=1):\n5       while not close(guess):\n6           guess = update(guess)\n7       return guess\n8   \n9   def approx_eq(x, y, tolerance=1e-3):\n10      return abs(x - y) &lt; tolerance\n11  \n12  def sqrt(a):\n13      def sqrt_update(x):\n14          return average(x, a/x)\n15      def sqrt_close(x):\n16          return approx_eq(x * x, a)\n17      return improve(sqrt_update, sqrt_close)\n18  \n19  result = sqrt(256)\n</code></pre> <p> Extended Environments. An environment can consist of an arbitrarily long chain of frames, which always concludes with the global frame. Previous to this <code>sqrt</code> example, environments had at most two frames: a local frame and the global frame. By calling functions that were defined within other functions, via nested <code>def</code> statements, we can create longer chains. The environment for this call to <code>sqrt_update</code> consists of three frames: the local <code>sqrt_update</code> frame, the <code>sqrt</code> frame in which <code>sqrt_update</code> was defined (labeled <code>f1</code>), and the global frame. The return expression in the body of <code>sqrt_update</code> can resolve a value for <code>a</code> by following this chain of frames. Looking up a name finds the first value bound to that name in the current environment. Python checks first in the <code>sqrt_update</code> frame -- no a exists. Python checks next in the parent frame, <code>f1</code>, and finds a binding for <code>a</code> to 256. Hence, we realize two key advantages of lexical scoping in Python.  </p> <ul> <li>The names of a local function do not interfere with names external to the function in which it is defined, because the local function name will be bound in the current local environment in which it was defined, rather than the global environment. </li> <li>A local function can access the environment of the enclosing function, because the body of the local function is evaluated in an environment that extends the evaluation environment in which it was defined. The <code>sqrt_update</code> function carries with it some data: the value for <code>a</code> referenced in the environment in which it was defined. Because they \"enclose\" information in this way, locally defined functions are often called closures.  </li> </ul>"},{"location":"CS61A-2020-summer/chapter1/#164-functions-as-returned-values","title":"1.6.4 Functions as Returned Values","text":"<p>We can achieve even more expressive power in our programs by creating functions whose returned values are themselves functions. An important feature of lexically scoped programming languages is that locally defined functions maintain their parent environment when they are returned.</p>"},{"location":"CS61A-2020-summer/chapter1/#165-example-newtons-method","title":"1.6.5 Example: Newton's Method","text":"<p>This extended example shows how function return values and local definitions can work together to express general ideas concisely.   </p> <pre><code>&gt;&gt;&gt; def newton_update(f, df):\n        def update(x):\n            return x - f(x) / df(x)\n        return update\n</code></pre> <pre><code>&gt;&gt;&gt; def find_zero(f, df):\n        def near_zero(x):\n            return approx_eq(f(x), 0)\n        return improve(newton_update(f, df), near_zero)\n</code></pre>"},{"location":"CS61A-2020-summer/chapter1/#166-currying","title":"1.6.6 Currying","text":"<p>We can use higher-order functions to convert a function that takes multiple arguments into a chain of functions that each take a single argument. More specifically, given a function <code>f(x, y)</code>, we can define a function <code>g</code> such that <code>g(x)(y)</code> is equivalent to f(x, y).</p> <pre><code>&gt;&gt;&gt; def curry2(f):\n        \"\"\"Return a curried version of the given two-argument function.\"\"\"\n        def g(x):\n            def h(y):\n                return f(x, y)\n            return h\n        return g\n</code></pre> <pre><code>&gt;&gt;&gt; def uncurry2(g):\n        \"\"\"Return a two-argument version of the given curried function.\"\"\"\n        def f(x, y):\n            return g(x)(y)\n        return f\n</code></pre>"},{"location":"CS61A-2020-summer/chapter1/#167-lambda-expressions","title":"1.6.7 Lambda Expressions","text":"curry2<pre><code>curry2 = lambda f: lambda x: lambda y: f(x,y)\n</code></pre> <code>lambda</code> <code>x</code> <code>:</code> <code>f(g(x))</code> a function that takes x and returns f(g(x))"},{"location":"CS61A-2020-summer/chapter1/#169-function-decorators","title":"1.6.9 Function Decorators","text":"<p>decorators<pre><code>&gt;&gt;&gt; def trace(fn):\n        def wrapped(x):\n            print('-&gt; ', fn, '(', x, ')')\n            return fn(x)\n        return wrapped\n&gt;&gt;&gt; @trace\n    def triple(x):\n        return 3 * x\n&gt;&gt;&gt; triple(12)\n-&gt;  &lt;function triple at 0x102a39848&gt; ( 12 )\n36\n</code></pre> In this example, A higher-order function trace is defined, which returns a function that precedes a call to its argument with a print statement that outputs the argument. The <code>def</code> statement for triple has an annotation, <code>@trace</code>, which affects the execution rule for <code>def</code>. As usual, the function <code>triple</code> is created. However, the name <code>triple</code> is not bound to this function. Instead, the name <code>triple</code> is bound to the returned function value of calling <code>trace</code> on the newly defined <code>triple</code> function. In code, this decorator is equivalent to:</p> <pre><code>&gt;&gt;&gt; def triple(x):\n        return 3 * x\n&gt;&gt;&gt; triple = trace(triple)\n</code></pre> <p></p>"},{"location":"CS61A-2020-summer/chapter1/#17-recursive-functions","title":"1.7 Recursive Functions","text":"<p>A function is called recursive if the body of the function calls the function itself, either directly or indirectly. That is, the process of executing the body of a recursive function may in turn require applying that function again. </p>"},{"location":"CS61A-2020-summer/chapter1/#171-the-anatomy-of-recursive-functions","title":"1.7.1 The Anatomy of Recursive Functions","text":""},{"location":"CS61A-2020-summer/chapter1/#172-mutual-recursion","title":"1.7.2 Mutual Recursion","text":"<p>When a recursive procedure is divided among two functions that call each other, the functions are said to be mutually recursive. Using this definition, we can implement mutually recursive functions to determine whether a number is even or odd:</p> <pre><code>1   def is_even(n):\n2       if n == 0:\n3           return True\n4       else:\n5           return is_odd(n-1)\n6   \n7   def is_odd(n):\n8       if n == 0:\n9           return False\n10      else:\n11          return is_even(n-1)\n12  \n13  result = is_even(4)\n</code></pre>"},{"location":"CS61A-2020-summer/chapter1/#173-printing-in-recursive-functions","title":"1.7.3 Printing in Recursive Functions","text":"cascade<pre><code>&gt;&gt;&gt; def cascade(n):\n        \"\"\"Print a cascade of prefixes of n.\"\"\"\n        if n &lt; 10:\n            print(n)\n        else:\n            print(n)\n            cascade(n//10)\n            print(n)\n&gt;&gt;&gt; cascade(2013)\n2013\n201\n20\n2\n20\n201\n2013\n</code></pre>"},{"location":"CS61A-2020-summer/chapter1/#174-tree-recursion","title":"1.7.4 Tree Recursion","text":""},{"location":"CS61A-2020-summer/chapter2/","title":"Chapter 2: Building Abstraction with Data","text":""},{"location":"CS61A-2020-summer/chapter2/#21-introduction","title":"2.1 Introduction","text":""},{"location":"CS61A-2020-summer/chapter2/#211-native-data-types","title":"2.1.1 Native Data Types","text":"<p>Every value in Python has a class that determines what type of value it is. Values that share a class also share behavior. For example, the integers <code>1</code> and <code>2</code> are both instances of the <code>int</code> class. These two values can be treated similarly. For example, they can both be negated or added to another integer. The built-in <code>type</code> function allows us to inspect the class of any value.</p> <pre><code>&gt;&gt;&gt; type(2)\n&lt;class 'int'&gt;\n</code></pre> <p>The values we have used so far are instances of a small number of native data types that are built into the Python language. Native data types have the following properties: 1. There are expressions that evaluate to values of native types, called literals. 2. There are built-in functions and operators to manipulate values of native types.</p> <p>Python includes three native numeric types: integers (<code>int</code>), real numbers (<code>float</code>), and complex numbers (<code>complex</code>). Floats. The name <code>float</code> comes from the way in which real numbers are represented in Python and many other programming languages: a \"floating point\" representation.</p>"},{"location":"CS61A-2020-summer/chapter2/#222-pairs","title":"2.2.2 Pairs","text":"<p>The elements of a list can be accessed in two ways. The first way is via our familiar method of multiple assignment, which unpacks a list into its elements and binds each element to a different name. A second method for accessing the elements in a list is by the element selection operator, also expressed using square brackets. The equivalent function for the element selection operator is called <code>getitem</code>, and it also uses 0-indexed positions to select elements from a list. <pre><code>&gt;&gt;&gt; from operator import getitem\n&gt;&gt;&gt; getitem(pair, 0)\n10\n&gt;&gt;&gt; getitem(pair, 1)\n20\n</code></pre></p>"},{"location":"CS61A-2020-summer/chapter2/#224-the-properties-of-data","title":"2.2.4 The Properties of Data","text":"<p>In general, we can express abstract data using a collection of selectors and constructors, together with some behavior conditions. As long as the behavior conditions are met (such as the division property above), the selectors and constructors constitute a valid representation of a kind of data. The implementation details below an abstraction barrier may change, but if the behavior does not, then the data abstraction remains valid, and any program written using this data abstraction will remain correct.  </p>"},{"location":"CS61A-2020-summer/chapter2/#23-sequences","title":"2.3 Sequences","text":"<p>A sequence is an ordered collection of values. The sequence is a powerful, fundamental abstraction in computer science. Sequences are not instances of a particular built-in type or abstract data representation, but instead a collection of behaviors that are shared among several different types of data. That is, there are many kinds of sequences, but they all share common behavior. In particular  </p> <ul> <li>Length. A sequence has a finite length. An empty sequence has length 0.  </li> <li>Element selection. A sequence has an element corresponding to any non-negative integer index less than its length, starting at 0 for the first element.  </li> </ul>"},{"location":"CS61A-2020-summer/chapter2/#231-lists","title":"2.3.1 Lists","text":"<p>A <code>list</code> value is a sequence that can have arbitrary length. Lists have a large set of built-in behaviors, along with specific syntax to express those behaviors. We have already seen the <code>list</code> literal, which evaluates to a <code>list</code> instance, as well as an element selection expression that evaluates to a value in the <code>list</code>. The built-in <code>len</code> function returns the length of a sequence. Additionally, lists can be added together and multiplied by integers. For sequences, addition and multiplication do not add or multiply elements, but instead combine and replicate the sequences themselves.  </p>"},{"location":"CS61A-2020-summer/chapter2/#232-sequence-iteration","title":"2.3.2 Sequence Iteration","text":"<p>The Python for statement can simplify this function body by iterating over the element values directly without introducing the name index at all. A <code>for</code> statement is executed by the following procedure:</p> <ol> <li>Evaluate the header <code>&lt;expression&gt;</code>, which must yield an iterable value.  </li> <li>For each element value in that iterable value, in order:<ol> <li>Bind <code>&lt;name&gt;</code> to that value in the current frame.</li> <li>Execute the <code>&lt;suite&gt;</code>.</li> </ol> </li> </ol> <p>This execution procedure refers to iterable values. Lists are a type of sequence, and sequences are iterable values. Their elements are considered in their sequential order. Sequence unpacking. A common pattern in programs is to have a sequence of elements that are themselves sequences, but all of a fixed length. A for statement may include multiple names in its header to \"unpack\" each element sequence into its respective elements. For example, we may have a list of two-element lists. <pre><code>&gt;&gt;&gt; pairs = [[1, 2], [2, 2], [2, 3], [4, 4]]\n&gt;&gt;&gt; same_count = 0\n&gt;&gt;&gt; for x, y in pairs:\n        if x == y:\n            same_count = same_count + 1\n&gt;&gt;&gt; same_count\n2\n</code></pre> This pattern of binding multiple names to multiple values in a fixed-length sequence is called sequence unpacking </p> <p>Ranges. A <code>range</code> is another built-in type of sequence in Python, which represents a range of integers. Ranges are created with <code>range</code>, which takes two integer arguments: the first number and one beyond the last number in the desired range. Calling the <code>list</code> constructor on a range evaluates to a list with the same elements as the range, so that the elements can be easily inspected.  </p> <p><pre><code>&gt;&gt;&gt; list(range(5, 8))\n[5, 6, 7]\n</code></pre> If only one argument is given, it is interpreted as one beyond the last value for a range that starts at 0.</p> <pre><code>&gt;&gt;&gt; list(range(4))\n[0, 1, 2, 3]\n</code></pre>"},{"location":"CS61A-2020-summer/chapter2/#233-sequence-processing","title":"2.3.3 Sequence Processing","text":"<p>List Comprehensions.  The general form of a list comprehension is: <code>[&lt;map expression&gt; for &lt;name&gt; in &lt;sequence expression&gt; if &lt;filter expression&gt;]</code> To evaluate a list comprehension, Python evaluates the <code>&lt;sequence expression&gt;</code>, which must return an iterable value. Then, for each element in order, the element value is bound to <code>&lt;name&gt;</code>, the filter expression is evaluated, and if it yields a true value, the map expression is evaluated. The values of the map expression are collected into a list.  </p> <p>Aggregation. A third common pattern in sequence processing is to aggregate all values in a sequence into a single value. The built-in functions <code>sum</code>, <code>min</code>, and <code>max</code> are all examples of aggregation functions.</p> <p>Higher-Order Functions. The common patterns we have observed in sequence processing can be expressed using higher-order functions. First, evaluating an expression for each element in a sequence can be expressed by applying a function to each element. <pre><code>&gt;&gt;&gt; def apply_to_all(map_fn, s):\n        return [map_fn(x) for x in s]\n</code></pre></p> <p>Selecting only elements for which some expression is true can be expressed by applying a function to each element. <pre><code>&gt;&gt;&gt; def keep_if(filter_fn, s):\n        return [x for x in s if filter_fn(x)]\n</code></pre> Finally, many forms of aggregation can be expressed as repeatedly applying a two-argument function to the <code>reduced</code> value so far and each element in turn. <pre><code>&gt;&gt;&gt; def reduce(reduce_fn, s, initial):\n        reduced = initial\n        for x in s:\n            reduced = reduce_fn(reduced, x)\n        return reduced\n</code></pre> Conventional Names. In the computer science community, the more common name for <code>apply_to_all</code> is <code>map</code> and the more common name for <code>keep_if</code> is <code>filter</code>. In Python, the built-in <code>map</code> and <code>filter</code> are generalizations of these functions that do not return lists. The definitions above are equivalent to applying the <code>list</code> constructor to the result of built-in <code>map</code> and <code>filter</code> calls. <pre><code>&gt;&gt;&gt; apply_to_all = lambda map_fn, s: list(map(map_fn, s))\n&gt;&gt;&gt; keep_if = lambda filter_fn, s: list(filter(filter_fn, s))\n</code></pre> The <code>reduce</code> function is built into the functools module of the Python standard library. In this version, the <code>initial</code> argument is optional. <pre><code>&gt;&gt;&gt; from functools import reduce\n&gt;&gt;&gt; from operator import mul\n&gt;&gt;&gt; def product(s):\n        return reduce(mul, s)\n&gt;&gt;&gt; product([1, 2, 3, 4, 5])\n120\n</code></pre></p>"},{"location":"CS61A-2020-summer/chapter2/#234-sequence-abstraction","title":"2.3.4 Sequence Abstraction","text":"<p>We have introduced two native data types that satisfy the sequence abstraction: lists and ranges. Both satisfy the conditions with which we began this section: length and element selection. Python includes two more behaviors of sequence types that extend the sequence abstraction. Membership. A value can be tested for membership in a sequence. Python has two operators <code>in</code> and <code>not in</code> that evaluate to <code>True</code> or <code>False</code> depending on whether an element appears in a sequence. Slicing. Sequences contain smaller sequences within them. A slice of a sequence is any contiguous span of the original sequence, designated by a pair of integers. As with the <code>range</code> constructor, the first integer indicates the starting index of the slice and the second indicates one beyond the ending index. In Python, sequence slicing is expressed similarly to element selection, using square brackets. A colon separates the starting and ending indices. Any bound that is omitted is assumed to be an extreme value: 0 for the starting index, and the length of the sequence for the ending index. </p>"},{"location":"CS61A-2020-summer/chapter2/#235-strings","title":"2.3.5 Strings","text":"<p>Text values are perhaps more fundamental to computer science than even numbers. As a case in point, Python programs are written and stored as text. The native data type for text in Python is called a string, and corresponds to the constructor str. String Coercion. A string can be created from any object in Python by calling the str constructor function with an object value as its argument. This feature of strings is useful for constructing descriptive strings from objects of various types. <pre><code>&gt;&gt;&gt; str(2) + ' is an element of ' + str(digits)\n'2 is an element of [1, 8, 2, 8]'\n</code></pre></p>"},{"location":"CS61A-2020-summer/chapter2/#24-mutable-data","title":"2.4 Mutable Data","text":"<p>One powerful technique for creating modular programs is to incorporate data that may change state over time. In this way, a single data object can represent something that evolves independently of the rest of the program. The behavior of a changing object may be influenced by its history, just like an entity in the world. Adding state to data is a central ingredient of a paradigm called object-oriented programming. </p>"},{"location":"CS61A-2020-summer/chapter2/#241-the-object-metaphor","title":"2.4.1 The Object Metaphor","text":"<p>Objects are both information and processes, bundled together to represent the properties, interactions, and behaviors of complex things. Objects have attributes, which are named values that are part of the object. In Python, like many other programming languages, we use dot notation to designated an attribute of an object.</p> <p><code>&lt;expression&gt;.&lt;name&gt;</code> above, the <code>&lt;expression&gt;</code> evaluates to an object, and  is the name of an attribute of that object"},{"location":"CS61A-2020-summer/chapter2/#242-sequence-objects","title":"2.4.2 Sequence Objects","text":"<p>Methods also exist for inserting, sorting, and reversing lists. All of these mutation operations change the value of the list; they do not create new list objects. Sharing and Identity. Because we have been changing a single list rather than creating new lists, the object bound to the name <code>chinese</code> has also changed, because it is the same list object that was bound to <code>suits</code>! This behavior is new. Previously, if a name did not appear in a statement, then its value would not be affected by that statement. With mutable data, methods called on one name can affect another name at the same time. Lists can be copied using the <code>list</code> constructor function. Changes to one list do not affect another, unless they share structure.  </p> <p><pre><code>&gt;&gt;&gt; nest = list(suits)  # Bind \"nest\" to a second list with the same elements\n&gt;&gt;&gt; nest[0] = suits     # Create a nested list\n</code></pre> According to this environment, changing the list referenced by <code>suits</code> will affect the nested list that is the first element of <code>nest</code>, but not the other elements.  </p> <p>Because two lists may have the same contents but in fact be different lists, we require a means to test whether two objects are the same. Python includes two comparison operators, called <code>is</code> and <code>is not</code>, that test whether two expressions in fact evaluate to the identical object. Two objects are identical if they are equal in their current value, and any change to one will always be reflected in the other. Identity is a stronger condition than equality. List comprehensions. A list comprehension always creates a new list. Tuples. A tuple, an instance of the built-in <code>tuple</code> type, is an immutable sequence. Tuples are created using a tuple literal that separates element expressions by commas. Parentheses are optional but used commonly in practice. Any objects can be placed within tuples. tuple<pre><code>&gt;&gt;&gt; 1, 2 + 3\n(1, 5)\n&gt;&gt;&gt; (\"the\", 1, (\"and\", \"only\"))\n('the', 1, ('and', 'only'))\n&gt;&gt;&gt; type( (10, 20) )\n&lt;class 'tuple'&gt;\n</code></pre> Tuples are used implicitly in multiple assignment. An assignment of two values to two names creates a two-element tuple and then unpacks it. </p>"},{"location":"CS61A-2020-summer/chapter2/#243-dictionaries","title":"2.4.3 Dictionaries","text":"<p>Dictionaries are Python's built-in data type for storing and manipulating correspondence relationships. A dictionary contains key-value pairs, where both the keys and values are objects. The purpose of a dictionary is to provide an abstraction for storing and retrieving values that are indexed not by consecutive integers, but by descriptive keys. The dictionary type also supports various methods of iterating over the contents of the dictionary as a whole. The methods <code>keys</code>, <code>values</code>, and <code>items</code> all return iterable values. <pre><code>&gt;&gt;&gt; sum(numerals.values())\n66\n</code></pre> A list of key-value pairs can be converted into a dictionary by calling the dict constructor function. <pre><code>&gt;&gt;&gt; dict([(3, 9), (4, 16), (5, 25)])\n{3: 9, 4: 16, 5: 25}\n</code></pre> Dictionaries do have some restrictions:</p> <ul> <li>A key of a dictionary cannot be or contain a mutable value.</li> <li>There can be at most one value for a given key</li> </ul> <p>A useful method implemented by dictionaries is <code>get</code>, which returns either the value for a <code>key</code>, if the <code>key</code> is present, or a default value. The arguments to <code>get</code> are the key and the default value. <pre><code>&gt;&gt;&gt; numerals.get('A', 0)\n0\n&gt;&gt;&gt; numerals.get('V', 0)\n5\n</code></pre> Dictionaries also have a comprehension syntax analogous to those of lists. A key expression and a value expression are separated by a colon. Evaluating a dictionary comprehension creates a new dictionary object. <pre><code>&gt;&gt;&gt; {x: x*x for x in range(3,6)}\n{3: 9, 4: 16, 5: 25}\n</code></pre></p>"},{"location":"CS61A-2020-summer/chapter2/#244-local-state","title":"2.4.4 Local State","text":"<p>Lists and dictionaries have local state: they are changing values that have some particular contents at any point in the execution of a program. The word \"state\" implies an evolving process in which that state may change. Functions can also have local state.  <pre><code>&gt;&gt;&gt; def make_withdraw(balance):\n        \"\"\"Return a withdraw function that draws down balance with each call.\"\"\"\n        def withdraw(amount):\n            nonlocal balance                 # Declare the name \"balance\" nonlocal\n            if amount &gt; balance:\n                return 'Insufficient funds'\n            balance = balance - amount       # Re-bind the existing balance name\n            return balance\n        return withdraw\n</code></pre> The <code>nonlocal</code> statement declares that whenever we change the binding of the name <code>balance</code>, the binding is changed in the first frame in which <code>balance</code> is already bound. Recall that without the <code>nonlocal</code> statement, an assignment statement would always bind a name in the first frame of the current environment. The <code>nonlocal</code> statement indicates that the name appears somewhere in the environment other than the first (local) frame or the last (global) frame. </p> <p>By virtue of changing the binding for <code>balance</code>, we have changed the <code>withdraw</code> function as well.  </p> <p>Ever since we first encountered nested def statements, we have observed that a locally defined function can look up names outside of its local frames. No nonlocal statement is required to access a non-local name. By contrast, only after a nonlocal statement can a function change the binding of names in these frames. By introducing <code>nonlocal</code> statements, we have created a dual role for assignment statements. Either they change local bindings, or they change nonlocal bindings. In fact, assignment statements already had a dual role: they either created new bindings or re-bound existing names. Assignment can also change the contents of lists and dictionaries. The many roles of Python assignment can obscure the effects of executing an assignment statement. It is up to you as a programmer to document your code clearly so that the effects of assignment can be understood by others. Python Particulars. This pattern of non-local assignment is a general feature of programming languages with higher-order functions and lexical scope. Most other languages do not require a nonlocal statement at all. Instead, non-local assignment is often the default behavior of assignment statements. <pre><code>1   def make_withdraw(balance):\n2       def withdraw(amount):\n3           if amount &gt; balance:\n4               return 'Insufficient funds'\n5           balance = balance - amount\n6           return balance\n7       return withdraw\n8   \n9   wd = make_withdraw(20)\n10  wd(5)\n</code></pre> This <code>UnboundLocalError</code> appears because <code>balance</code> is assigned locally in line 5, and so Python assumes that all references to <code>balance</code> must appear in the local frame as well. This error occurs before line 5 is ever executed, implying that Python has considered line 5 in some way before executing line 3. As we study interpreter design, we will see that pre-computing facts about a function body before executing it is quite common. In this case, Python's pre-processing restricted the frame in which <code>balance</code> could appear, and thus prevented the name from being found. Adding a <code>nonlocal</code> statement corrects this error. The <code>nonlocal</code> statement did not exist in Python 2.  </p>"},{"location":"CS61A-2020-summer/chapter2/#245-the-benifits-of-non-local-assignment","title":"2.4.5 The Benifits of Non-Local Assignment","text":"<p>Non-local assignment is an important step on our path to viewing a program as a collection of independent and autonomous objects, which interact with each other but each manage their own internal state. The key to correctly analyzing code with non-local assignment is to remember that only function calls can introduce new frames. Assignment statements always change bindings in existing frames. In this case, unless <code>make_withdraw</code> is called twice, there can be only one binding for <code>balance</code>.</p>"},{"location":"CS61A-2020-summer/chapter2/#25-object-oriented-programming","title":"2.5 Object-Oriented Programming","text":""},{"location":"CS61A-2020-summer/chapter2/#251-objects-and-classes","title":"2.5.1 Objects and Classes","text":"<p>A class serves as a template for all objects whose type is that class. Every object is an instance of some particular class. The act of creating a new object instance is known as instantiating the class. The syntax in Python for instantiating a class is identical to the syntax of calling a function.  The attributes specific to a particular object, as opposed to all objects of a class, are called instance attributes. In the broader programming community, instance attributes may also be called fields, properties, or instance variables. Functions that operate on the object or perform object-specific computations are called methods. The return values and side effects of a method can depend upon and change other attributes of the object. We say that methods are invoked on a particular object.  </p>"},{"location":"CS61A-2020-summer/chapter2/#252-defining-classes","title":"2.5.2 Defining Classes","text":"<p>User-defined classes are created by class statements, which consist of a single clause. A class statement defines the class name, then includes a suite of statements to define the attributes of the class: <pre><code>class &lt;name&gt;:\n    &lt;suite&gt;\n</code></pre> When a class statement is executed, a new class is created and bound to <code>&lt;name&gt;</code> in the first frame of the current environment. The suite is then executed. Any names bound within the <code>&lt;suite&gt;</code> of a class statement, through <code>def</code> or assignment statements, create or modify attributes of the class. The method that initializes objects has a special name in Python, <code>__init__</code> (two underscores on each side of the word \"init\"), and is called the constructor for the class. <pre><code>&gt;&gt;&gt; class Account:\n        def __init__(self, account_holder):\n            self.balance = 0\n            self.holder = account_holder\n</code></pre> The <code>__init__</code> method for Account has two formal parameters. The first one, self, is bound to the newly created Account object. The second parameter, <code>account_holder</code>, is bound to the argument passed to the class when it is called to be instantiated. Identity. Each new account instance has its own balance attribute, the value of which is independent of other objects of the same class. Methods. Object methods are also defined by a def statement in the suite of a class statement. Below, deposit and withdraw are both defined as methods on objects of the Account class. <pre><code>&gt;&gt;&gt; class Account:\n        def __init__(self, account_holder):\n            self.balance = 0\n            self.holder = account_holder\n        def deposit(self, amount):\n            self.balance = self.balance + amount\n            return self.balance\n        def withdraw(self, amount):\n            if amount &gt; self.balance:\n                return 'Insufficient funds'\n            self.balance = self.balance - amount\n            return self.balance\n</code></pre> The function value that is created by a <code>def</code> statement within a <code>class</code> statement is bound to the declared name, but bound locally within the class as an attribute. That value is invoked as a method using dot notation from an instance of the class. Each method definition again includes a special first parameter self, which is bound to the object on which the method is invoked. <pre><code>&gt;&gt;&gt; spock_account = Account('Spock')\n&gt;&gt;&gt; spock_account.deposit(100)\n100\n&gt;&gt;&gt; spock_account.withdraw(90)\n10\n&gt;&gt;&gt; spock_account.withdraw(90)\n'Insufficient funds'\n&gt;&gt;&gt; spock_account.holder\n'Spock'\n</code></pre> When a method is invoked via dot notation, the object itself (bound to <code>spock_account</code>, in this case) plays a dual role. First, it determines what the name <code>withdraw</code> means; <code>withdraw</code> is not a name in the environment, but instead a name that is local to the <code>Account</code> class. Second, it is bound to the first parameter <code>self</code> when the <code>withdraw</code> method is invoked.  </p>"},{"location":"CS61A-2020-summer/chapter2/#253-message-passing-and-dot-expressions","title":"2.5.3 Message Passing and Dot Expressions","text":"<p>Dot expressions. The code fragment <code>spock_account.deposit</code> is called a dot expression. A dot expression consists of an expression, a dot, and a name:  <code>&lt;expression&gt; . &lt;name&gt;</code> A dot expression evaluates to the value of the attribute with the given <code>&lt;name&gt;</code>, for the object that is the value of the <code>&lt;expression&gt;</code>. The built-in function <code>getattr</code> also returns an attribute for an object by name. It is the function equivalent of dot notation. Using <code>getattr</code>, we can look up an attribute using a string, just as we did with a dispatch dictionary. <pre><code>&gt;&gt;&gt; getattr(spock_account, 'balance')\n10\n</code></pre> We can also test whether an object has a named attribute with <code>hasattr</code>. <pre><code>&gt;&gt;&gt; hasattr(spock_account, 'deposit')\nTrue\n</code></pre> The attributes of an object include all of its instance attributes, along with all of the attributes (including methods) defined in its class. Methods are attributes of the class that require special handling. Methods and functions. When a method is invoked on an object, that object is implicitly passed as the first argument to the method. That is, the object that is the value of the <code>&lt;expression&gt;</code> to the left of the dot is passed automatically as the first argument to the method named on the right side of the dot expression. As a result, the object is bound to the parameter self. To achieve automatic <code>self</code> binding, Python distinguishes between functions, which we have been creating since the beginning of the text, and bound methods, which couple together a function and the object on which that method will be invoked. A bound method value is already associated with its first argument, the instance on which it was invoked, which will be named <code>self</code> when the method is called. We can see the difference in the interactive interpreter by calling <code>type</code> on the returned values of dot expressions. As an attribute of a class, a method is just a function, but as an attribute of an instance, it is a bound method: <pre><code>&gt;&gt;&gt; type(Account.deposit)\n&lt;class 'function'&gt;\n&gt;&gt;&gt; type(spock_account.deposit)\n&lt;class 'method'&gt;\n</code></pre> Naming Conventions. Class names are conventionally written using the CapWords convention (also called CamelCase because the capital letters in the middle of a name look like humps). Method names follow the standard convention of naming functions using lowercased words separated by underscores.</p>"},{"location":"CS61A-2020-summer/chapter2/#254-class-attributes","title":"2.5.4 Class Attributes","text":"<p>Some attribute values are shared across all objects of a given class. Such attributes are associated with the class itself, rather than any individual instance of the class.  Attribute names. We have introduced enough complexity into our object system that we have to specify how names are resolved to particular attributes. After all, we could easily have a class attribute and an instance attribute with the same name. <code>&lt;expression&gt; . &lt;name&gt;</code> 1. Evaluate the <code>&lt;expression&gt;</code> to the left of the dot, which yields the <code>object</code> of the dot expression. 2. <code>&lt;name&gt;</code> is matched against the instance attributes of that object; if an attribute with that name exists, its value is returned. 3. If <code>&lt;name&gt;</code> does not appear among instance attributes, then <code>&lt;name&gt;</code> is looked up in the class, which yields a class attribute value. 4. That value is returned unless it is a function, in which case a bound method is returned instead.  </p> <p>In this evaluation procedure, instance attributes are found before class attributes, just as local names have priority over global in an environment. Attribute assignment. All assignment statements that contain a dot expression on their left-hand side affect attributes for the object of that dot expression. If the object is an instance, then assignment sets an instance attribute. If the object is a class, then assignment sets a class attribute. As a consequence of this rule, assignment to an attribute of an object cannot affect the attributes of its class. The examples below illustrate this distinction. If we assign to the named attribute <code>interest</code> of an account instance, we create a new instance attribute that has the same name as the existing class attribute.  </p>"},{"location":"CS61A-2020-summer/chapter2/#255-inheritance","title":"2.5.5 Inheritance","text":"<p>A subclass inherits the attributes of its base class, but may override certain attributes, including certain methods. With inheritance, we only specify what is different between the subclass and the base class. Anything that we leave unspecified in the subclass is automatically assumed to behave just as it would for the base class. Inheritance is meant to represent is-a relationships between classes, which contrast with has-a relationships. A checking account is-a specific type of account, so having a CheckingAccount inherit from Account is an appropriate use of inheritance. On the other hand, a bank has-a list of bank accounts that it manages, so neither should inherit from the other.</p>"},{"location":"CS61A-2020-summer/chapter2/#256-using-inheritance","title":"2.5.6 Using Inheritance","text":"<p><pre><code>&gt;&gt;&gt; class Account:\n        \"\"\"A bank account that has a non-negative balance.\"\"\"\n        interest = 0.02\n        def __init__(self, account_holder):\n            self.balance = 0\n            self.holder = account_holder\n        def deposit(self, amount):\n            \"\"\"Increase the account balance by amount and return the new balance.\"\"\"\n            self.balance = self.balance + amount\n            return self.balance\n        def withdraw(self, amount):\n            \"\"\"Decrease the account balance by amount and return the new balance.\"\"\"\n            if amount &gt; self.balance:\n                return 'Insufficient funds'\n            self.balance = self.balance - amount\n            return self.balance\n</code></pre> A full implementation of <code>CheckingAccount</code> appears below. We specify inheritance by placing an expression that evaluates to the base class in parentheses after the class name. <pre><code>&gt;&gt;&gt; class CheckingAccount(Account):\n        \"\"\"A bank account that charges for withdrawals.\"\"\"\n        withdraw_charge = 1\n        interest = 0.01\n        def withdraw(self, amount):\n            return Account.withdraw(self, amount + self.withdraw_charge)\n</code></pre> When Python resolves a name in a dot expression that is not an attribute of the instance, it looks up the name in the class. In fact, the act of \"looking up\" a name in a class tries to find that name in every base class in the inheritance chain for the original object's class. We can define this procedure recursively. To look up a name in a class. 1. If it names an attribute in the class, return the attribute value. 2. Otherwise, look up the name in the base class, if there is one.</p> <p>In the case of <code>deposit</code>, Python would have looked for the name first on the instance, and then in the <code>CheckingAccount</code> class. Finally, it would look in the <code>Account</code> class, where <code>deposit</code> is defined.  </p>"},{"location":"CS61A-2020-summer/chapter2/#27-object-abstraction","title":"2.7 Object Abstraction","text":"<p>A central concept in object abstraction is a generic function, which is a function that can accept values of multiple different types. We will consider three different techniques for implementing generic functions: shared interfaces, type dispatching, and type coercion. In the process of building up these concepts, we will also discover features of the Python object system that support the creation of generic functions.  </p>"},{"location":"CS61A-2020-summer/chapter2/#271-string-conversion","title":"2.7.1 String Conversion","text":"<p>To represent data effectively, an object value should behave like the kind of data it is meant to represent, including producing a string representation of itself. String representations of data values are especially important in an interactive language such as Python that automatically displays the string representation of the values of expressions in an interactive session. Python stipulates that all objects should produce two different string representations: one that is human-interpretable text and one that is a Python-interpretable expression. The constructor function for strings, str, returns a human-readable string. Where possible, the repr function returns a Python expression that evaluates to an equal object. The docstring for repr explains this property: <pre><code>repr(object) -&gt; string\n\nReturn the canonical string representation of the object.\nFor most object types, eval(repr(object)) == object.\n</code></pre> The result of calling repr on the value of an expression is what Python prints in an interactive session. In cases where no representation exists that evaluates to the original value, Python typically produces a description surrounded by angled brackets. <pre><code>&gt;&gt;&gt; 12e12\n12000000000000.0\n&gt;&gt;&gt; print(repr(12e12))\n12000000000000.0\n&gt;&gt;&gt; repr(min)\n'&lt;built-in function min&gt;'\n</code></pre> The str <code>constructor</code> often coincides with <code>repr</code>, but provides a more interpretable text representation in some cases. For instance, we see a difference between <code>str</code> and <code>repr</code> with dates. <pre><code>&gt;&gt;&gt; from datetime import date\n&gt;&gt;&gt; tues = date(2011, 9, 12)\n&gt;&gt;&gt; repr(tues)\n'datetime.date(2011, 9, 12)'\n&gt;&gt;&gt; str(tues)\n'2011-09-12'\n</code></pre> Defining the <code>repr</code> function presents a new challenge: we would like it to apply correctly to all data types, even those that did not exist when <code>repr</code> was implemented. We would like it to be a generic or polymorphic function, one that can be applied to many (poly) different forms (morph) of data. The object system provides an elegant solution in this case: the <code>repr</code> function always invokes a method called <code>__repr__</code> on its argument. <pre><code>&gt;&gt;&gt; tues.__repr__()\n'datetime.date(2011, 9, 12)'\n</code></pre> By implementing this same method in user-defined classes, we can extend the applicability of <code>repr</code> to any class we create in the future. This example highlights another benefit of dot expressions in general, that they provide a mechanism for extending the domain of existing functions to new object types. These polymorphic functions are examples of a more general principle: certain functions should apply to multiple data types. Moreover, one way to create such a function is to use a shared attribute name with a different definition in each class.</p>"},{"location":"CS61A-2020-summer/chapter2/#272-special-methods","title":"2.7.2 Special Methods","text":"<p>In Python, certain special names are invoked by the Python interpreter in special circumstances. For instance, the <code>__init__</code> method of a class is automatically invoked whenever an object is constructed. The <code>__str__</code> method is invoked automatically when printing, and <code>__repr__</code> is invoked in an interactive session to display values. True and false values. We saw previously that numbers in Python have a truth value; more specifically, 0 is a false value and all other numbers are true values. In fact, all objects in Python have a truth value. By default, objects of user-defined classes are considered to be true, but the special <code>__bool__</code> method can be used to override this behavior. If an object defines the <code>__bool__</code> method, then Python calls that method to determine its truth value. As an example, suppose we want a bank account with 0 balance to be false. We can add a <code>__bool__</code> method to the <code>Account</code> class to create this behavior.  <pre><code>&gt;&gt;&gt; Account.__bool__ = lambda self: self.balance != 0\n</code></pre> We can call the <code>bool</code> constructor to see the truth value of an object, and we can use any object in a boolean context. <pre><code>&gt;&gt;&gt; bool(Account('Jack'))\nFalse\n&gt;&gt;&gt; if not Account('Jack'):\n        print('Jack has nothing')\nJack has nothing\n</code></pre> Sequence operations. We have seen that we can call the len function to determine the length of a sequence. <pre><code>&gt;&gt;&gt; len('Go Bears!')\n9\n</code></pre> The <code>len</code> function invokes the <code>__len__</code> method of its argument to determine its length. All built-in sequence types implement this method. <pre><code>&gt;&gt;&gt; 'Go Bears!'.__len__()\n9\n</code></pre> Python uses a sequence's length to determine its truth value, if it does not provide a <code>__bool__</code> method. Empty sequences are false, while non-empty sequences are true. <pre><code>&gt;&gt;&gt; bool('')\nFalse\n&gt;&gt;&gt; bool([])\nFalse\n&gt;&gt;&gt; bool('Go Bears!')\nTrue\n&gt;&gt;&gt; bool(range(0))\n</code></pre> The <code>__getitem__</code> method is invoked by the element selection operator, but it can also be invoked directly. <pre><code>&gt;&gt;&gt; 'Go Bears!'[3]\n'B'\n&gt;&gt;&gt; 'Go Bears!'.__getitem__(3)\n'B'\n</code></pre> Callable objects. In Python, functions are first-class objects, so they can be passed around as data and have attributes like any other object. Python also allows us to define objects that can be \"called\" like functions by including a <code>__call__</code> method. With this method, we can define a class that behaves like a higher-order function. <pre><code>&gt;&gt;&gt; def make_adder(n):\n        def adder(k):\n            return n + k\n        return adder\n&gt;&gt;&gt; add_three = make_adder(3)\n&gt;&gt;&gt; add_three(4)\n7\n</code></pre> We can create an <code>Adder</code> class that defines a <code>__call__</code> method to provide the same functionality. <pre><code>&gt;&gt;&gt; class Adder(object):\n        def __init__(self, n):\n            self.n = n\n        def __call__(self, k):\n            return self.n + k\n&gt;&gt;&gt; add_three_obj = Adder(3)\n&gt;&gt;&gt; add_three_obj(4)\n7\n</code></pre> Here, the <code>Adder</code> class behaves like the <code>make_adder</code> higher-order function, and the <code>add_three_obj</code> object behaves like the <code>add_three</code> function. We have further blurred the line between data and functions.  </p> <p>Arithmetic. Special methods can also define the behavior of built-in operators applied to user-defined objects. In order to provide this generality, Python follows specific protocols to apply each operator. For example, to evaluate expressions that contain the + operator, Python checks for special methods on both the left and right operands of the expression. First, Python checks for an <code>__add__</code> method on the value of the left operand, then checks for an <code>__radd__</code> method on the value of the right operand. If either is found, that method is invoked with the value of the other operand as its argument.   </p>"},{"location":"CS61A-2020-summer/chapter2/#273-multiple-representations","title":"2.7.3 Multiple Representations","text":"<p><pre><code>&gt;&gt;&gt; class Number:\n        def __add__(self, other):\n            return self.add(other)\n        def __mul__(self, other):\n            return self.mul(other)\n</code></pre> The <code>Complex</code> class inherits from <code>Number</code> and describes arithmetic for complex numbers. <pre><code>&gt;&gt;&gt; class Complex(Number):\n        def add(self, other):\n            return ComplexRI(self.real + other.real, self.imag + other.imag)\n        def mul(self, other):\n            magnitude = self.magnitude * other.magnitude\n            return ComplexMA(magnitude, self.angle + other.angle)\n</code></pre> This implementation assumes that two classes exist for complex numbers, corresponding to their two natural representations:  </p> <ul> <li><code>ComplexRI</code> constructs a complex number from real and imaginary parts.</li> <li><code>ComplexMA</code> constructs a complex number from a magnitude and angle.</li> </ul> <p>Interfaces. An interface is a set of shared attribute names, along with a specification of their behavior. Properties. The requirement that two or more attribute values maintain a fixed relationship with each other is a new problem. One solution is to store attribute values for only one representation and compute the other representation whenever it is needed. Python has a simple feature for computing attributes on the fly from zero-argument functions. The <code>@property</code> decorator allows functions to be called without call expression syntax (parentheses following an expression). The <code>ComplexRI</code> class stores <code>real</code> and <code>imag</code> attributes and computes <code>magnitude</code> and <code>angle</code> on demand. <pre><code>&gt;&gt;&gt; from math import atan2\n&gt;&gt;&gt; class ComplexRI(Complex):\n        def __init__(self, real, imag):\n            self.real = real\n            self.imag = imag\n        @property\n        def magnitude(self):\n            return (self.real ** 2 + self.imag ** 2) ** 0.5\n        @property\n        def angle(self):\n            return atan2(self.imag, self.real)\n        def __repr__(self):\n            return 'ComplexRI({0:g}, {1:g})'.format(self.real, self.imag)\n</code></pre> As a result of this implementation, all four attributes needed for complex arithmetic can be accessed without any call expressions, and changes to <code>real</code> or <code>imag</code> are reflected in the <code>magnitude</code> and <code>angle</code>. <pre><code>&gt;&gt;&gt; ri = ComplexRI(5, 12)\n&gt;&gt;&gt; ri.real\n5\n&gt;&gt;&gt; ri.magnitude\n13.0\n&gt;&gt;&gt; ri.real = 9\n&gt;&gt;&gt; ri.real\n9\n&gt;&gt;&gt; ri.magnitude\n15.0\n</code></pre> Similarly, the <code>ComplexMA</code> class stores <code>magnitude</code> and <code>angle</code>, but computes <code>real</code> and <code>imag</code> whenever those attributes are looked up. <pre><code>&gt;&gt;&gt; from math import sin, cos, pi\n&gt;&gt;&gt; class ComplexMA(Complex):\n        def __init__(self, magnitude, angle):\n            self.magnitude = magnitude\n            self.angle = angle\n        @property\n        def real(self):\n            return self.magnitude * cos(self.angle)\n        @property\n        def imag(self):\n            return self.magnitude * sin(self.angle)\n        def __repr__(self):\n            return 'ComplexMA({0:g}, {1:g} * pi)'.format(self.magnitude, self.angle/pi)\n</code></pre> Changes to the magnitude or angle are reflected immediately in the <code>real</code> and <code>imag</code> attributes. <pre><code>&gt;&gt;&gt; ma = ComplexMA(2, pi/2)\n&gt;&gt;&gt; ma.imag\n2.0\n&gt;&gt;&gt; ma.angle = pi\n&gt;&gt;&gt; ma.real\n-2.0\n</code></pre></p>"},{"location":"CS61A-2020-summer/chapter2/#274-generic-functions","title":"2.7.4 Generic Functions","text":"<p>Generic functions are methods or functions that apply to arguments of different types. Using interfaces and message passing is only one of several methods used to implement generic functions. We will consider two others in this section: type dispatching and type coercion. type dispatching The <code>__add__</code> method considers two cases. First, if two arguments have the same type tag, then it assumes that add method of the first can take the second as an argument. Otherwise, it checks whether a dictionary of cross-type implementations, called adders, contains a function that can add arguments of those type tags. If there is such a function, the cross_apply method finds and applies it. The <code>__mul__</code> method has a similar structure. <pre><code>&gt;&gt;&gt; class Number:\n        def __add__(self, other):\n            if self.type_tag == other.type_tag:\n                return self.add(other)\n            elif (self.type_tag, other.type_tag) in self.adders:\n                return self.cross_apply(other, self.adders)\n        def __mul__(self, other):\n            if self.type_tag == other.type_tag:\n                return self.mul(other)\n            elif (self.type_tag, other.type_tag) in self.multipliers:\n                return self.cross_apply(other, self.multipliers)\n        def cross_apply(self, other, cross_fns):\n            cross_fn = cross_fns[(self.type_tag, other.type_tag)]\n            return cross_fn(self, other)\n        adders = {(\"com\", \"rat\"): add_complex_and_rational,\n                  (\"rat\", \"com\"): add_rational_and_complex}\n        multipliers = {(\"com\", \"rat\"): mul_complex_and_rational,\n                       (\"rat\", \"com\"): mul_rational_and_complex}\n</code></pre> Coercion. In general, we can implement this idea by designing coercion functions that transform an object of one type into an equivalent object of another type. Here is a typical coercion function, which transforms a rational number to a complex number with zero imaginary part: <pre><code>&gt;&gt;&gt; def rational_to_complex(r):\n        return ComplexRI(r.numer/r.denom, 0)\n</code></pre> The <code>coerce</code> method returns two values with the same type tag. It inspects the type tags of its arguments, compares them to entries in the <code>coercions</code> dictionary, and converts one argument to the type of the other using <code>coerce_to</code>. Only one entry in <code>coercions</code> is necessary to complete our cross-type arithmetic system, replacing the four cross-type functions in the type-dispatching version of <code>Number</code>. <pre><code>&gt;&gt;&gt; class Number:\n        def __add__(self, other):\n            x, y = self.coerce(other)\n            return x.add(y)\n        def __mul__(self, other):\n            x, y = self.coerce(other)\n            return x.mul(y)\n        def coerce(self, other):\n            if self.type_tag == other.type_tag:\n                return self, other\n            elif (self.type_tag, other.type_tag) in self.coercions:\n                return (self.coerce_to(other.type_tag), other)\n            elif (other.type_tag, self.type_tag) in self.coercions:\n                return (self, other.coerce_to(self.type_tag))\n        def coerce_to(self, other_tag):\n            coercion_fn = self.coercions[(self.type_tag, other_tag)]\n            return coercion_fn(self)\n        coercions = {('rat', 'com'): rational_to_complex}\n</code></pre></p>"},{"location":"CS61A-2020-summer/chapter2/#28-efficiency","title":"2.8 Efficiency","text":""},{"location":"CS61A-2020-summer/chapter2/#281-measuring-efficiency","title":"2.8.1 Measuring Efficiency","text":"<p>We can measure this inefficiency. The higher-order <code>count</code> function returns an equivalent function to its argument that also maintains a <code>call_count</code> attribute. In this way, we can inspect just how many times <code>fib</code> is called. <pre><code>&gt;&gt;&gt; def count(f):\n        def counted(*args):\n            counted.call_count += 1\n            return f(*args)\n        counted.call_count = 0\n        return counted  \n</code></pre> The higher-order <code>count_frames</code> function tracks <code>open_count</code>, the number of calls to the function f that have not yet returned. The <code>max_count</code> attribute is the maximum value ever attained by <code>open_count</code>, and it corresponds to the maximum number of frames that are ever simultaneously active during the course of computation. <pre><code>&gt;&gt;&gt; def count_frames(f):\n        def counted(*args):\n            counted.open_count += 1\n            counted.max_count = max(counted.max_count, counted.open_count)\n            result = f(*args)\n            counted.open_count -= 1\n            return result\n        counted.open_count = 0\n        counted.max_count = 0\n        return counted\n\n&gt;&gt;&gt; fib = count_frames(fib)\n&gt;&gt;&gt; fib(19)\n4181\n&gt;&gt;&gt; fib.open_count\n0\n&gt;&gt;&gt; fib.max_count\n19\n&gt;&gt;&gt; fib(24)\n46368\n&gt;&gt;&gt; fib.max_count\n24\n</code></pre></p>"},{"location":"CS61A-2020-summer/chapter2/#282-memoization","title":"2.8.2 Memoization","text":"<p>Memoization can be expressed naturally as a higher-order function, which can also be used as a decorator. The definition below creates a cache of previously computed results, indexed by the arguments from which they were computed. The use of a dictionary requires that the argument to the memoized function be immutable. <pre><code>&gt;&gt;&gt; def memo(f):\n        cache = {}\n        def memoized(n):\n            if n not in cache:\n                cache[n] = f(n)\n            return cache[n]\n        return memoized\n</code></pre></p>"},{"location":"CS61A-2020-summer/chapter2/#29-recursive-objects","title":"2.9 Recursive Objects","text":"<p>Objects can have other objects as attribute values. When an object of some class has an attribute value of that same class, it is a recursive object.  </p>"},{"location":"CS61A-2020-summer/chapter2/#291-linked-list-class","title":"2.9.1 Linked List Class","text":"<p>We can now implement a class with the same behavior. In this version, we will define its behavior using special method names that allow our class to work with the built-in <code>len</code> function and element selection operator (square brackets or <code>operator.getitem</code>) in Python. These built-in functions invoke special method names of a class: length is computed by <code>__len__</code> and element selection is computed by <code>__getitem__</code>. The empty linked list is represented by an empty tuple, which has length 0 and no elements. </p> Class LinkLink ExpressionExtend LinkMap Linkfilter_link <pre><code>&gt;&gt;&gt; class Link:\n        \"\"\"A linked list with a first element and the rest.\"\"\"\n        empty = ()\n        def __init__(self, first, rest=empty):\n            assert rest is Link.empty or isinstance(rest, Link)\n            self.first = first\n            self.rest = rest\n        def __getitem__(self, i):\n            if i == 0:\n                return self.first\n            else:\n                return self.rest[i-1]\n        def __len__(self):\n            return 1 + len(self.rest)\n&gt;&gt;&gt; s = Link(3, Link(4, Link(5)))\n&gt;&gt;&gt; len(s)\n3\n&gt;&gt;&gt; s[1]\n4\n</code></pre> <pre><code>&gt;&gt;&gt; def link_expression(s):\n        \"\"\"Return a string that would evaluate to s.\"\"\"\n        if s.rest is Link.empty:\n            rest = ''\n        else:\n            rest = ', ' + link_expression(s.rest)\n        return 'Link({0}{1})'.format(s.first, rest)\n&gt;&gt;&gt; link_expression(s)\n'Link(3, Link(4, Link(5)))'\n</code></pre> <pre><code>&gt;&gt;&gt; def extend_link(s, t):\n        if s is Link.empty:\n            return t\n        else:\n            return Link(s.first, extend_link(s.rest, t))\n&gt;&gt;&gt; extend_link(s, s)\nLink(3, Link(4, Link(5, Link(3, Link(4, Link(5))))))\n&gt;&gt;&gt; Link.__add__ = extend_link\n&gt;&gt;&gt; s + s\nLink(3, Link(4, Link(5, Link(3, Link(4, Link(5))))))\n</code></pre> <pre><code>&gt;&gt;&gt; def map_link(f, s):\n        if s is Link.empty:\n            return s\n        else:\n            return Link(f(s.first), map_link(f, s.rest))\n&gt;&gt;&gt; map_link(square, s)\nLink(9, Link(16, Link(25)))\n</code></pre> <pre><code>&gt;&gt;&gt; def filter_link(f, s):\n    if s is Link.empty:\n        return s\n    else:\n        filtered = filter_link(f, s.rest)\n        if f(s.first):\n            return Link(s.first, filtered)\n        else:\n            return filtered\n&gt;&gt;&gt; odd = lambda x: x % 2 == 1\n&gt;&gt;&gt; map_link(square, filter_link(odd, s))\nLink(9, Link(25))\n&gt;&gt;&gt; [square(x) for x in [3, 4, 5] if odd(x)]\n[9, 25]\n</code></pre> <p>The definitions of <code>__len__</code> and <code>__getitem__</code> are in fact recursive. The built-in Python function len invokes a method called <code>__len__</code> when applied to a user-defined object argument. Likewise, the element selection operator invokes a method called <code>__getitem__</code>. Thus, bodies of these two methods will call themselves indirectly. For <code>__len__</code>, the base case is reached when self.rest evaluates to the empty tuple, Link.empty, which has a length of 0. The built-in <code>isinstance</code> function returns whether the first argument has a type that is or inherits from the second argument. <code>isinstance(rest, Link)</code> is true if <code>rest</code> is a <code>Link</code> instance or an instance of some sub-class of <code>Link</code>.  </p>"},{"location":"CS61A-2020-summer/chapter2/#292-tree-class","title":"2.9.2 Tree Class","text":"<p>Internal values. Previously, we defined trees in such a way that all values appeared at the leaves of the tree. It is also common to define trees that have internal values at the roots of each subtree. An internal value is called an label in the tree. The Tree class below represents such trees, in which each tree has a sequence of branches that are also trees.  </p> <pre><code>&gt;&gt;&gt; class Tree:\n        def __init__(self, label, branches=()):\n            self.label = label\n            for branch in branches:\n                assert isinstance(branch, Tree)\n            self.branches = branches\n        def __repr__(self):\n            if self.branches:\n                return 'Tree({0}, {1})'.format(self.label, repr(self.branches))\n            else:\n                return 'Tree({0})'.format(repr(self.label))\n        def is_leaf(self):\n            return not self.branches\n</code></pre>"},{"location":"CS61A-2020-summer/chapter2/#293-sets","title":"2.9.3 Sets","text":"<p>In addition to the list, tuple, and dictionary, Python has a fourth built-in container type called a set. Set literals follow the mathematical notation of elements enclosed in braces. Duplicate elements are removed upon construction. Sets are unordered collections, and so the printed ordering may differ from the element ordering in the set literal. <pre><code>&gt;&gt;&gt; s = {3, 2, 1, 4, 4}\n&gt;&gt;&gt; s\n{1, 2, 3, 4}\n</code></pre> Python sets support a variety of operations, including membership tests, length computation, and the standard set operations of union and intersection <pre><code>&gt;&gt;&gt; 3 in s\nTrue\n&gt;&gt;&gt; len(s)\n4\n&gt;&gt;&gt; s.union({1, 5})\n{1, 2, 3, 4, 5}\n&gt;&gt;&gt; s.intersection({6, 5, 4, 3})\n{3, 4}\n</code></pre></p>"},{"location":"CS61A-2020-summer/chapter2/#a-question-about-instance-and-object","title":"A question about instance and object","text":"<p>What is the difference between an instance and an object</p> <p>an instance of a class and an object mean the same thing and can often be used interchangeably</p> <p></p>"},{"location":"CS61A-2020-summer/chapter3/","title":"Chapter 3: Interpreting Computer Programs","text":""},{"location":"CS61A-2020-summer/chapter3/#32-functional-programming","title":"3.2 Functional Programming","text":""},{"location":"CS61A-2020-summer/chapter3/#scheme-specification","title":"scheme specification","text":""},{"location":"CS61A-2020-summer/chapter3/#scheme-built-in-procedure-reference","title":"Scheme Built-In Procedure Reference","text":""},{"location":"CS61A-2020-summer/chapter3/#33-exceptions","title":"3.3 Exceptions","text":"<p>Exceptions, the topic of this section, provides a general mechanism for adding error-handling logic to programs. Raising an exception is a technique for interrupting the normal flow of execution in a program, signaling that some exceptional circumstance has arisen, and returning directly to an enclosing part of the program that was designated to react to that circumstance. The Python interpreter raises an exception each time it detects an error in an expression or statement. Users can also raise exceptions with <code>raise</code> and <code>assert</code> statements. Raising exceptions. An exception is a object instance with a class that inherits, either directly or indirectly, from the <code>BaseException</code> class. The <code>assert</code> statement introduced in Chapter 1 raises an exception with the class <code>AssertionError</code>. In general, any exception instance can be raised with the <code>raise</code> statement. The general form of raise statements are described in the Python docs. The most common use of <code>raise</code> constructs an exception instance and raises it. Handling exceptions. An exception can be handled by an enclosing <code>try</code> statement. A <code>try</code> statement consists of multiple clauses; the first begins with <code>try</code> and the rest begin with <code>except</code>:  </p> <p><pre><code>try:\n    &lt;try suite&gt;\nexcept &lt;exception class&gt; as &lt;name&gt;:\n    &lt;except suite&gt;\n...\n</code></pre> The <code>&lt;try suite&gt;</code> is always executed immediately when the <code>try</code> statement is executed. Suites of the except clauses are only executed when an exception is raised during the course of executing the <code>&lt;try suite&gt;</code>. Each except clause specifies the particular class of exception to handle. For instance, if the <code>&lt;exception class&gt;</code> is AssertionError, then any instance of a class inheriting from AssertionError that is raised during the course of executing the <code>&lt;try suite&gt;</code> will be handled by the following <code>&lt;except suite&gt;</code>. Within the <code>&lt;except suite&gt;</code>, the identifier <code>&lt;name&gt;</code> is bound to the exception object that was raised, but this binding does not persist beyond the <code>&lt;except suite&gt;</code>. <pre><code>&gt;&gt;&gt; try:\n        x = 1/0\n    except ZeroDivisionError as e:\n        print('handling a', type(e))\n        x = 0\nhandling a &lt;class 'ZeroDivisionError'&gt;\n&gt;&gt;&gt; x\n0\n</code></pre></p>"},{"location":"CS61A-2020-summer/chapter4/","title":"Chapter 4: Data Processing","text":""},{"location":"CS61A-2020-summer/chapter4/#41-introduction","title":"4.1 Introduction","text":"<p>Modern computers can process vast amounts of data representing many aspects of the world. From these big data sets, we can learn about human behavior in unprecedented ways: how language is used, what photos are taken, what topics are discussed, and how people engage with their surroundings. To process large data sets efficiently, programs are organized into pipelines of manipulations on sequential streams of data. In this chapter, we consider a suite of techniques process and manipulate sequential data streams efficiently.  </p>"},{"location":"CS61A-2020-summer/chapter4/#42-implicit-sequences","title":"4.2 Implicit Sequences","text":"<p>A sequence can be represented without each element being stored explicitly in the memory of the computer. That is, we can construct an object that provides access to all of the elements of some sequential dataset without computing the value of each element in advance. Instead, we compute elements on demand. An example of this idea arises in the <code>range</code> container type introduced in Chapter 2. A <code>range</code> represents a consecutive, bounded sequence of integers. However, it is not the case that each element of that sequence is represented explicitly in memory. Instead, when an element is requested from a range, it is computed. Hence, we can represent very large ranges of integers without using large blocks of memory. Only the end points of the <code>range</code> are stored as part of the range object. <pre><code>&gt;&gt;&gt; r = range(10000, 1000000000)\n&gt;&gt;&gt; r[45006230]\n45016230\n</code></pre> In this example, not all 999,990,000 integers in this range are stored when the range instance is constructed. Instead, the range object adds the first element 10,000 to the index 45,006,230 to produce the element 45,016,230. Computing values on demand, rather than retrieving them from an existing representation, is an example of lazy computation. In computer science, lazy computation describes any program that delays the computation of a value until that value is needed. </p>"},{"location":"CS61A-2020-summer/chapter4/#421-iterators","title":"4.2.1 Iterators","text":"<p>Python and many other programming languages provide a unified way to process elements of a container value sequentially, called an iterator. An iterator is an object that provides sequential access to values, one by one. The iterator abstraction has two components: a mechanism for retrieving the next element in the sequence being processed and a mechanism for signaling that the end of the sequence has been reached and no further elements remain. For any container, such as a <code>list</code> or <code>range</code>, an iterator can be obtained by calling the built-in <code>iter</code> function. The contents of the iterator can be accessed by calling the built-in <code>next</code> function. <pre><code>&gt;&gt;&gt; primes = [2, 3, 5, 7]\n&gt;&gt;&gt; type(primes)\n&gt;&gt;&gt; iterator = iter(primes)\n&gt;&gt;&gt; type(iterator)\n&gt;&gt;&gt; next(iterator)\n2\n&gt;&gt;&gt; next(iterator)\n3\n&gt;&gt;&gt; next(iterator)\n5\n</code></pre> The way that Python signals that there are no more values available is to raise a <code>StopIteration</code> exception when next is called. This exception can be handled using a <code>try</code> statement. <pre><code>&gt;&gt;&gt; next(iterator)\n7\n&gt;&gt;&gt; next(iterator)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nStopIteration\n&gt;&gt;&gt; try:\n        next(iterator)\n    except StopIteration:\n        print('No more values')\nNo more values\n</code></pre> An iterator maintains local state to represent its position in a sequence. Each time next is called, that position advances. Two separate iterators can track two different positions in the same sequence. However, two names for the same iterator will share a position, because they share the same value. Calling iter on an iterator will return that iterator, not a copy. This behavior is included in Python so that a programmer can call iter on a value to get an iterator without having to worry about whether it is an iterator or a container. The usefulness of iterators is derived from the fact that the underlying series of data for an iterator may not be represented explicitly in memory. An iterator provides a mechanism for considering each of a series of values in turn, but all of those elements do not need to be stored simultaneously. Instead, when the next element is requested from an iterator, that element may be computed on demand instead of being retrieved from an existing memory source. iterators are only required to compute the next element of the series, in order, each time another element is requested. While not as flexible as accessing arbitrary elements of a sequence (called random access), sequential access to sequential data is often sufficient for data processing applications. </p>"},{"location":"CS61A-2020-summer/chapter4/#422-iterables","title":"4.2.2 Iterables","text":"<p>Any value that can produce iterators is called an iterable value. In Python, an iterable value is anything that can be passed to the built-in <code>iter</code> function. Iterables include sequence values such as strings and tuples, as well as other containers such as sets and dictionaries. Iterators are also iterables, because they can be passed to the iter function. If a dictionary changes in structure because a key is added or removed, then all iterators become invalid and future iterators may exhibit arbitrary changes to the order their contents. On the other hand, changing the value of an existing key does not change the order of the contents or invalidate iterators.  </p>"},{"location":"CS61A-2020-summer/chapter4/#423-built-in-iterators","title":"4.2.3 Built-in Iterators","text":"<p>Several built-in functions take as arguments iterable values and return iterators. These functions are used extensively for lazy sequence processing. The <code>map</code> function is lazy: calling it does not perform the computation required to compute elements of its result. Instead, an iterator object is created that can return results if queried using <code>next</code>.  <pre><code>&gt;&gt;&gt; def double_and_print(x):\n        print('***', x, '=&gt;', 2*x, '***')\n        return 2*x\n&gt;&gt;&gt; s = range(3, 7)\n&gt;&gt;&gt; doubled = map(double_and_print, s)  # double_and_print not yet called\n&gt;&gt;&gt; next(doubled)                       # double_and_print called once\n*** 3 =&gt; 6 ***\n6\n&gt;&gt;&gt; next(doubled)                       # double_and_print called again\n*** 4 =&gt; 8 ***\n8\n&gt;&gt;&gt; list(doubled)                       # double_and_print called twice more\n*** 5 =&gt; 10 ***\n*** 6 =&gt; 12 ***\n[10, 12]\n</code></pre> The <code>filter</code> function returns an iterator over, <code>zip</code>, and <code>reversed</code> functions also return iterators. they are all special iterators.</p>"},{"location":"CS61A-2020-summer/chapter4/#424-for-statements","title":"4.2.4 For Statements","text":"<p>The <code>for</code> statement in Python operates on iterators. Objects are iterable (an interface) if they have an <code>__iter__</code> method that returns an iterator. Iterable objects can be the value of the <code>&lt;expression&gt;</code> in the header of a <code>for</code> statement: <pre><code>for &lt;name&gt; in &lt;expression&gt;:\n    &lt;suite&gt;\n</code></pre> To execute a <code>for</code> statement, Python evaluates the header <code>&lt;expression&gt;</code>, which must yield an iterable value. Then, the <code>__iter__</code> method is invoked on that value. Until a StopIteration exception is raised, Python repeatedly invokes the <code>__next__</code> method on that iterator and binds the result to the <code>&lt;name&gt;</code> in the <code>for</code> statement. Then, it executes the <code>&lt;suite&gt;</code>. <pre><code>&gt;&gt;&gt; counts = [1, 2, 3]\n&gt;&gt;&gt; for item in counts:\n        print(item)\n1\n2\n3\n</code></pre> In the above example, the <code>counts</code> list returns an iterator from its <code>__iter__()</code> method. The for statement then calls that iterator's <code>__next__()</code> method repeatedly, and assigns the returned value to <code>item</code> each time. This process continues until the iterator raises a <code>StopIteration</code> exception, at which point execution of the for statement concludes. <pre><code>&gt;&gt;&gt; items = counts.__iter__()\n&gt;&gt;&gt; try:\n        while True:\n            item = items.__next__()\n            print(item)\n    except StopIteration:\n        pass\n1\n2\n3\n</code></pre> Above, the iterator returned by invoking the <code>__iter__</code> method of <code>counts</code> is bound to a name <code>items</code> so that it can be queried for each element in turn. The handling clause for the <code>StopIteration</code> exception does nothing, but handling the exception provides a control mechanism for exiting the <code>while</code> loop.</p> <p>To use an iterator in a for loop, the iterator must also have an <code>__iter__</code> method. suggest that an iterator have an <code>__iter__</code> method that returns the iterator itself, so that all iterators are iterable. </p>"},{"location":"CS61A-2020-summer/chapter4/#425-generators-and-yield-statements","title":"4.2.5 Generators and Yield Statements","text":"<p>Generators allow us to define more complicated iterations by leveraging the features of the Python interpreter. A generator is an iterator returned by a special class of function called a generator function. Generator functions are distinguished from regular functions in that rather than containing <code>return</code> statements in their body, they use <code>yield</code> statement to return elements of a series. Generators do not use attributes of an object to track their progress through a series. Instead, they control the execution of the generator function, which runs until the next <code>yield</code> statement is executed each time the generator's <code>__next__</code> method is invoked.  <pre><code>&gt;&gt;&gt; def letters_generator():\n        current = 'a'\n        while current &lt;= 'd':\n            yield current\n            current = chr(ord(current)+1)\n&gt;&gt;&gt; for letter in letters_generator():\n        print(letter)\na\nb\nc\nd\n</code></pre> Even though we never explicitly defined <code>__iter__</code> or <code>__next__</code> methods, the yield statement indicates that we are defining a generator function. When called, a generator function doesn't return a particular yielded value, but instead a generator (which is a type of iterator) that itself can return the yielded values. A generator object has <code>__iter__</code> and <code>__next__</code> methods, and each call to <code>__next__</code> continues execution of the generator function from wherever it left off previously until another <code>yield</code> statement is executed. The first time <code>__next__</code> is called, the program executes statements from the body of the <code>letters_generator</code> function until it encounters the <code>yield</code> statement. Then, it pauses and returns the value of current. <code>yield</code> statements do not destroy the newly created environment, they preserve it for later. When <code>__next__</code> is called again, execution resumes where it left off. The values of current and of any other bound names in the scope of letters_generator are preserved across subsequent calls to next. We can walk through the generator by manually calling <code>____next__()</code>: <pre><code>&gt;&gt;&gt; letters = letters_generator()\n&gt;&gt;&gt; type(letters)\n&lt;class 'generator'&gt;\n&gt;&gt;&gt; letters.__next__()\n'a'\n&gt;&gt;&gt; letters.__next__()\n'b'\n&gt;&gt;&gt; letters.__next__()\n'c'\n&gt;&gt;&gt; letters.__next__()\n'd'\n&gt;&gt;&gt; letters.__next__()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nStopIteration\n</code></pre> The generator does not start executing any of the body statements of its generator function until the first time <code>__next__</code> is invoked. The generator raises a StopIteration exception whenever its generator function returns.  </p>"},{"location":"CS61A-2020-summer/chapter4/#426-iterable-interface","title":"4.2.6 Iterable Interface","text":"<p>An object is iterable if it returns an iterator when its <code>__iter__</code> method is invoked. Iterable values represent data collections Many built-in functions in Python take iterable arguments and return iterators. The <code>map</code> function, for example, takes a function and an iterable. It returns an iterator over the result of applying the function argument to each element in the iterable argument.  </p>"},{"location":"CS61A-2020-summer/chapter4/#427-creating-iterables-with-yield","title":"4.2.7  Creating Iterables with Yield","text":"<p><pre><code>&gt;&gt;&gt; def all_pairs(s):\n        for item1 in s:\n            for item2 in s:\n                yield (item1, item2)\n&gt;&gt;&gt; list(all_pairs([1, 2, 3]))\n[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]\n</code></pre> Sequences are not themselves iterators, but instead iterable objects. The iterable interface in Python consists of a single message, <code>__iter__</code>, that returns an iterator. The built-in sequence types in Python return new instances of iterators when their <code>__iter__</code> methods are invoked. If an iterable object returns a fresh instance of an iterator each time <code>__iter__</code> is called, then it can be iterated over multiple times. New iterable classes can be defined by implementing the iterable interface. For example, the iterable LettersWithYield class below returns a new iterator over letters each time iter is invoked. <pre><code>&gt;&gt;&gt; class LettersWithYield:\n        def __init__(self, start='a', end='e'):\n            self.start = start\n            self.end = end\n        def __iter__(self):\n            next_letter = self.start\n            while next_letter &lt; self.end:\n                yield next_letter\n                next_letter = chr(ord(next_letter)+1)\n</code></pre> The <code>__iter__</code> method is a generator function; it returns a generator object that yields the letters <code>'a'</code> through <code>'d'</code> and then stops. Each time we invoke this method, a new generator starts a fresh pass through the sequential data. <pre><code>&gt;&gt;&gt; letters = LettersWithYield()\n&gt;&gt;&gt; list(all_pairs(letters))[:5]\n[('a', 'a'), ('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'a')]\n</code></pre></p>"},{"location":"CS61A-2020-summer/chapter4/#428-iterator-interface","title":"4.2.8 Iterator Interface","text":"<p>The LetterIter class below iterates over an underlying series of letters from some start letter up to but not including some end letter. The instance attribute <code>next_letter</code> stores the next letter to be returned. The <code>__next__</code> method returns this letter and uses it to compute a new next_letter. <pre><code>&gt;&gt;&gt; class LetterIter:\n        \"\"\"An iterator over letters of the alphabet in ASCII order.\"\"\"\n        def __init__(self, start='a', end='e'):\n            self.next_letter = start\n            self.end = end\n        def __next__(self):\n            if self.next_letter == self.end:\n                raise StopIteration\n            letter = self.next_letter\n            self.next_letter = chr(ord(letter)+1)\n            return letter\n</code></pre> Using this class, we can access letters in sequence using either the <code>__next__</code> method or the built-in <code>next</code> function, which invokes <code>__next__</code> on its argument. <pre><code>&gt;&gt;&gt; letter_iter = LetterIter()\n&gt;&gt;&gt; letter_iter.__next__()\n'a'\n&gt;&gt;&gt; letter_iter.__next__()\n'b'\n&gt;&gt;&gt; next(letter_iter)\n'c'\n&gt;&gt;&gt; letter_iter.__next__()\n'd'\n&gt;&gt;&gt; letter_iter.__next__()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 12, in next\nStopIteration\n</code></pre> Iterators are mutable: they track the position in some underlying sequence of values as they progress. Iterators also allow us to represent infinite series by implementing a <code>__next__</code> method that never raises a <code>StopIteration</code> exception. For example, the Positives class below iterates over the infinite series of positive integers. The built-in next function in Python invokes the <code>__next__</code> method on its argument. <pre><code>&gt;&gt;&gt; class Positives:\n        def __init__(self):\n            self.next_positive = 1;\n        def __next__(self):\n            result = self.next_positive\n            self.next_positive += 1\n            return result\n&gt;&gt;&gt; p = Positives()\n&gt;&gt;&gt; next(p)\n1\n&gt;&gt;&gt; next(p)\n2\n&gt;&gt;&gt; next(p)\n3\n</code></pre></p>"},{"location":"CS61B-2018-spring/Introduction_to_java/","title":"Introduction to Java","text":""},{"location":"CS61B-2018-spring/Introduction_to_java/#essentials","title":"Essentials","text":""},{"location":"CS61B-2018-spring/Introduction_to_java/#key-syntax-features-our-first-programs-reveal-several-important-syntax-features-of-java","title":"Key Syntax Features. Our first programs reveal several important syntax features of Java:","text":"<ul> <li>All code lives inside a class.  </li> <li>The code that is executed is inside a function, a.k.a. method, called main.</li> <li>Curly braces are used to denote the beginning and end of a section of code, e.g. a class or method declaration.</li> <li>Statements end with semi-colons.  </li> <li>Variables have declared types, also called their \u201cstatic type\u201d.</li> <li>Variables must be declared before use.</li> <li>Functions must have a return type. If a function does not return anything, we use void,</li> <li>The compiler ensures type consistency. If types are inconsistent, the program will not compile.</li> </ul>"},{"location":"CS61B-2018-spring/Introduction_to_java/#static-typing","title":"Static Typing","text":"<p>One of the most important features of Java is that all variables and expressions have a so-called static type. Java variables can contain values of that type, and only that type. Furthermore, the type of a variable can never change. In addition to providing additional error checking, static types also let the programmer know exactly what sort of object he or she is working with. To summarize, static typing has the following advantages:  </p> <ul> <li>The compiler ensures that all types are compatible, making it easier for the programmer to debug their code.</li> <li>Since the code is guaranteed to be free of type errors, users of your compiled programs will never run into type errors. For example, Android apps are written in Java, and are typically distributed only as .class files, i.e. in a compiled format. As a result, such applications should never crash due to a type error since they have already been checked by the compiler.  </li> <li>Every variable, parameter, and function has a declared type, making it easier for a programmer to understand and reason about code.</li> </ul>"},{"location":"CS61B-2018-spring/Introduction_to_java/#objects","title":"objects","text":"<ul> <li>Class Declaration. Java classes can contain methods and/or variables. We say that such methods and variables are \u201cmembers\u201d of the calss. Members can be instance members or static members. Static members are declared with the static keyword. Instance members are any members without the static keyword.  </li> <li>Class Instantiation. Instantiating a class is almost always done using the new keyword, e.g. Dog d = new Dog(). An instance of a class in Java is also called an Object. </li> <li>Dot Notation. We access members of a class using dot notation, e.g. d.bark(). Class members can be accessed from within the same class or from other classes.  </li> <li>Constructors. Constructors tell Java what to do when a program tries to create an instance of a class, e.g. what it should do when it executes Dog d = new Dog().  </li> <li>Array Instantiation. Arrays are also instantiated using the new keyword. If we have an array of Objects, e.g. Dog[] dogarray, then each element of the array must also be instantiated separately.  </li> <li>Static vs. Instance methods. The distinction between static and instance methods is incredibly important. Instance methods are actions that can only be taken by an instance of the class (i.e. a specific object), whereas static methods are taken by the class itself. An instance method is invoked using a reference to a specific instance, e.g. d.bark(), whereas static methods should be invoked using the class name, e.g. Math.sqrt(). Know when to use each.  </li> <li>Static variables. Variables can also be static. Static variables should be accessed using the class name, e.g. Dog.binomen as opposed to d.binomen. Technically Java allows you to access using a specific instance, but we strongly encourage you not to do this to avoid confusion.  </li> <li>The this keyword. Inside a method, we can use the this keyword to refer to the current instance. </li> <li>Command Line Arguments. Arguments can be provided by the operating system to your program as \u201ccommand line arguments,\u201d and can be accessed using the args parameter in main. For example if we call our program from the command line like this java ArgsDemo these are command line arguments, then the main method of ArgsDemo will have an array containing the Strings \u201cthese\u201d, \u201care\u201d, \u201ccommand\u201d, \u201cline\u201d, and \u201carguments\u201d.</li> </ul>"},{"location":"CS61B-2018-spring/Introduction_to_java/#java-style-guide","title":"Java style guide","text":""},{"location":"CS61B-2018-spring/Introduction_to_java/#assorted-java-style-conventions","title":"Assorted Java Style Conventions","text":"<ol> <li>Replace     <pre><code> if (condition) {\n return true;\n } else {\n return false;\n }\n</code></pre></li> <li>Write array types with the \u201c[]\u201d after the element-type name, not after the declarator. Write \u201c<code>String[] names</code>\u201d, not \u201c<code>String names[]</code>\u201d.</li> </ol>"},{"location":"CS61B-2018-spring/Lists/","title":"lists","text":""},{"location":"CS61B-2018-spring/Lists/#the-mystery-of-walrus","title":"The Mystery of Walrus","text":"<ul> <li>Primitives Primitives are representations of information. There are 8 primitive types in Java: byte, short, int, long, float, double, boolean, and char. Each primitive is represented by a certain number of bits. For example, ints are 32 bit primitives, while bytes are 8 bit primitives.  </li> <li>Declaring Primitives When we declare a variable to be a primitive (i.e. int x;), we set aside enough memory space to hold the bits (in this case, 32). We can think of this as a box holding the bits. Java then maps the variable name to this box. Say we have a line of code <code>int y = x</code>; where <code>x</code> was defined before. Java will copy the bits inside the <code>x</code> box into the bits in the <code>y</code> box.  </li> <li>Creating Objects When we create an instance of a class using the new keyword, Java creates boxes of bits for each field, where the size of each box is defined by the type of each field. For example, if a Walrus object has an int variable and a double variable, then Java will allocate two boxes totaling 96 bits (32 + 64) to hold both variables. These will be set to a default value like 0. The constructor then comes in and fills in these bits to their appropriate values. The return value of the constructor will return the location in memory where the boxes live, usually an address of 64 bits. This address can then be stored in a variable with a \u201creference type.\u201d </li> <li>Reference Types If a variable is not a primitive type, then it is a reference type. When we declare object variables, we use reference type variables to store the location in memory of where an object is located. Remember this is what the constructor returns. A reference type is always a box of size 64 bits. Note that the variable does not store the entire object itself! </li> <li>Golden Rule of Equals For primitives, the line int y = x copies the bits inside the x box into the y box. For reference types, we do the exact same thing. In the line Walrus newWalrus = oldWalrus;, we copy the 64 bit address in the oldWalrus box into the newWalrus box. So we can think of this golden rule of equals (GroE) as: when we assign a value with equals, we are just copying the bits from one memory box to another! </li> <li>Parameter Passing Say we have a method average(double a, double b). This method takes two doubles as parameters. Parameter passing also follows the GRoE, i.e. when we call this method and pass in two doubles, we copy the bits from those variables into the parameter variables. </li> <li>Array Instantiation. Arrays are also Objects, and are also instantiated using the <code>new</code> keyword. This means declaring an array variable (i.e. <code>int[] x</code>;) will create a 64-bit reference type variable that will hold the location of this array. Of course, right now, this box contains the value null, as we have not created the array yet. The <code>new</code> keyword for arrays will create the array and return the location of this array in memory. So by saying <code>int[] x = new int[]{0, 1, 2, 3, 4}</code>;, we set the location of this newly created array to the variable x. Note that the size of the array was specified when the array was created, and cannot be changed!  </li> </ul>"},{"location":"Computer_English/Unit1/","title":"Unit1 Computer and Computer Science","text":"<p>There are some words selected from Computer English Fifth Edition China Machine Press when I am reading this book.</p>"},{"location":"Computer_English/Unit1/#section-a-computer-overview","title":"Section A Computer overview","text":"-- -- overview \u6982\u8ff0 numeric(al) \u6570\u5b57\u7684\uff1b\u6570\u503c\u7684 precursor \u5148\u9a71 analogue adj  \u6a21\u62df\u7684 incorporate \u5305\u542b \uff1b\u628a\u2026\u5408\u5e76 vacuum tube \u771f\u7a7a\u7ba1 encipher \u628a\u2026\u8bd1\u6210\u5bc6\u7801 overturn \u63a8\u7ffb\uff1b\u5e9f\u9664 advent \u51fa\u73b0\uff1b\u5230\u6765 versatile \u591a\u7528\u9014\u7684\uff1b\u901a\u7528\u7684 fabricate \u5236\u4f5c nevertheless \u4e0d\u8fc7\uff1b\u7136\u800c workstation \u5de5\u4f5c\u7ad9 specialized/dedicated \u4e13\u7528\u7684 mainframe \u4e3b\u673a\uff1b\u5927\u578b\u673a"},{"location":"Computer_English/Unit1/#section-b-what-is-computer-science","title":"Section B What Is Computer Science","text":"frontier \u524d\u6cbf\uff1b\u65b0\u9886\u57df integral \u4e0d\u53ef\u7f3a\u5c11\u7684\uff1b\u5fc5\u8981\u7684 speculative \u63a8\u6d4b\u7684 underlie \u6784\u6210\u2026\u7684\u57fa\u7840 optimal \u6700\u4f18\u7684 retrieve \u68c0\u7d22 robust \u5065\u58ee\u7684\uff1b\u575a\u56fa\u7684 sensory \u611f\u89c9\u7684\uff1b\u611f\u5b98\u7684 unify \u4f7f\u8054\u5408\uff1b\u4f7f\u7edf\u4e00 unifying \u7edf\u4e00\u7684 virtually \u4e8b\u5b9e\u4e0a robust \u5065\u58ee\u7684"},{"location":"Computer_English/Unit1/#section-c-digital-devices","title":"Section C Digital Devices","text":"simultaneous \u540c\u65f6\u7684 simulate \u6a21\u4eff\uff1b\u4eff\u771f tablet \u5e73\u677f\u7535\u8111 a suite of \u4e00\u7ec4\uff1b\u4e00\u5957 console \u63a7\u5236\u53f0"},{"location":"Computer_English/Unit10/","title":"Unit 10 Computer Security","text":""},{"location":"Computer_English/Unit10/#section-a-computer-security","title":"Section A Computer Security","text":"confidentiality \u673a\u5bc6\u6027 confidential \u79d8\u5bc6\u7684\uff0c\u673a\u5bc6\u7684 disclose \u6cc4\u9732\uff0c\u900f\u6f0f unimpaired \u672a\u53d7\u635f\u7684\uff0c\u672a\u524a\u5f31\u7684 authenticity \u53ef\u9760\u6027\uff0c\u771f\u5b9e\u6027 originator \u521b\u59cb\u4eba\uff0c\u8d77\u6e90 nonrepudiation \u4e0d\u62d2\u7edd\uff0c\u4e0d\u5426\u8ba4 breach \u7834\u574f\uff0c\u8fdd\u53cd susceptible \u6613\u53d7\u5f71\u54cd\u7684 proliferation \u6fc0\u589e\uff0c\u6269\u6563 piracy \u4fb5\u72af\u7248\u6743\uff0c\u76d7\u7248 countermeasure \u5bf9\u7b56\uff0c\u5bf9\u6297\u624b\u6bb5 secrecy \u79d8\u5bc6\uff0c\u4fdd\u5bc6 aggregate \u805a\u96c6\u7684\uff0c\u5408\u8ba1\u7684 disclosure \u6cc4\u9732\uff0c\u900f\u6f0f respondent \u8c03\u67e5\u5bf9\u8c61 impersonate \u626e\u6f14\uff0c\u6a21\u4eff legitimate \u5408\u6cd5\u7684 inhibit \u6291\u5236\uff0c\u7ea6\u675f vulnerability \u6613\u53d7\u653b\u51fb\u7684\u5730\u65b9\uff0c\u8106\u5f31 monetary \u8d27\u5e01\u7684\uff0c\u91d1\u878d\u7684 thrust \u8981\u70b9\uff0c\u8981\u65e8\uff0c\u76ee\u6807"},{"location":"Computer_English/Unit10/#section-b-antivirus-software","title":"Section B Antivirus Software","text":"trojan \u7279\u6d1b\u4f0a\u6728\u9a6c\uff08\u75c5\u6bd2\uff09 malware \u6076\u610f\u8f6f\u4ef6 infallible \u4e0d\u53ef\u80fd\u51fa\u9519\u7684\uff0c\u7edd\u5bf9\u53ef\u9760\u7684 cloak \u63a9\u76d6\uff0c\u63a9\u9970 viral \u75c5\u6bd2\u7684\uff0c\u75c5\u6bd2\u5f15\u8d77\u7684 heuristic \u542f\u53d1\u7684\uff0c\u63a2\u7d22\u7684 quarantine \u9694\u79bb surveillance \u76d1\u89c6 heuristic \u542f\u53d1\u6cd5\uff0c\u63a2\u7d22\u6cd5 perplexing \u4f7f\u4eba\u56f0\u60d1\u7684\uff0c\u4ee4\u4eba\u8d39\u89e3\u7684 infiltrate \u6e17\u5165 supposedly \u636e\u63a8\u6d4b\uff0c\u636e\u79f0 eradicate \u6839\u9664\uff0c\u6d88\u706d"},{"location":"Computer_English/Unit10/#section-c-types-of-malicious-software","title":"Section C Types of Malicious Software","text":"parasitic \u5bc4\u751f\u7684 groundbreaking \u5f00\u62d3\u6027\u7684 vector \u77e2\u91cf payload \u6709\u6548\u8377\u8f7d dormant \u4f11\u7720\u7684\uff0c\u6682\u505c\u6d3b\u52a8\u7684 propagate \u4f20\u64ad\uff0c\u7e41\u6b96 trapdoor \u9677\u9631\u95e8\uff0c\u5929\u7a97 unscrupulous \u8086\u65e0\u5fcc\u60ee\u7684\uff0c\u65e0\u803b\u7684 invoke \u8c03\u7528 semantics \u8bed\u4e49\uff08\u5b66\uff09 stealthy \u5077\u5077\u6478\u6478\u7684\uff0c\u6697\u4e2d\u8fdb\u884c\u7684\uff0c\u79d8\u5bc6\u7684 eradication \u6839\u9664\uff0c\u6d88\u706d severity \u5267\u70c8\uff0c\u4e25\u91cd"},{"location":"Computer_English/Unit11/","title":"Unit 11 Cyberculture","text":""},{"location":"Computer_English/Unit11/#section-a-using-e-mail","title":"Section A Using E-Mail","text":"frivolous \u8f7b\u8584\u7684\uff1b\u7410\u5c51\u7684 spam \u5783\u573e\u90ae\u4ef6 blooper \u8fc7\u5931\uff0c\u5931\u793c memo \u5907\u5fd8\u5f55 antitrust \u53cd\u6258\u62c9\u65af\u7684\uff0c\u53cd\u5784\u65ad\u7684 harassment \u9a9a\u6270\uff0c\u70e6\u6270 discrimination \u533a\u522b\uff0c\u6b67\u89c6 indiscreet \u4e0d\u614e\u91cd\u7684\uff0c\u8f7b\u7387\u7684 spreadsheet \u7535\u5b50\u8868\u683c grim \u4e25\u5389\u7684 smirk \u5047\u7b11 sparing \u8282\u7ea6\u7684 etiquette \u793c\u8282\uff1b\u89c4\u77e9 critter \u751f\u7269\uff0c\u52a8\u7269 sacrasm \u8bbd\u523a\uff0c\u6316\u82e6 witty \u8bd9\u8c10\u7684\uff0c\u8bf4\u8bdd\u98ce\u8da3\u7684 quip \u5999\u8bed\uff0c\u4fcf\u76ae\u8bdd paraphase \u5c06...\u91ca\u4e49 abusive \u8c29\u9a82\u7684\uff0c\u8bfd\u8c24\u7684 harass \u9a9a\u6270\uff0c\u70e6\u6270 courier \u4fe1\u4f7f sloppy \u9a6c\u864e\u7684\uff0c\u51cc\u4e71\u7684"},{"location":"Computer_English/Unit11/#section-b-ethical-guidelines-for-computer-professionals","title":"Section B Ethical Guidelines for Computer Professionals","text":"ethical \u9053\u5fb7\u7684\uff0c\u4f26\u7406\u7684 expertise \u4e13\u95e8\u77e5\u8bc6\uff0c\u4e13\u957f profound \u6df1\u523b\u7684\uff0c\u6df1\u9083\u7684 aspirational \u6709\u5fd7\u5411\u7684\uff0c\u6709\u62b1\u8d1f\u7684 cobble \u4fee\u8865\u7684\uff0c\u5306\u5fd9\u7684"},{"location":"Computer_English/Unit11/#section-c-social-issues-of-computer-networks","title":"Section C Social Issues of Computer Networks","text":"censor \u5ba1\u67e5\uff0c\u68c0\u67e5 sue \u63a7\u544a\uff0c\u8d77\u8bc9 pirate \u527d\u7a83\uff0c\u76d7\u7528 infringement \u4fb5\u72af\uff0c\u4fb5\u5bb3 culprit \u7f6a\u72af\uff0c\u88ab\u63a7\u72af\u7f6a\u7684\u4eba amendment \u4fee\u6b63\u6848\uff0c\u4fee\u6b63\u6761\u6b3e warrant \u6388\u6743 downright \u5f7b\u5e95\u7684\uff0c\u5b8c\u5168\u7684 distorted \u626d\u66f2\u7684\uff0c\u53d8\u5f62\u7684 slot \u72ed\u957f\u5b54\uff0c\u72ed\u7f1d dealer \u53d1\u724c\u4eba\uff0c\u5546\u4eba"},{"location":"Computer_English/Unit12/","title":"Unit 12 Smart World","text":""},{"location":"Computer_English/Unit12/#section-a-artificial-intelligence","title":"Section A Artificial Intelligence","text":"neurology \u795e\u7ecf\u5b66 stimulus \u523a\u6fc0\u7269 actuator \u6267\u884c\u5668 synthesizer \u5408\u6210\u5668 empower \u6388\u6743\u7ed9\uff1b\u4f7f\u80fd\u591f maneuver \u8c03\u52a8\uff0c\u673a\u52a8 passageway \u8d70\u5eca\uff0c\u901a\u9053 trial-and-error \u8bd5\u9519\u6cd5\u7684 gyroscope \u9640\u87ba\u4eea plagiarism \u527d\u7a83\uff0c\u6284\u88ad theoretician \u7406\u8bba\u5bb6 benchmark \u57fa\u51c6 interrogator \u8bad\u95ee\u8005\uff0c\u5ba1\u95ee\u8005 psychotherapy \u5fc3\u7406\u7597\u6cd5 dismay \u5931\u671b\uff0c\u6c14\u9981 thesis \u547d\u9898\uff0c\u8bba\u70b9 therapist \u6cbb\u7597\u4e13\u5bb6 subservient \u5c48\u4ece\u7684\uff0c\u606d\u987a\u7684 sentation \u611f\u89c9\uff0c\u8f70\u52a8 tilt \u503e\u659c\uff0c\u503e\u4fa7 adorable \u503c\u5f97\u5d07\u62dc\u7684"},{"location":"Computer_English/Unit12/#section-b-augmented-reality-and-its-applications","title":"Section B Augmented Reality and Its Applications","text":"detach \u62c6\u5378\uff0c\u4f7f\u5206\u5f00 overlay \u5728...\u4e0a\u8986\u76d6 cognitive \u8ba4\u8bc6\u7684\uff0c\u8ba4\u77e5\u7684 avatar \u5316\u8eab haptic \u89e6\u89c9\u7684 mandate \u6388\u6743\uff0c\u547d\u4ee4\uff0c\u6307\u4ee4 showcase \u9648\u5217\uff0c\u5c55\u793a conferencing \u53ec\u5f00\u4f1a\u8bae collaborative \u5408\u4f5c\u7684\uff0c\u534f\u4f5c\u7684 showcase \u9648\u5217\uff0c\u5c55\u793a geo-coordinate \u5730\u7406\u5750\u6807 compelling \u4ee4\u4eba\u4fe1\u670d\u7684 footage \u8fde\u7eed\u955c\u5934\uff0c\u7247\u6bb5 screencast \u5c4f\u5e55\u5f55\u50cf\uff0c\u5f55\u5c4f albeit \u5c3d\u7ba1 informative \u63d0\u4f9b\u6709\u7528\u4fe1\u606f\u7684\uff0c\u589e\u957f\u77e5\u8bc6\u7684 rendering \u827a\u672f\u5904\u7406\uff0c\u6e32\u67d3 branding \u54c1\u724c\u63a8\u5e7f\uff0c\u54c1\u724c\u5ba3\u4f20 moderator \u4e3b\u6301\u4eba flyer \u4f20\u5355 prophet \u9884\u8a00\u8005\uff0c\u9884\u8a00\u5bb6"},{"location":"Computer_English/Unit12/#section-c-the-internet-of-things","title":"Section C The Internet of Things","text":"ubiquitous \u666e\u904d\u5b58\u5728\u7684\uff0c\u65e0\u6240\u4e0d\u5728\u7684 pervasive \u904d\u5e03\u7684\uff0c\u666e\u904d\u7684 modulate \u8c03\u5236 antenna \u5929\u7ebf autonomy \u81ea\u6cbb\u6743\uff0c\u81ea\u4e3b\u6027 tangible \u53ef\u89e6\u6478\u7684\uff0c\u6709\u5f62\u7684\uff0c\u660e\u786e\u7684 fusion \u878d\u5408 spectrum \u9891\u8c31\uff1b\u7cfb\u5217\uff1b\u8303\u56f4 teleoperation \u8fdc\u7a0b\u64cd\u4f5c diffusion \u6269\u6563 inventory \u5e93\u5b58\uff0c\u8be6\u7ec6\u76ee\u5f55\uff0c\u6e05\u5355 deterministic \u51b3\u5b9a\u8bba\u7684\uff0c\u786e\u5b9a\u6027\u7684 checkout \u7ed3\u8d26\uff08\u79bb\u53bb\uff09\uff0c\u4ed8\u6b3e\u53f0 perishable \u6613\u8150\u7684\uff0c\u6613\u70c2\u7684 entail \u4f7f\u6210\u4e3a\u5fc5\u8981\uff0c\u9700\u8981 mall \u8d2d\u7269\u533a\uff0c\u8d2d\u7269\u8857 residential \u5c45\u4f4f\u7684\uff0c\u4f4f\u5b85\u7684"},{"location":"Computer_English/Unit2/","title":"Unit 2 Computer Architecture","text":""},{"location":"Computer_English/Unit2/#section-a-computer-hardware","title":"section A Computer Hardware","text":"transfer \u8f6c\u79fb scanner \u626b\u63cf\u4eea boot loader \u5f15\u5bfc\u52a0\u8f7d\u7a0b\u5e8f"},{"location":"Computer_English/Unit2/#section-b-components-of-an-operating-system","title":"Section B Components of an Operating System","text":"textual \u6587\u672c\u7684 hierarchical \u5206\u7ea7\u7684\uff1b\u5206\u5c42\u7684\uff1b\u5c42\u6b21\u7684 slash \u659c\u7ebf\uff1b\u659c\u6760 reside \u9a7b\u7559 concurrent \u540c\u65f6\u53d1\u751f\u7684\uff1b\u5e76\u53d1\u7684 shuffle \u6df7\u6d17\uff1b\u6d17\u724c fictional \u865a\u62df\u7684 oversee \u76d1\u89c6 initiate \u5f00\u59cb\uff1b\u53d1\u8d77 interrupt \u4e2d\u65ad handler \u5904\u7406\u5668 preempt \u62a2\u5148\uff0c\u5148\u5360"},{"location":"Computer_English/Unit2/#section-c-system-organization","title":"Section C System organization","text":"repository \u4ed3\u5e93 tier \u5c42 redundancy \u5197\u4f59 inconsistency \u4e0d\u4e00\u81f4 synchrony \u540c\u65f6\u6027 rollback \u56de\u6eda\uff0c\u56de\u9000 subvert \u98a0\u8986\uff0c\u6697\u4e2d\u7834\u574f"},{"location":"Computer_English/Unit3/","title":"Unit3   Computer language and Programming","text":""},{"location":"Computer_English/Unit3/#section-a-programming-language","title":"Section A  Programming Language","text":"versatility \u591a\u7528\u9014\uff0c\u901a\u7528\u6027 linguistic \u8bed\u8a00\u5b66\u7684 rigorous \u4e25\u683c\u7684 deduce \u63a8\u65ad\uff0c\u63a8\u8bba paradigm \u8303\u5f0f"},{"location":"Computer_English/Unit3/#section-b-the-java-language","title":"Section B  The Java Language","text":"superfluous \u591a\u4f59\u7684\uff0c\u8fc7\u5269\u7684 instantaneous \u77ac\u95f4\u7684\uff0c\u5373\u523b\u7684 overhead \u989d\u5916\u5f00\u9500 clutter \u51cc\u4e71\uff0c\u6742\u4e71\u7684\u4e1c\u897f cryptic \u795e\u79d8\u7684\uff0c\u9690\u85cf\u7684 arcane \u795e\u79d8\u7684\uff0c\u4ee4\u4eba\u56f0\u60d1\u7684 delve \u641c\u7d22\uff0c\u7ffb\u67e5 polymorphism \u591a\u6001 encapsulation \u5c01\u88c5 syntactic \u6309\u7167\u53e5\u6cd5\u7684 semanticallly \u5728\u8bed\u4e49\u4e0a spoof \u54c4\u9a97\uff0c\u6b3a\u9a97 offense \u8fdb\u653b applet \u5c0f\u5e94\u7528\u7a0b\u5e8f segregate \u9694\u79bb\uff0c\u5206\u5f00 dialog box \u5bf9\u8bdd\u6846 convoluted \u76d8\u7ed5\u7684\uff0c\u9519\u7efc\u590d\u6742\u7684 gaggle (\u7d0a\u4e71\u800c\u6709\u8054\u7cfb\u7684)\u4e00\u5806 interwine \u4f7f\u7f20\u7ed5 synchronization \u540c\u6b65\u5316"},{"location":"Computer_English/Unit3/#section-c-arrays","title":"Section C  Arrays","text":"designate \u6307\u5b9a\uff0c\u6307\u6d3e\uff0c\u547d\u540d subscript \u4e0b\u6807\uff0c\u811a\u6ce8 ordinal \u987a\u5e8f\u7684 notation \u6807\u8bb0\u6cd5 asterisks \u661f\u53f7"},{"location":"Computer_English/Unit4/","title":"Unit 4 Software development","text":""},{"location":"Computer_English/Unit4/#section-a-computer-program","title":"Section A Computer Program","text":"prompt \u63d0\u793a counterpart \u5bf9\u5e94\u7684\u7269(\u6216\u4eba) deviation \u504f\u5dee"},{"location":"Computer_English/Unit4/#section-b-model-driven-development","title":"Section B Model Driven Development","text":"methodology \u65b9\u6cd5\u8bba consolidate \u628a...\u8054\u4e3a\u4e00\u4f53\uff0c\u5408\u5e76 omission \u7701\u7565\uff0c\u9057\u6f0f\uff1b\u758f\u5ffd premium \u5956\u54c1\uff0c\u989d\u5916\u8d39\u7528 infeasiable \u4e0d\u53ef\u5b9e\u884c\u7684 gauge \u4f30\u8ba1\uff0c\u5224\u65ad rigidity \u4e25\u683c\uff0c\u523b\u677f contemporary \u5f53\u4ee3\u7684\uff0c\u73b0\u4ee3\u7684"},{"location":"Computer_English/Unit4/#section-c-software-process-models","title":"Section C Software Process Models","text":"celebrated \u8457\u540d\u7684 off-the-shelf \u73b0\u6210\u7684\uff0c\u975e\u4e13\u95e8\u8bbe\u8ba1\u7684 definitive \u51b3\u5b9a\u6027\u7684\uff0c\u786e\u5b9a\u7684 cascade \u5c0f\u7011\u5e03\uff0c\u7ea7\u8054 premature \u4e0d\u6210\u719f\u7684\uff0c\u4ed3\u4fc3\u7684 circumvent \u7ed5\u8fc7\uff0c\u89c4\u907f interleave \u4ea4\u9519\uff0c\u4ea4\u53c9\uff0c\u4ea4\u66ff exploratory \u63a2\u7d22\u7684\uff0c\u52d8\u63a2\u7684 throwaway \u4f7f\u7528\u540e\u629b\u5f03\u7684\uff0c\u4e00\u6b21\u6027\u7684 ptototype \u539f\u578b cost-effective \u6709\u6210\u672c\u6548\u76ca\u7684\uff0c\u5408\u7b97\u7684 irrespective \u4e0d\u8003\u8651\u7684\uff0c\u4e0d\u987e\u7684 cater \u6ee1\u8db3\u9700\u8981\uff1b\u8fce\u5408\uff1b\u8003\u8651 procure \u53d6\u5f97\uff0c\u83b7\u5f97\uff1b\u91c7\u529e"},{"location":"Computer_English/Unit5/","title":"Unit 5 Software engineering","text":""},{"location":"Computer_English/Unit5/#section-a-service-oriented-software-engineering","title":"Section A: Service-oriented software engineering","text":"composite \u5408\u6210\u7684\uff0c\u590d\u5408\u7684 conform \u9075\u7167\uff0c\u4e00\u81f4\uff0c\u7b26\u5408 opportunistic \u673a\u4f1a\u4e3b\u4e49\u7684 innovative \u9769\u65b0\u7684\uff0c\u65b0\u9896\u7684 offload \u5378\u4e0b\uff0c\u5378\u8f7d registry \u6ce8\u518c\u8868\uff0c\u767b\u8bb0\u7c3f proprietary \u4e13\u6709\u7684\uff0c\u4e13\u7528\u7684 identifier \u6807\u8bc6\u7b26 throughput \u541e\u5410\u91cf\uff0c\u541e\u5410\u7387 polymorphic \u591a\u6001\u7684"},{"location":"Computer_English/Unit5/#section-b-software-testing-techniques","title":"Section B: Software testing techniques","text":"intermix \u4f7f\u6df7\u5408 exhaustive \u5168\u9762\u800c\u5f7b\u5e95\u7684\uff0c\u8be6\u5c3d\u65e0\u7591\u7684 criterion \u6807\u51c6\uff0c\u51c6\u5219 regression \u56de\u5f52 pinpoint \u7cbe\u786e\u5730\u786e\u5b9a...\u7684\u4f4d\u7f6e artifact \u4eba\u5de5\u5236\u54c1\uff0c\u5236\u9020\u7269 counteract \u5bf9...\u8d77\u53cd\u4f5c\u7528\uff1b\u5bf9\u6297\uff1b\u62b5\u6d88 partition \u5206\u5272; \u5212\u5206 homogeneous \u540c\u79cd\u7c7b\u7684; \u540c\u6027\u8d28\u7684 forfeit \u4e27\u5931\uff0c\u5931\u53bb manifest \u663e\u793a\uff0c\u4f7f\u663e\u73b0 preparatory \u51c6\u5907\u6027\u7684\uff0c\u9884\u5907\u6027\u7684 deem \u8ba4\u4e3a,\u89c6\u4e3a consecutive \u8fde\u7eed\u7684"},{"location":"Computer_English/Unit5/#section-c-what-is-a-design-pattern","title":"Section C: What is a Design Pattern","text":"pertinent \u76f8\u5173\u7684 factor ... into \u628a...\u5206\u89e3\u6210 granularity \u7c92\u5ea6 analogy \u7c7b\u6bd4\uff0c\u7c7b\u63a8 playwright \u5267\u4f5c\u5bb6 intent \u610f\u56fe\uff0c\u76ee\u7684 handle \u53e5\u67c4\uff1b\u79f0\u53f7 pragmatic \u6ce8\u91cd\u5b9e\u6548\u7684\uff1b\u5b9e\u9645\u7684\uff1b\u5b9e\u7528\u4e3b\u4e49\u7684"},{"location":"Computer_English/Unit6/","title":"Unit 6 Database","text":""},{"location":"Computer_English/Unit6/#section-a-database-overview","title":"Section A  Database Overview","text":"payroll \u5de5\u8d44\u8868;\u5728\u804c\u4eba\u5458 coherent \u4e00\u81f4\u7684, \u534f\u8c03\u7684 revoke \u64a4\u9500, \u5e9f\u9664 conceptual \u6982\u5ff5\u7684 obsolete \u5e9f\u5f03\u7684\uff0c\u6dd8\u6c70\u7684 inverted \u53cd\u5411\u7684\uff0c\u5012\u7f6e\u7684 replicate \u590d\u5236, \u91cd\u590d replica \u590d\u5236\u54c1 intersection \u4ea4\u96c6 denote \u8868\u793a, \u610f\u601d\u662f retrieval \u68c0\u7d22, \u53d6\u56de"},{"location":"Computer_English/Unit6/#section-b-maintaining-database-integrity","title":"Section B  maintaining database integrity","text":"corruption \u7834\u574f, \u8bb9\u8bef disastrous \u707e\u96be\u6027\u7684 erroneous \u9519\u8bef\u7684, \u4e0d\u6b63\u786e\u7684 inadvertent \u7c97\u5fc3\u5927\u610f\u7684 nonvolatile \u975e\u6613\u5931\u6027\u7684"},{"location":"Computer_English/Unit6/#section-c-what-is-data-mining","title":"Section C  What Is Data Mining","text":"velocity \u901f\u7387, \u901f\u5ea6 nonetheless \u5c3d\u7ba1\u5982\u6b64, \u7136\u800c scalability \u53ef\u7f29\u653e\u6027, \u53ef\u4f38\u7f29\u6027 scalable \u53ef\u7f29\u653e\u7684, \u53ef\u4f38\u7f29\u7684 scour \u56db\u5904\u641c\u7d22, \u7ec6\u67e5 exponential \u6307\u6570\u7684\uff0c\u8fc5\u901f\u589e\u957f\u7684 temporal \u65f6\u95f4\u7684 spatial \u7a7a\u95f4\u7684 hypothesize \u5047\u8bbe\uff0c\u5047\u5b9a trajectory \u8f68\u8ff9, \u8f68\u9053 cluster \u4e00\u7c07, \u4e00\u7fa4 discrete \u5206\u79bb\u7684, \u79bb\u6563\u7684 intrusion \u4fb5\u5165, \u6253\u6405"},{"location":"Computer_English/Unit7/","title":"Unit 7 Computer Network","text":""},{"location":"Computer_English/Unit7/#section-a-network-fundamentals","title":"Section A Network Fundamentals","text":"domain \u57df topology \u62d3\u6251\u7ed3\u6784\uff0c\u5e03\u5c40 focal \u7126\u70b9\u7684 Ethenet \u4ee5\u592a\u7f51 carrier sense \u8f7d\u6ce2\u76d1\u542c collide \u51b2\u7a81\uff0c\u78b0\u649e peer-to-peer \u5bf9\u7b49\u7684 swarm \u4e00\u5927\u7fa4 peer \u540c\u7ea7\u8bbe\u5907\uff0c\u540c\u5c42\uff0c\u5bf9\u7b49\u5c42"},{"location":"Computer_English/Unit7/#section-b-a-guide-to-network-topology","title":"Section B A Guide to Network Topology","text":"routing \u8def\u7531\u9009\u62e9 terminator \u7ec8\u7ed3\u7b26\uff0c\u7aef\u5b50 disrupt \u6270\u4e71\uff0c\u4f7f\u4e2d\u65ad slack \u677e\u5f1b degraded \u964d\u7ea7\u7684\uff0c\u9000\u5316\u7684 alternatively \u6216\u8005\uff0c\u975e\u6b64\u5373\u5f7c alternate \u4f9b\u9009\u62e9\u7684\uff0c\u5907\u7528\u7684 backbone \u4e3b\u5e72\uff0c\u9aa8\u5e72"},{"location":"Computer_English/Unit7/#section-c-network-connecting-devices","title":"Section C Network Connecting Devices","text":"repeater \u4e2d\u7ee7\u5668\uff0c\u8f6c\u53d1\u5668 degradation \u964d\u7ea7\uff0c\u9000\u5316 trafficwise \u5728\u4ea4\u901a\u65b9\u9762 converter \u8f6c\u6362\u5668\uff0c\u8f6c\u6362\u7a0b\u5e8f interchanable \u53ef\u4ea4\u6362\u7684\uff0c\u53ef\u4e92\u6362\u7684 session \u5bf9\u8bdd\uff0c\u4f1a\u8bdd"},{"location":"Computer_English/Unit8/","title":"Unit 8 The Internet","text":""},{"location":"Computer_English/Unit8/#section-a-the-internet","title":"Section A  The Internet","text":"undertaking \u4efb\u52a1\uff0c\u4e8b\u4e1a customary \u4e60\u60ef\u7684\uff0c\u6309\u60ef\u4f8b\u7684 potent \u6709\u6548\u529b\u7684 intranet \u5185\u8054\u7f51\uff0c\u5185\u90e8\u7f51\u7edc multitude \u5927\u91cf\uff0c\u8bb8\u591a cellular \u8702\u7a9d\u72b6\u7684\uff0c\u591a\u5b54\u7684 tactic \u6218\u672f\uff0c\u7b56\u7565\uff0c\u624b\u6bb5 linkage \u8054\u7cfb\uff0c\u8fde\u63a5\uff0c\u94fe\u63a5 artery \u52a8\u8109\uff0c\u5e72\u7ebf fiber optics \u5149\u7ea4\uff0c\u5149\u5b66\u7ea4\u7ef4 broadband \u5bbd\u5e26\u7684 conducive \u6709\u52a9\u7684\uff0c\u6709\u76ca\u7684 mnemonic \u8bb0\u5fc6\u7684\uff0c\u52a9\u8bb0\u7684 jurisdiction \u53f8\u6cd5\u6743\uff0c\u7ba1\u8f96\u6743"},{"location":"Computer_English/Unit8/#section-b-the-layered-approach-to-internet-software","title":"Section B  The Layered Approach to Internet Software","text":"analogous \u76f8\u4f3c\u7684\uff0c\u53ef\u6bd4\u62df\u7684 addressee \u6536\u4fe1\u4eba\uff0c\u6536\u4ef6\u4eba utility software \u5b9e\u7528\u8f6f\u4ef6 obstruct \u963b\u788d\uff0c\u963b\u585e hop \u8df3\u8dc3 append \u9644\u52a0"},{"location":"Computer_English/Unit8/#section-c-web-basics","title":"Section C Web Basics","text":"captivating \u8ff7\u4eba\u7684\uff0c\u53ef\u7231\u7684 instrumental \u8d77\u4f5c\u7528\u7684\uff0c\u6709\u5e2e\u52a9\u7684 ferry \u6e21\u8fd0\uff0c\u8fd0\u9001 jewelry \u73e0\u5b9d\uff0c\u9996\u9970 encompass \u5305\u542b\uff0c\u5305\u62ec corporate \u516c\u53f8\u7684\uff0c\u793e\u56e2\u7684 Uniform Resource Locator \u7edf\u4e00\u8d44\u6e90\u5b9a\u4f4d\u7b26 doorway \u51fa\u5165\u53e3\uff0c\u95e8\u53e3 punctuation mark \u6807\u70b9\u7b26\u53f7 forward slash \u6b63\u659c\u6760 cosmetic \u5316\u5986\u7528\u7684\uff0c\u88c5\u9970\u6027\u7684\uff0c\u975e\u5b9e\u8d28\u6027\u7684 Embedded \u5d4c\u5165\u5f0f\u7684 formulate \u6784\u60f3\u51fa\uff0c\u7cfb\u7edf\u6027\u7684\u9610\u8ff0 wildcard \u901a\u914d\u7b26\uff0c\u4e07\u80fd\u7b26 derivation \u6d3e\u751f\uff08\u7269\uff09 recipe \u98df\u8c31\uff0c\u5904\u65b9 colon \u5192\u53f7"},{"location":"Computer_English/Unit9/","title":"Unit 9 Mobile and Cloud Computing","text":""},{"location":"Computer_English/Unit9/#section-a-cloud-computing","title":"Section A  Cloud Computing","text":"virtualize \u865a\u62df\u5316 workload \u5de5\u4f5c\u91cf\uff0c\u5de5\u4f5c\u8d1f\u8377 batch \u6279\uff0c\u6279\u91cf\uff0c\u6210\u6279 leverage \u5145\u5206\u5229\u7528 whereby \u501f\u4ee5 scenario \u65b9\u6848\uff0c\u60c5\u51b5\uff0c\u811a\u672c elastic \u5f39\u6027\u7684 provision \u4f9b\u5e94\uff0c\u63d0\u4f9b callout \u6807\u6ce8 agile \u654f\u6377\u7684\uff0c\u7075\u6d3b\u7684 envision \u60f3\u8c61\uff0c\u8bbe\u60f3 carve \u96d5\u523b"},{"location":"Computer_English/Unit9/#section-b-fog-and-edge-computing","title":"Section B Fog and Edge Computing","text":"latency \u7b49\u5f85\u65f6\u95f4\uff0c\u65f6\u5ef6 agility \u654f\u6377\uff0c\u673a\u654f autonomous \u81ea\u4e3b\u7684\uff0c\u81ea\u6cbb\u7684 ubiquitous \u666e\u904d\u5b58\u5728\u7684\uff0c\u65e0\u6240\u4e0d\u5728\u7684 analytics \u5206\u6790\u65b9\u6cd5\uff0c\u5206\u6790\u5b66 hypervisor \u7ba1\u7406\u7a0b\u5e8f proxy \u4ee3\u7406\uff08\u4eba\uff09 actuation \u9a71\u52a8\uff0c\u542f\u52a8 authentication \u9a8c\u8bc1\uff0c\u9274\u522b authorization \u6388\u6743\uff0c\u59d4\u6258"},{"location":"Computer_English/Unit9/#section-c-mobile-users","title":"Section C Mobile Users","text":"inventory \u5b58\u8d27\uff0c\u5e93\u5b58 cabling \u7535\u7f06 duct \u7ba1\u9053\uff0c\u5bfc\u7ba1 barcode \u6761\u5f62\u7801 relay \u63a5\u529b\u4f20\u9001\uff0c\u4f20\u9012\uff0c\u8f6c\u64ad convergence \u6536\u655b roam \u6f2b\u6e38\uff1b\u6f2b\u6b65 annotate \u7ed9... \u505a\u6ce8\u89e3 annotation \u6ce8\u89e3\uff1b\u6ce8\u91ca\uff1b\u8bc4\u6ce8 diagnostic \u8bca\u65ad\u7684 congest \u62e5\u6324 debit card \u501f\u8bb0\u5361 expire \u671f\u6ee1\uff0c\u5230\u671f\uff0c\u5931\u6548 implant \u690d\u5165\uff0c\u57cb\u7f6e"},{"location":"Computer_Networking/chapter1/","title":"Chapter1 Introduction","text":""},{"location":"Computer_Networking/chapter1/#11-what-is-internet-what-is-a-protocal","title":"1.1 what is Internet? What is a protocal","text":"<p>Internet: Network of Networks protocals define the format, order of messages sent and received among network entities, and actions taken on message transmission, receipt.  </p>"},{"location":"Computer_Networking/chapter1/#12-network-edge","title":"1.2 Network edge","text":"<p>approximate speeds  </p> access network speeds Ethenet Wired. Up to 100's Gbps per link 802.11 WiFi Wireless. 10\u2019s to 100\u2019s of Mbps per device. Cable access Network Wired. Up to 10\u2019s to 100\u2019s of Mbps downstream per user. Digital subscriber Line Wired. Up to 10\u2019s of Mbps downstream per user. 4G cellular Wireless. Up to 10\u2019s Mbps per device."},{"location":"Computer_Networking/chapter1/#13-the-network-core-packetcircuit-switching-internet-structure","title":"1.3 The network core: packet/circuit switching, internet structure","text":""},{"location":"Computer_Networking/chapter1/#14-performance-delay-loss-throughput","title":"1.4 performance: delay, loss, throughput","text":"<p>delay: processing delay, queueing delay, transmission delay, propagation delay  </p>"},{"location":"Computer_Networking/chapter1/#15-layering-encapsulation-sevice-models","title":"1.5 layering, encapsulation, sevice models","text":"<p>layered Internet protocal stack </p> <ol> <li>application: supporting network applications<ul> <li>http, IMAP, SMTP, DNS </li> </ul> </li> <li>transport: process-process data transfer  <ul> <li>TCP, UDP  </li> </ul> </li> <li>network: routing of datagrams from source to destination<ul> <li>IP, Routing protocals </li> </ul> </li> <li>link: data transfer between neighboring network elements  <ul> <li>Ethenet, 802.11(WiFi), PPP  </li> </ul> </li> <li>physical: bits \"on the wire\"  </li> </ol> layer application message M transport segment H<sub>t</sub>M network datagram H<sub>n</sub>H<sub>t</sub>M link frame H<sub>l</sub>H<sub>n</sub>H<sub>t</sub>M pysical bit"},{"location":"Computer_Networking/chapter2/","title":"Chapter2 Application layer","text":""},{"location":"Computer_Networking/chapter2/#21-principles-of-applications","title":"2.1 Principles of Applications","text":""},{"location":"Computer_Networking/chapter2/#processes-communicating","title":"Processes communicating","text":"<p>process: program running within a host  </p> <ul> <li>within the same host, two processes communicate using inter-process communication(defined by OS)</li> <li>processes in different hosts communicate by exchanging messages</li> </ul> <p>client process: process that initiates communication sever process: process that waits to be contacted  </p>"},{"location":"Computer_Networking/chapter2/#sockets","title":"Sockets","text":""},{"location":"Computer_Networking/chapter2/#22-web-and-http","title":"2.2 Web and http","text":""},{"location":"Computer_Networking/chapter2/#http","title":"HTTP","text":"<p>HTTP: hypertext transfer prototol  use port 80</p> <ul> <li>web's application-layer protocol</li> <li>client/server model:</li> <li>client: browser that requests, receives, (using HTTP protocol) and \"displays\" Web objects</li> <li>server: Web server sends (using HTTP protocol) objects in response to requests</li> <li>HTTP uses TCP  </li> <li>HTTP is \"stateless\": server maintains no infrmation about past client requests  </li> </ul> <p>maintaining user/server state: cookies when initial http requests arrives at site, site creates:  </p> <ul> <li>unique ID(aka \"cookie\")  </li> <li>entry in backend database for ID </li> <li>subsequent HTTP requests from user to this site will contain cookie ID value, allowing site to \"identify\" the user  </li> </ul> <p>conditional get  <code>If-Modified-Since: Wed, 09 Sep 2020 16:06:01 -0700</code> Goal: don't send object if browser has up-to-date cached version(client have a cached copy of the object)  </p>"},{"location":"Computer_Networking/chapter2/#23-email-smtp-imap","title":"2.3 Email, SMTP, IMAP","text":""},{"location":"Computer_Networking/chapter2/#three-major-components","title":"three major Components","text":"<ul> <li>user agents  </li> <li>mail servers</li> <li>simple mail transfer protocol: SMTP</li> </ul> <p>SMTP: simple mail transfer protocol, Pushes email from a mail client to a mail server(use port 25) IMAP: pull email from mail sever to mail client  </p>"},{"location":"Computer_Networking/chapter2/#24-dns-domain-name-system","title":"2.4 DNS (domain name system)","text":"<p>root name servers: incredibly important internet function Top-Level Domain servers: responsible for .com .org, .net, .edu, .aero, .jobs, .museums, and all top-level country domains, e.g: .cn, .uk, .fr, .ca  authoritative DNS servers: organization's own DNS server, providing authoritative hostname to IP mappings for organization's named hosts local DNS name servers: when host makes DNS query, it is sent to its local DNS server  <code>nslookup -NS domain_name</code> can return the authoritative DNS of the domain_name <code>nslookup domain_name</code> can return the ip of the domain_name  </p>"},{"location":"Computer_Networking/chapter2/#25-sockets-programming","title":"2.5 Sockets programming","text":""},{"location":"Computer_Networking/chapter2/#socket-programming-with-udp","title":"socket programming with UDP","text":"<p>UDP client:  UDP server:  UDP: no 'connection' between client and server  </p> <ul> <li>no handshaking before sending data  </li> <li>sender explictly attachs IP destination address and port to each packet  </li> <li>receiver extracts sender IP address and port from received packet  </li> </ul> <p><code>socket(AF_INET, SOCK_DGRAM)</code> creates this type of socket provides unreliable transfer of a groups of bytes (\u201ca datagram\u201d), from client to server data from different clients can be received on the same socket the application must explicitly specify the IP destination address and port number for each group of bytes written into a socket  </p>"},{"location":"Computer_Networking/chapter2/#socket-programming-with-tcp","title":"socket programming with TCP","text":"<p>TCP client:  TCP server: </p> <p>TCP: <code>socket(AF_INET, SOCK_STREAM)</code> creates this type of socket a server can perform an accept() on this type of socket when contacted, the server will create a new server-side socket to communicate with that client provides reliable, in-order byte-stream transfer (a \u201cpipe\u201d), from client to server  </p> <p>What happens when a socket<code>connect()</code> procedure is called/invoked? This procedure creates a new socket at the client, and connects that socket to the specified server.</p>"},{"location":"Computer_Networking/chapter3/","title":"Chapter 3 The transport layer","text":""},{"location":"Computer_Networking/chapter3/#31-introduction-and-transport-layer-services","title":"3.1 Introduction and transport-layer services","text":"<p>TCP: transmission control protocol  </p> <ul> <li>reliable, in-order delivery</li> <li>congestion control  </li> <li>flow control</li> <li>connection setup  </li> </ul> <p>UDP: User datagram protocol  </p> <ul> <li>unreliable, unordered delivery</li> <li>no-frills extension of \"best-effort\" IP</li> <li>service not available:  <ul> <li>delay guarantees</li> <li>bandwith guarantees</li> </ul> </li> </ul>"},{"location":"Computer_Networking/chapter3/#32-multiplexing-and-demultiplexing","title":"3.2 Multiplexing and Demultiplexing","text":""},{"location":"Computer_Networking/chapter3/#33-connectionless-transport-udp","title":"3.3 Connectionless Transport UDP","text":""},{"location":"Computer_Networking/chapter3/#34-principles-of-reliable-data-transfer","title":"3.4 Principles of reliable data transfer","text":""},{"location":"Computer_Networking/chapter3/#principles-of-reliable-data-transfer","title":"Principles of Reliable Data Transfer","text":""},{"location":"Computer_Networking/chapter3/#pipelining-increased-utilization","title":"Pipelining increased utilization","text":"<ul> <li> <p>Go-Back-N </p> </li> <li> <p>Selective repeat </p> </li> </ul>"},{"location":"Computer_Networking/chapter3/#35-connection-oriented-transport-tcp","title":"3.5 connection-oriented transport: TCP","text":""},{"location":"Computer_Networking/chapter3/#tcp-segment-structure","title":"tcp segment structure","text":"<p> * sequence numbers: byte stream \"number\" of first byte in segment's data * acknowledgement number: next byte expected from other side, cumulative ACK</p>"},{"location":"Computer_Networking/chapter3/#connection-management","title":"connection management","text":""},{"location":"Computer_Networking/chapter3/#tcp-fast-retransmit","title":"tcp fast retransmit","text":""},{"location":"Computer_Networking/chapter3/#flow-control","title":"flow control","text":""},{"location":"Computer_Networking/chapter3/#36-congestion-control","title":"3.6 congestion control","text":""},{"location":"Computer_Networking/chapter3/#slow-start","title":"slow start","text":"<p>initial cwnd = 1 then 2 4 8 ... exp  </p>"},{"location":"Computer_Networking/chapter3/#congestion-avoidance","title":"congestion avoidance","text":"<ul> <li>if timeout then cwnd reset to 1  </li> <li>if 3 ACK then cwnd = cwnd/2  </li> </ul>"},{"location":"Computer_Networking/chapter3/#quick-restart","title":"quick restart","text":"<p>TCP Reno: cwnd = cwnd/2 + 3, then linear add 1 MSS TCP AIMD (additive-increase multiplicative-decrease)  cwnd = cwnd / 2 TCP CUBIC: cubic function  </p>"},{"location":"Computer_Networking/chapter4/","title":"Network Layer: \"data plane\"","text":""},{"location":"Computer_Networking/chapter4/#41-network-layer-overview","title":"4.1 network layer: overview","text":""},{"location":"Computer_Networking/chapter4/#42-whats-inside-a-router","title":"4.2 what's inside a router","text":""},{"location":"Computer_Networking/chapter4/#input-ports","title":"input ports","text":""},{"location":"Computer_Networking/chapter4/#switching","title":"switching","text":""},{"location":"Computer_Networking/chapter4/#output-ports","title":"output ports","text":""},{"location":"Computer_Networking/chapter4/#packet-buffering-scheduling","title":"packet buffering, scheduling","text":""},{"location":"Computer_Networking/chapter4/#43-ip-the-internet-protocol","title":"4.3 IP: the internet protocol","text":""},{"location":"Computer_Networking/chapter4/#ipv4-addressing","title":"IPv4, addressing","text":"<p>IP address: 32-bit identifier associated with each host or router interface </p>"},{"location":"Computer_Networking/chapter4/#subnet","title":"subnet","text":""},{"location":"Computer_Networking/chapter4/#cidr","title":"CIDR","text":""},{"location":"Computer_Networking/chapter4/#dhcphost-part","title":"DHCP(host part)","text":""},{"location":"Computer_Networking/chapter4/#subnet-part","title":"(subnet part)","text":""},{"location":"Computer_Networking/chapter4/#nat-ipv6","title":"NAT, IPv6","text":""},{"location":"Computer_Networking/chapter4/#44-generalized-forwarding-sdn","title":"4.4 Generalized Forwarding, SDN","text":""},{"location":"Computer_Networking/chapter4/#45-middle-boxes","title":"4.5 Middle boxes","text":""},{"location":"Computer_Networking/chapter5/","title":"Chapter5 Network Layer: Control Plane","text":""},{"location":"Computer_Networking/chapter5/#51-introduction-to-the-network-layer-control-plane","title":"5.1 introduction to the network-layer control plane","text":""},{"location":"Computer_Networking/chapter5/#52-routing-algorithms","title":"5.2 Routing Algorithms","text":""},{"location":"Computer_Networking/chapter5/#link-state-routing-algorithms","title":"link state routing Algorithms","text":""},{"location":"Computer_Networking/chapter5/#distance-vector-routing-algorithms","title":"distance vector routing Algorithms","text":""},{"location":"Computer_Networking/chapter5/#53-intra-as-routing-in-the-internet-ospf","title":"5.3 Intra-AS Routing in the Internet: OSPF","text":""},{"location":"Computer_Networking/chapter5/#54-routing-among-the-isps-bgp","title":"5.4 Routing Among the ISPs: BGP","text":""},{"location":"Computer_Networking/chapter5/#55-the-sdn-control-plane","title":"5.5 The SDN Control Plane","text":""},{"location":"Computer_Networking/chapter5/#56-icmp-the-internet-control-message-protocol","title":"5.6 ICMP: The Internet Control Message Protocol","text":""},{"location":"Computer_Networking/chapter5/#57-network-management-and-snmp-netconfyang","title":"5.7 Network Management and SNMP, NETCONF/YANG","text":""},{"location":"Computer_Networking/chapter6/","title":"Chapter 6 The Link Layer","text":""},{"location":"Computer_Networking/chapter6/#61-introduction-to-the-link-layer","title":"6.1 Introduction to the Link Layer","text":""},{"location":"Computer_Networking/chapter6/#62-error-detection-and-correction-techniques","title":"6.2 Error-Detection and -Correction Techniques","text":""},{"location":"Computer_Networking/chapter6/#63-multiple-access-links-and-protocols","title":"6.3 Multiple Access Links and Protocols","text":""},{"location":"Computer_Networking/chapter6/#64-switched-local-area-networks","title":"6.4 Switched Local Area Networks","text":""},{"location":"Computer_Networking/chapter6/#65-link-virtualization-a-network-as-a-link-layer","title":"6.5 Link Virtualization: A Network as a Link Layer","text":""},{"location":"Computer_Networking/chapter6/#66-data-center-networking","title":"6.6 Data Center Networking","text":""},{"location":"MIT_missing%26practical_skills/Command_line_environment/","title":"Command line environment","text":"<p>Run several processes at the same time while keeping track of them, how to stop or pause a specific process and how to make a process run in the background. We will also learn about different ways to improve your shell and other tools, by defining aliases and configuring them using dotfiles. Both of these can help you save time, e.g. by using the same configurations in all your machines without having to type long commands. We will also look at how to work with remore machines using SSH.  </p>"},{"location":"MIT_missing%26practical_skills/Command_line_environment/#job-control","title":"Job control","text":"<p>In some cases you will need to interrupt a job while it is executing, for instance if a command is taking too long to complete(such as a <code>find</code> with a very large directory structure to search through). Most of the time, you can do <code>Ctrl-C</code> and the command will stop. But how does this actually work and why does it sometimes fail to stop the process?  </p>"},{"location":"MIT_missing%26practical_skills/Command_line_environment/#killing-a-process","title":"Killing a process","text":"<p>Your shell is using a Unix communication mechanism called a signal to communicate information to the process. When a process receives a signal it stops its execution, deals with the signal and potentially changes the flow of execution based on the information that the signal delivered. For this reason, signals are software interrupts. In our case, when typing <code>Ctrl-c</code> this prompts the shell to deliver a <code>SIGINT</code> signal to the process.  <code>Ctrl-\\</code> represents <code>SIGQUIT</code>. While <code>SIGINT</code> and <code>SIGQUIT</code> are both usually associated with terminal related request, a more generic signal for asking a process to exit gracefully is the <code>SIGTERM</code> signal. To send this signal we can use kill command, with the synax <code>kill -TERM &lt;PID&gt;</code>. below are some signal  </p>"},{"location":"MIT_missing%26practical_skills/Command_line_environment/#pausing-and-backgrounding-process","title":"Pausing and backgrounding process","text":"<p>Signals can do other things beyond killing a process. For instance, <code>SIGSTOP</code> pauses a process. In the terminal, typing <code>Ctrl-z</code> will prompt the shell to send a <code>SIGTSTP</code> signal, short for Terminal Stop(i.e. the terminal's version of <code>SIGSTOP</code>). we can then continue the paused job in the foreground or in the background using fg or bg, respectively. The jobs command lists the unfinished jobs associated with the current terminal session. You can refer to those jobs using their pid (you can use pgrep to find that out). More intuitively, you can also refer to a process using the percent symbol followed by its job number (displayed by <code>jobs</code>). To refer to the last backgrounded job you can use the <code>$!</code> special parameter. One more thing to know is that the <code>&amp;</code> suffix in a command will run the command in the background, giving you the prompt back, although it will still use the shell\u2019s STDOUT which can be annoying (use shell redirections in that case). To background an already running program you can do <code>Ctrl-Z</code> followed by <code>bg</code>. Note that backgrounded processes are still children processes of your terminal and will die if you close the terminal (this will send yet another signal, <code>SIGHUP</code>). To prevent that from happening you can run the program with <code>nohup</code> (a wrapper to ignore <code>SIGHUP</code>), or use disown if the process has already been started. Alternatively, you can use a terminal multiplexer as we will see in the next section. A special signal is <code>SIGKILL</code> since it cannot be captured by the process and it will always terminate it immediately. However, it can have bad side effects such as leaving orphaned children processes. You can learn more about these and other signals here or typing <code>man signal</code> or <code>kill -l</code>.  </p>"},{"location":"MIT_missing%26practical_skills/Command_line_environment/#terminal-multiplexers","title":"Terminal Multiplexers","text":"<p><code>tmux</code> expects you to know its keybindings, and they all have the form <code>&lt;C-b&gt; x</code> where that means (1) press <code>Ctrl+b</code>, (2) release <code>Ctrl+b</code>, and then (3) press <code>x</code>. <code>tmux</code> has the following hierarchy of objects:  </p> <ol> <li>Sessions a session is an independent workspace with one or more windows  <ul> <li><code>tmux</code> starts a new session.</li> <li><code>tmux new -s NAME</code> starts it with that name.</li> <li><code>tmux rename-session -t 0 database</code> rename your existing session. the default name of session is number.</li> <li><code>tmux ls</code> lists the current sessions</li> <li>Within <code>tmux</code> typing <code>&lt;C-b&gt; d</code> detaches the current session</li> <li><code>tmux a</code> attaches the last session. You can use <code>-t</code> flag to specify which</li> </ul> </li> <li> <p>Windows Equivalent to tabs in editors or browsers, they are visually separate parts of the same session</p> <ul> <li><code>&lt;C-b&gt; c</code> Creates a new window. To close it you can just terminate the shells doing <code>&lt;C-d&gt;</code></li> <li><code>&lt;C-b&gt; N</code> Go to the N th window. Note they are numbered</li> <li><code>&lt;C-b&gt; p</code> Goes to the previous window</li> <li><code>&lt;C-b&gt; n</code> Goes to the next window</li> <li><code>&lt;C-b&gt;</code> , Rename the current window</li> <li><code>&lt;C-b&gt; w</code> List current windows</li> </ul> </li> <li> <p>Panes Like vim splits, panes let you have multiple shells in the same visual display.</p> <ul> <li><code>&lt;C-b&gt; \"</code> Split the current pane horizontally</li> <li><code>&lt;C-b&gt; %</code> Split the current pane vertically</li> <li><code>&lt;C-b&gt; &lt;direction&gt;</code> Move to the pane in the specified direction. Direction here means arrow keys.</li> <li><code>&lt;C-b&gt; z</code> Toggle zoom for the current pane</li> <li><code>&lt;C-b&gt; [</code> Start scrollback. You can then press <code>&lt;space&gt;</code> to start a selection and <code>&lt;enter&gt;</code> to copy that selection.</li> <li><code>&lt;C-b&gt; &lt;space&gt;</code> Cycle through pane arrangements.  </li> </ul> </li> </ol> <p>Here is a quick tutorial on <code>tmux</code> </p>"},{"location":"MIT_missing%26practical_skills/Command_line_environment/#dotfiles","title":"Dotfiles","text":"<p>Many programs are configured using plain-text files known as dotfiles(because the file names begin with a <code>.</code>, e.g. <code>~/.vimrc</code>, so that they are hidden in the directory listing <code>ls</code> by default). shell are one example of programs configured with such files. On startup, your shell will read many files to load its configurarion. Depending on the shell, whether you are starting a login and/or interactive the entire process can be quite complex. For <code>bash</code>, editing your <code>.bashrc</code> or <code>.bash_profile</code> will work in most systems. Here you can include commands that you want to run on startup, like the alias we just described or modifications to your <code>PATH</code> environment variable. In fact, many programs will ask you to include a line like <code>export PATH=\"$PATH:/path/to/program/bin\"</code> in your shell configuration file so their binaries can be found. Some other examples of tools that can be configured through dotfiles are:  </p> <ul> <li><code>bash</code> - <code>~/.bashrc</code>, <code>~/.bash_profile</code></li> <li><code>git</code> - <code>~/.gitconfig</code></li> <li><code>vim</code> - <code>~/.vimrc</code> and the <code>~/.vim</code> folder</li> <li><code>ssh</code> - <code>~/.ssh/config</code></li> <li><code>tmux</code> - <code>~/.tmux.conf</code></li> </ul> <p>How should you organize your dotfiles? They should be in their own folder, under version control, and symlinked into place using a script. This has the benefits of:</p> <ul> <li><code>Easy installation</code>: if you log in to a new machine, applying your customizations will only take a minute. </li> <li><code>Portability</code>: your tools will work the same way everywhere.  </li> <li><code>Synchronization</code>: you can update your dotfiles anywhere and keep them all in sync.  </li> <li><code>Change tracking</code>: you\u2019re probably going to be maintaining your dotfiles for your entire programming career, and version history is nice to have for long-lived projects.  </li> </ul> <p>you can find tons of dotfiles repositories on Github \u2014 see the most popular one here (we advise you not to blindly copy configurations though). Here is another good resource on the topic. All of the class instructors have their dotfiles publicly accessible on GitHub:Anish.</p> <p>here are some knowledge from exercise. tmux custmization following these steps How to create symbolic link create a version control folder for dotfiles </p>"},{"location":"MIT_missing%26practical_skills/Command_line_environment/#dotfiles-hw","title":"dotfiles hw","text":"<p>Set up a method to install your dotfiles quickly(and without manual effort) on a new machine. This can be as simple as a shell script that calls <code>ln -s</code> for each file. After this you can </p> <ol> <li>Test your installation script on a fresh virtual machine.  </li> <li>Migrate all of your current tool configurations to your dotfiles repository.  </li> <li>Publish your dotfiles on GitHub.</li> </ol> autoconfig.sh<pre><code>#!/bin/bash\nfiles=$(ls -a ~gits/dotfiles | grep -E '\\..*' | grep -v .git)\nfor file in 'echo $files'; do\n    ln -s ~/gits/dotfiles/$file ~/$file   #create softlink\ndone\n</code></pre>"},{"location":"MIT_missing%26practical_skills/Command_line_environment/#remote-machines","title":"Remote machines","text":"<p>Install a Linux virtual machine 1. Go to <code>~/.ssh/</code> and check if you have a pair of SSH keys there. If not, generate them with  <pre><code>ssh-keygen -o -a 100 -t ed25519\n</code></pre> this will create two files named <code>id_ed25519</code> and <code>id_ed25519.pub</code> to store prive key and public key respectively. 2. Edit .ssh/config to have an entry as follows</p> <p><pre><code>Host ubuntu-server2204\n    User andy\n    HostName 192.168.159.216\n    Identityfile ~/.ssh/id_ed25519\n    LocalForward 9999 localhost:8888\n</code></pre> 3. use <code>ssh-copy-id ubuntu-server2204</code> to copy your ssh key to the server. 4. Start a webserver in your VM by executing <code>python -m http.server 888</code>. Access the VM webserver by navigating to <code>http:localhost:9999</code> in your machine. 5. Edit your SSH server config by doing <code>sudo vim /etc/ssh/sshd_config</code> and disable password authentication by editing the value of <code>PasswordAuthentication</code>. Disable root login by editing the value of <code>PermitRootLogin</code>. Restart the <code>ssh</code> service with <code>sudo service sshd restart</code>. Try sshing in again.</p> <p>Here is the operation on Virtual Machine  </p> <ul> <li>\u5728\u865a\u62df\u673a\u4e0a\u521b\u5efaroot\u767b\u5f55\u8d26\u53f7\uff08login as root\uff09\u3002caution: it is different between login as root and root user. <pre><code>VBoxManage startvm \"Ubuntu-Server-22.04\" --type headless\nssh ubuntu-server2204\npasswd root     #\u8f93\u5165\u5bc6\u7801\uff0c\u521b\u5efaroot\u767b\u5f55\u8d26\u53f7\nsudo vim /etc/ssh/sshd_config\n# find the line #PermitRootLogin prohibit-password, create a new line below\n# add \"PermitRootLogin yes\"\nservice sshd restart\n# restart sshd service and bring the change into effect\nexit\n</code></pre> ps: sshd service may need restart VM to take effect, start the VM in terminal: <pre><code>VBoxManage controlvm \"Ubuntu-Server-22.04\" poweroff\nVBoxManage startvm \"Ubuntu-Server-22.04\" --type headless\n</code></pre></li> <li> <p>Login as root and connect to VM   <code>ssh root@192.168..</code> login as root successfully.</p> </li> <li> <p>reconfig sshd, forbid login as root    <pre><code>vim /etc/ssh/sshd_config\n# find the line \"#PasswordAuthentication yes\" and open a new line below\n#add \"PasswordAuthentication no\"\n#find the line \"PermitRootLogin yes\", change yes to no \nservice sshd restart\n</code></pre></p> </li> <li> <p>login as root again    <pre><code>ssh root@192.168..\n# Permission denied, please try again\nssh ubuntu-server2204\n# login successfully\n</code></pre>   the change for <code>PermitRootLogin</code> and <code>PasswordAuthentication</code> will only affect login as root, but won't affect <code>ssh ubuntu-server2204</code>   the permission for login as root has risk for security, so it is not advisable. for the created login as root method, can be deleted as follows: <pre><code>sudo passwd -dl root\n</code></pre></p> </li> </ul>"},{"location":"MIT_missing%26practical_skills/Git/","title":"Version Control(Git)","text":""},{"location":"MIT_missing%26practical_skills/Git/#gits-data-model","title":"Git's data model","text":"<p>Git has a well-thought-out model that enables all the nice features of version control, like maintaining history, supporting branches, and enabling collaboration.  </p>"},{"location":"MIT_missing%26practical_skills/Git/#snapshots","title":"Snapshots","text":"<p>Git models the history of a collection of files and folders within some top level directoty as a series of snapshots. In Git terminology, a file is called a \"blob\" and it's just a bunch of bytes. A directory is called a \"tree\", and it maps names to blobs or trees(so directories can contain other directories). A snapshot is the top-level tree that is being tracked.</p>"},{"location":"MIT_missing%26practical_skills/Git/#modeling-history-relating-snapshots","title":"Modeling history: relating snapshots","text":"<p>In Git, a history is a directed acyclic graph (DAG) of snapshots. That may sound like a fancy math word, but don\u2019t be intimidated. All this means is that each snapshot in Git refers to a set of \u201cparents\u201d, the snapshots that preceded it. It\u2019s a set of parents rather than a single parent (as would be the case in a linear history) because a snapshot might descend from multiple parents, for example, due to combining (merging) two parallel branches of development.Git calls these snapshots \u201ccommit\u201ds.  Commits in Git are immutable. This doesn\u2019t mean that mistakes can\u2019t be corrected, however; it\u2019s just that \u201cedits\u201d to the commit history are actually creating entirely new commits, and references (see below) are updated to point to the new ones.</p>"},{"location":"MIT_missing%26practical_skills/Git/#data-model-as-pseudocode","title":"Data model, as pseudocode","text":"<pre><code>// a file is a bunch of bytes\ntype blob = array&lt;byte&gt;\n\n// a directory contains named files and directories\ntype tree = map&lt;string, tree | blob&gt;\n\n// a commit has parents, metadata, and the top-level tree\ntype commit = struct {\n    parents: array&lt;commit&gt;\n    author: string\n    message: string\n    snapshot: tree\n}\n</code></pre>"},{"location":"MIT_missing%26practical_skills/Git/#objects-and-content-addressing","title":"Objects and content-addressing","text":"<p>An \u201cobject\u201d is a blob, tree, or commit: <code>type object = blob | tree | commit</code>.  In Git data store, all objects are content-addressed by their SHA-1 hash. <pre><code>objects = map&lt;string, object&gt;\n\ndef store(object):\n    id = sha1(object)\n    objects[id] = object\n\ndef load(id):\n    return objects[id]\n</code></pre> Blobs, trees, and commits are unified in this way: they are all objects. When they reference other objects, they don\u2019t actually contain them in their on-disk representation, but have a reference to them by their hash. For example, the tree for the example directory structure above (visualized using git cat-file -p 698281bc680d1995c5f4caaf3359721a5a58d48d), looks like this: <pre><code>100644 blob 4448adbf7ecd394f42ae135bbeed9676e894af85    baz.txt\n040000 tree c68d233a33c5c06e0340e4c224f0afca87c8ce87    foo\n</code></pre> The tree itself contains pointers to its contents, <code>baz.txt</code> (a blob) and foo (a tree). If we look at the contents addressed by the hash corresponding to <code>baz.txt</code> with <code>git cat-file -p 4448adbf7ecd394f42ae135bbeed9676e894af85</code>, we get the following:<code>git is wonderful</code> </p>"},{"location":"MIT_missing%26practical_skills/Git/#references","title":"References","text":"<p>Now, all snapshots can be identified by their SHA-1 hashes. That\u2019s inconvenient, because humans aren\u2019t good at remembering strings of 40 hexadecimal characters. Git\u2019s solution to this problem is human-readable names for SHA-1 hashes, called \u201creferences\u201d. References are pointers to commits. Unlike objects, which are immutable, references are mutable (can be updated to point to a new commit). For example, the master reference usually points to the latest commit in the main branch of development. <pre><code>references = map&lt;string, string&gt;\n\ndef update_reference(name, id):\n    references[name] = id\n\ndef read_reference(name):\n    return references[name]\n\ndef load_reference(name_or_id):\n    if name_or_id in references:\n        return load(references[name_or_id])\n    else:\n        return load(name_or_id)\n</code></pre> With this, Git can use human-readable names like \u201cmaster\u201d to refer to a particular snapshot in the history, instead of a long hexadecimal string. One detail is that we often want a notion of \u201cwhere we currently are\u201d in the history, so that when we take a new snapshot, we know what it is relative to (how we set the parents field of the commit). In Git, that \u201cwhere we currently are\u201d is a special reference called \u201cHEAD\u201d.  </p>"},{"location":"MIT_missing%26practical_skills/Git/#repositories","title":"Repositories","text":"<p>Finally, we can define what(roughly) is a Git repository: it is the data <code>objects</code> and <code>references</code>. on disk, all Git stores are objects and references: that's all there is to Git's data model. All <code>git</code> commands map to some manipulation of the commit DAG by adding objects and adding/updating references. Whenever you\u2019re typing in any command, think about what manipulation the command is making to the underlying graph data structure. Conversely, if you\u2019re trying to make a particular kind of change to the commit DAG, e.g. \u201cdiscard uncommitted changes and make the \u2018master\u2019 ref point to commit 5d83f9e\u201d, there\u2019s probably a command to do it (e.g. in this case, git checkout master; git reset --hard 5d83f9e).</p>"},{"location":"MIT_missing%26practical_skills/Git/#git-command-line-interface","title":"Git command-line interface","text":""},{"location":"MIT_missing%26practical_skills/Git/#basics","title":"Basics","text":"<ul> <li><code>git help &lt;command&gt;</code>: get help for a git command</li> <li><code>git init</code>: creates a new git repo, with data stored in the <code>.git</code> directory</li> <li><code>git status</code>: tells you what's going on </li> <li>`git add : adds files to staging area <li><code>git commit</code>: create a new commit<ul> <li>Write good commit messages!</li> <li>Even more reasons to write good commit message</li> </ul> </li> <li><code>git log</code>: shows a fattened log of history</li> <li><code>git log --all --graph --decorate</code>: visualizes history as a DAG</li> <li><code>git diff &lt;filename&gt;</code>: show changes you made relative to the staging area</li> <li><code>git diff &lt;revision&gt; &lt;filename&gt;</code>: shows differences in a file between snapshots</li> <li><code>git checkout &lt;revision&gt;</code>: updates HEAD and current branch to the revision</li>"},{"location":"MIT_missing%26practical_skills/Git/#branching-and-merging","title":"Branching and merging","text":"<ul> <li><code>git branch</code>: shows branches</li> <li>`git branch : creates a branch <li> <p>`git checkout -b : creates a branch and switches to it <ul> <li>same as <code>git branch &lt;name&gt;</code>;<code>git checkout &lt;name&gt;</code></li> </ul> <li> <p><code>git merge &lt;revision&gt;</code>: merges into current branch</p> </li> <li><code>git mergetool</code>: use a fancy tool to help resolve merge conflicts</li> <li><code>git rebase</code>: rebase set of patches onto a new base</li>"},{"location":"MIT_missing%26practical_skills/Git/#remotes","title":"Remotes","text":"<ul> <li><code>git remote</code>: list remotes</li> <li><code>git remote add &lt;name&gt; &lt;url&gt;</code>:add a remote</li> <li><code>git push &lt;remote&gt; &lt;local branch&gt;:&lt;remote branch&gt;</code>:send objects to remote, and update remote reference</li> <li><code>git branch --set-upstream-to=&lt;remote&gt;/&lt;remote branch&gt;</code>: set up correspondence between local and remote branch</li> <li><code>git fetch</code>: retrieve objects/references from a remote</li> <li><code>git pull</code>: same as <code>git fetch</code>;<code>git merge</code></li> <li><code>git clone</code>: download repository from remote</li> </ul>"},{"location":"MIT_missing%26practical_skills/Git/#undo","title":"Undo","text":"<ul> <li><code>git commit --amend</code>:edit a commit's contents/message</li> <li><code>git reset HEAD &lt;file&gt;</code>: unstage a file</li> <li><code>git checkout --&lt;file&gt;</code>: discard changes</li> </ul>"},{"location":"MIT_missing%26practical_skills/Git/#advanced-git","title":"Advanced Git","text":"<ul> <li><code>git config</code>: Git is highly customizable</li> <li><code>git clone --depth=1</code>: shallow clone, without entire version history</li> <li><code>git add -p</code>: interactive staging</li> <li><code>git rebase -i</code>: interactive rebasing</li> <li><code>git blame</code>: show who last edited which line</li> <li><code>git stash</code>: temporarily remove modifications to working directory</li> <li><code>git bisect</code>: binary search history(e.g. for regression)</li> <li><code>.gitignore</code>: specify intentionally untracked files to ignore</li> </ul>"},{"location":"MIT_missing%26practical_skills/Git/#git-pro","title":"Git Pro","text":"<p>Git branching-basic branching and merging Git branching-remote branches Git branching-rebasing</p>"},{"location":"MIT_missing%26practical_skills/data_wrangling/","title":"Data Wrangling","text":""},{"location":"MIT_missing%26practical_skills/data_wrangling/#sedgrep","title":"sed&amp;grep","text":"<p>sed: stream editor, The <code>s</code> command is written on the form: <code>s/REGEX/SUBSTITUTION/</code>, where <code>REGEX</code> is the regular expression you want to search for, and <code>SUBSTITUTION</code> is the text you want to substitute matching text with. grep: Find patterns in files using regular expressions and print. less: Open a file for interactive reading, allowing scrolling and search.</p> command meaning <code>sed 's/\u67e5\u627e\u5185\u5bb9/\u66ff\u6362\u5185\u5bb9/' \u6587\u4ef6\u540d</code> \u66ff\u6362\u6587\u4ef6\u4e2d\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u6253\u5370\u7ed3\u679c <code>sed -E 's/\u6b63\u5219\u8868\u8fbe\u5f0f/\u66ff\u6362\u5185\u5bb9/g' \u6587\u4ef6\u540d</code> \u66ff\u6362\u6587\u4ef6\u4e2d\u6240\u6709\u7b26\u5408\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u90e8\u5206 <code>grep \"search_pattern\" path/to/file</code> Search for a pattern within a file <code>grep -i</code> Perform case insensitive matching.  By default, grep is case sensitive. <code>less source_file</code> Open a file"},{"location":"MIT_missing%26practical_skills/data_wrangling/#regular-expressions","title":"Regular Expressions","text":"<p>Regular expressions are usually(though not always) surrounded by <code>/</code>. Most ASCII characters just carry their normal meaning, but some characters have \"special\"matching behavior. Exactly which characters do what vary somewhat between different implementations of regular expressions Very common patterns are:  </p> character meaning <code>.</code> means \"any single character\" except newline(<code>\\n</code>) <code>*</code> zero or more of the preceding match <code>+</code> one or more of the preceding match <code>[abc]</code> any one character of <code>a</code>,<code>b</code>,<code>c</code> <code>(RX1|RX2)</code> either something that matches <code>RX1</code> or <code>RX2</code> <code>^</code> the start of the line <code>$</code> the end of the line <p><code>sed</code>'s regular expressions are somewhat weird, and will require you to put a <code>\\</code>before most of these \"special\" characters to transfer their character. <code>*</code> and <code>+</code> are, by default ,\"greedy\". they will match as much text as they can, and you can just suffix <code>*</code> or <code>+</code> with a <code>?</code> to make them non-greedy, but sadly <code>sed</code> doesn't support that. we could switch to perl's command-line mode though, which does support that construct:  </p> <p><pre><code>perl -pe 's/.*?Disconnected from //'\n</code></pre> We'll stick to <code>sed</code> for the rest of this, because it's by far the more common tool for these kinds of jobs. <code>sed</code> can also do other handy things like print lines following a given match, do multiple substitutions per invocation, search for things, etc.  </p> <p><pre><code>sed -E 's/.*Disconnected from (invalid |authenticating )?user .* [^ ]+ port [0-9]+( \\[preauth\\])?$//'\n</code></pre> <code>[^ ]+</code> match any non-empty sequence of non-space characters. the entire log becomes empty. We want to keep the username after all. For this, we can use \"capture groups\". Any text matched by a regrex surrounded by parentheses is stored in a numbered capture group. These are available in the substitution as <code>\\1</code>,<code>\\2</code>,<code>\\3</code>,etc.</p> <pre><code>sed -E 's/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \\[preauth\\])?$/\\2/'\n</code></pre> <p>some other data wrangling commands </p>"},{"location":"MIT_missing%26practical_skills/data_wrangling/#regrex-one","title":"Regrex one","text":""},{"location":"MIT_missing%26practical_skills/data_wrangling/#lesson1-an-introduction-and-the-abcs","title":"Lesson1: An Introduction, and the ABCs","text":"<p>the first thing to recognize when using regular expressions is that everything is essentially a character, and we are writing patterns to match a specific sequence of characters(also known as a string). Most patterns use normal ASCII, which includes letters, digits, punctuation and other symbols on your keyboard like <code>%#$@!</code>, but unicode characters can also be used to match any type of international text. In fact, numbers 0-9 are also just characters and you can look at an ASCII table where they are listed sequentially. a number of special metacharacters used in regular expressions can match a specific type of character. In this case, the character <code>\\d</code> can be used in place of any digit from 0 to 9. the preceding slash distinguished it from the simple <code>d</code> character and indicates that it is a metacharacter.</p>"},{"location":"MIT_missing%26practical_skills/data_wrangling/#lesson2-the-dot","title":"lesson2: The Dot<code>.</code>","text":"<p>In some card games, the joker is a wildcard and can represent any card in the deck. Similarily, there is the concept of a wildcard, which is represented by the <code>.</code> metacharacter, and can <code>match any single character</code>(letter, digit, whitespace, everything). In order to specifically match a period, you need to escape the dot by using a slash . accordingly.  </p>"},{"location":"MIT_missing%26practical_skills/data_wrangling/#lesson3-matching-specific-characters","title":"lesson3: Matching specific characters","text":"<p>There is a method for <code>matching specific characters</code> using regular expressions, by defining them inside <code>square brackets</code>. For example, the pattern <code>[abc]</code> will only match a single a, b, or c letter and nothing else.</p>"},{"location":"MIT_missing%26practical_skills/data_wrangling/#lesson4-excluding-specific-characters","title":"lesson4: Excluding specific characters","text":"<p>In some cases, we might know that there are specific characters that we don't want to match too, for example, we might only want to match phone numbers that are not from the area code 650. To represent this, We use a similar expression that excludes specific characters using the square brackets<code>[]</code> and the <code>^</code>(hat). for example, the pattern <code>[^abc]</code>  will match any single character except for the letters a, b, or c.</p>"},{"location":"MIT_missing%26practical_skills/data_wrangling/#lesson5-character-ranges","title":"lesson5: Character ranges","text":"<p>there is a shorthand for matching a character in list of sequential characters by using the dash to indicate a character range. For example, the pattern <code>[0-6]</code> will only match any single digit character from zero to six, and nothing else. And likewise, <code>[^n-p]</code> will only match any single character <code>except</code> for letters n to p. Multiple character ranges can also be used in the same set of brackets, along with individual characters. An example of this is the alphanumeric <code>\\w</code> metacharacter which is equivalent to the character range <code>[A-Za-z0-9_]</code> and often used to match characters in English text.  </p>"},{"location":"MIT_missing%26practical_skills/data_wrangling/#lesson-6-catching-some-zzzs","title":"Lesson 6: Catching some  zzz's","text":"<p>Caution</p> <p>some parts of the repetition synax below isn't supported in all regular expression implementations.</p> <p>We've so far learned how to specify the range of characters we want to match, but how about the number of repetition of characters that we want to match? one way that we can do this is to explicitly spell out exactly three digits. A more convenient way is to specify how many repetition of each character we want using the curly braces notation. For example, <code>a{3}</code> will match the a character exactly three times. Certain regular expression engines will even allow you to specify a range for this repetition such that <code>a{1,3}</code> will match the a character no more than 3 times, but no less than once for example. This quantifier can be used with any character, or special metacharacters, for example <code>w{3}</code>(three w), <code>[wxy]{5}</code>(five characters, each of which can be a, w, x, or y) and <code>.{2,6}</code> (any character between two and six).  </p>"},{"location":"MIT_missing%26practical_skills/data_wrangling/#lesson-7-mrkleene-mrkleene","title":"lesson 7: Mr.Kleene, Mr.Kleene","text":"<p>A powerful concept in regular expressions is the ability to match an arbitrary number of characters. For example, imagine that you wrote a form that has a donation field that takes a numerical value in dollars. A wealthy user may drop by and want to donate $25,000, while a normal user may want to donate $25. One way to express such a pattern would be use what is known as the Kleene Star and the Kleene Plus, which essentially represents either 0 or more or 1 or more of the character that it follows(it always follows a character or group). For example, to match the donations above, we can use the pattern <code>\\d*</code> to match any number of digits, but a tighter regular expression would be <code>\\d+</code> which ensures that the input string has at least one digit. These quantifiers can be used with any character or special metacharacters, for example <code>a+</code>(one or more a's), <code>[abc]+</code>(one or more of any a, b, or c character) and <code>.*</code> (zero or more of any character).  </p>"},{"location":"MIT_missing%26practical_skills/data_wrangling/#lesson-8-character-optional","title":"lesson 8: Character optional","text":"<p>As you saw in the previous lesson, the Kleene star and plus allow us to match repeated characters in a line. Another quantifier that is really common when matching and extracting text is the <code>?</code>(question mark) metachatacter which denotes optionality. This metacharacter allows you to match either zero or one of the preceding character or group. For example, the pattern <code>ab?c</code> will match either the strings \"abc\" or \"ac\" because the b is considered optional. Similar to the dot metacharacter, the question mark is a special character and you will have to escape it using a slash \\? to match a plain question mark character in a string.  </p>"},{"location":"MIT_missing%26practical_skills/data_wrangling/#lesson-9-all-this-whitespace","title":"Lesson 9: All this whitespace","text":"<p>When dealing with real-world input, such as log files and even user input, it's difficult not to encounter whitespace. We use it to format pieces of information to make it easier to read and scan visually, and a single space can put a wrench into the simplest regular expression. The most common forms of whitespace you will use with regular expressions are the space, the tab(\\t), the new line(\\n) and the carriage returrn (\\r)(useful in Windows environments), and these special characters match each of their respective whitespaces. In addition, a whitespace special character <code>\\s</code> will match any  of the specific whitespaces above and is extremely useful when dealing with raw input text.  </p>"},{"location":"MIT_missing%26practical_skills/data_wrangling/#lesson-10-starting-and-ending","title":"Lesson 10: Starting and ending","text":"<p>write as specific regular expressions as possible to ensure that we don't get false positives when matching against real world text. One way to tighten our patterns is to define a pattern that describes both the start and the end of the line using the special <code>^</code>(hat) and <code>$</code>(dollar) metacharacters. In the example above, we can use the pattern <code>^success</code> to match only a line that begins with the word \"success\", but not the line dollar sign, you create a pattern that matches the whole line completely at the beginning and end.</p>"},{"location":"MIT_missing%26practical_skills/data_wrangling/#lesson-11-match-groups","title":"Lesson 11: Match groups","text":"<p>Regular expression allow us to not just match text but also to extract information for further processing. This is done by defining groups of characters and capturing them using the special parentheses(and) metacharacters. Any subpattern inside a pair of parentheses will be captured as a group. In Practice, this can be used to extract information like phone numbers or emails from all sorts of data. Imagine for example that you had a command line tool to list all the image files you have in the cloud. you could then use a pattern such as <code>^(IMG\\d+\\.png)$</code> to capture and extract the full filename, but if you only wanted to capture the filename without the extension, you could use the pattern <code>^(IMG\\d+)\\.png$</code> which only captures the part before the period.  </p>"},{"location":"MIT_missing%26practical_skills/data_wrangling/#lesson-12-nested-groups","title":"Lesson 12 : Nested groups","text":"<p>When you are working with complex data, you can easily find yourself having to extract multiple layers of information, which can result in nested groups. Generally, the results of the captured groups are in the order in which they are defined(in order by open parenthesis). Take the example from the previous lesson, of capturing the filenames of all the image files you have in a list. If each of these image files had a sequential picture number in the filename, you could extract both the filename and the picture number using the same pattern by writing an expression like <code>^(IMG(\\d+))\\.png$</code>(using a nested parenthesis to capture the digits). The nested groups are read from left to right in the pattern, with the first capture group being the contents of the first parentheses group, etc.  </p>"},{"location":"MIT_missing%26practical_skills/data_wrangling/#lesson-13-more-group-work","title":"Lesson 13: More group work","text":"<p>As you saw in the previous lessons, all the quantifiers including the star*, plus +, repetition {m,n} and the question mark ? can all be used within the capture group patterns. This is the only way to apply quantifiers on sequences of characters instead of the individual characters themselves. For example, if I knew that a phone number may or may not contain an area code, the right pattern would test for the existence of the whole group of digits <code>(\\d{3})?</code> and not the individual characters themselves(which would be wrong).  </p>"},{"location":"MIT_missing%26practical_skills/data_wrangling/#lesson14-its-all-conditional","title":"Lesson14: It's all conditional","text":"<p>As we mentioned before, it's always good to be precise, and that applies to coding, talking, and even regular expressios. For example, you wouldn't write a grocery list for someone to Buy more <code>.*</code> because you would have no idea what you could get back. Instead you would write Buy more milk or Buy more bread, and in regular expressions, we can actually define these conditions explicitly. Specifically when using groups, you can use the <code>|</code> (logical OR,aka. the pipe) to denote different possible sets of characters. In the above example, I can write the pattern \"Buy more(milk|bread|juice)\" to match only the strings Buy more milk, Buy more bread, or Buy more juice.  Like normal groups, you can use any sequence of characters or metacharacters in a condition, for example, <code>([cb]ats*|[dh]ogs?)</code> would match either cats or bats, or, dogs or hogs. Writing patterns with many condition can be hard to read, so you should consider making them separate if they get too complex.  </p>"},{"location":"MIT_missing%26practical_skills/data_wrangling/#lesson15-other-special-characters","title":"Lesson15: Other special characters","text":"<p>This lesson will cover some extra metacharacters, as well as the results of captured groups. We have already learned the most common metacharacters to capture digits using <code>\\d</code>, whitespace using <code>\\s</code>, and alphanumeric letters and digits using <code>\\w</code>, but regular expressions also provides a way of specifying the opposite sets of each of these metacharacters by using their upper case letters. For example,<code>\\D</code> represents any non-digit, <code>\\S</code> any non-whitespace character, and <code>\\W</code> any non-alphanumeric character(such as punctuation). Depending on how you compose your regular expression, it may be easier to use one or the other. Additionally, there is a special metacharacter <code>\\b</code> which matches the boundary between a word and a non-word character. It's most useful in capturing entire words(for example by using the pattern <code>\\w+\\b</code>). One concept that we will not explore in great detail in these lessons is back referencing, mostly because it varies depending on the implementation. However, many systems allow you to reference your captured groups by using <code>\\0</code>(usually the full matched text), <code>\\1</code>(group1), <code>\\2</code>(group 2), etc. This is useful for example when you are in a text editor and doing a search and replace using regular expressions to swap two numbers, you can search for <code>\"(\\d+)-(\\d+)\"</code> and replace it with <code>\"\\2-\\1\"</code> to put the second captured number first, and the first captured number second for example.</p>"},{"location":"MIT_missing%26practical_skills/docker/","title":"Docker","text":""},{"location":"MIT_missing%26practical_skills/docker/#docker-commands","title":"docker commands","text":"<p><code>run</code>-start a container <pre><code>docker run nginx\n</code></pre> <code>ps</code>-list containers <pre><code>docker ps  #list all running containers\n</code></pre> <pre><code>docker ps -a  #list all containers\n</code></pre> <code>stop</code>-stop a container <pre><code>docker ps\ndocker stop silly_sammet\ndocker ps -a\n</code></pre> <code>rm</code>-remove a container <pre><code>docker rm silly_sammet\ndocker ps -a\n</code></pre> <code>images</code>-list images <pre><code>docker images\n</code></pre> <code>rmi</code>-remove images <pre><code>docker rmi nginx\n</code></pre> <code>pull</code>-download an image <pre><code>docker run nginx   # if can't find locally then pull from the repository\ndocker pull nginx\n</code></pre> <code>exec</code>-execute a command <pre><code>docker exec container_name cat /etc/hosts\n</code></pre> <code>run</code>-attach and detach <pre><code>docker run kodekloud/simple-webapp\ndocker run -d kodekloud/simple-webapp\ndocker attach sha_numbers\n</code></pre></p>"},{"location":"MIT_missing%26practical_skills/docker/#docker-run","title":"docker run","text":"<p><code>run</code>-tag <pre><code>docker run redis\ndocker run redis:4.0  #image:tag\n</code></pre> <code>run</code>-port mapping <pre><code>docker run -p 80:5000 kodekloud/simple-webapp  #  host_port:container_port\n</code></pre> <code>run</code>-volume mapping <pre><code>docker run -v /opt/datadir:/var/lib/mysql mysql  # docker_host_address:container_address\n</code></pre> <code>inspect</code> container <pre><code>docker inspect container_name\n</code></pre> container logs <pre><code>docker logs blissful\n</code></pre></p>"},{"location":"MIT_missing%26practical_skills/docker/#docker-environment-variables","title":"docker environment variables","text":"<p>set environment variables <pre><code>docker run -e APP_COLOR=blue simple-webapp-color\ndocker run -e APP_COLOR=green simple-webapp-color\ndocker run -e APP_COLOR=pink simple-webapp-color\n</code></pre> inspect environment variables <pre><code>docker inspect blissful_hopper\n</code></pre></p>"},{"location":"MIT_missing%26practical_skills/docker/#docker-images","title":"docker images","text":"<p>how to create my own image Dockerfile<pre><code>FROM Ubuntu  # 1.OS-Ubuntu\n\nRUN apt-get update  # 2.Update apt repo\nRUN apt-get install python # 3. Install dependencies using apt\n\nRUN pip install flask  # 4. Install python dependencies using pip\nRUN pip install flask-mysql\n\nCOPY . /opt/source-code  # 5. copy source code to /opt folder\n\nENTRYPOINT FLASK_APP=/opt/source-code/app.py flask run  # 6. run the web server using flask command\n</code></pre> <pre><code>docker build Dockerfile -t mmumshad/my-custom-app\ndocker push mmumshad/my-custom-app   # docker registry\n</code></pre> </p>"},{"location":"MIT_missing%26practical_skills/docker/#docker-networking","title":"Docker networking","text":""},{"location":"MIT_missing%26practical_skills/docker/#docker-storage","title":"Docker storage","text":""},{"location":"MIT_missing%26practical_skills/docker/#docker-compose","title":"Docker compose","text":""},{"location":"MIT_missing%26practical_skills/docker/#docker-registry","title":"Docker registry","text":""},{"location":"MIT_missing%26practical_skills/git_learning/","title":"Github \u5165\u95e8\u4e0e\u5b9e\u8df5\u7b14\u8bb0","text":"<p>Note</p> <p>\u8fd9\u7bc7Markdown\u5199\u5728mkdocs\u4e4b\u524d\uff0c\u90e8\u5206\u89c4\u5219\u4e0emkdocs\u6e32\u67d3\u89c4\u5219\u4e0d\u540c\uff0c\u6240\u4ee5\u90e8\u5206\u5185\u5bb9\u663e\u793a\u6709\u4e9b\u5947\u602a, \u6b64mkdocs\u7684Markdown\u8bed\u6cd5\u6709\u4e9b\u4e25\u82db</p>"},{"location":"MIT_missing%26practical_skills/git_learning/#chapter4-git","title":"chapter4 \u901a\u8fc7\u5b9e\u9645\u64cd\u4f5c\u5b66\u4e60Git","text":""},{"location":"MIT_missing%26practical_skills/git_learning/#41","title":"4.1\u57fa\u672c\u64cd\u4f5c","text":"<ul> <li><code>git init</code>\u2014\u2014\u521d\u59cb\u5316\u4ed3\u5e93   \u8981\u4f7f\u7528Git \u8fdb\u884c\u7248\u672c\u7ba1\u7406\uff0c\u5fc5\u987b\u5148\u521d\u59cb\u5316\u4ed3\u5e93\u3002Git \u662f\u4f7f\u7528git init\u547d\u4ee4\u8fdb\u884c\u521d\u59cb\u5316\u7684\u3002\u8bf7\u5b9e\u9645\u5efa\u7acb\u4e00\u4e2a\u76ee\u5f55\u5e76\u521d\u59cb\u5316\u4ed3\u5e93\u3002   <pre><code>$ mkdir git-tutorial\n$ cd git-tutorial\n$ git init\n</code></pre>   \u5982\u679c\u521d\u59cb\u5316\u6210\u529f\uff0c\u6267\u884c\u4e86git init\u547d\u4ee4\u7684\u76ee\u5f55\u4e0b\u5c31\u4f1a\u751f\u6210.git \u76ee\u5f55\u3002\u8fd9.git\u76ee\u5f55\u91cc\u5b58\u50a8\u7740\u7ba1\u7406\u5f53\u524d\u76ee\u5f55\u5185\u5bb9\u6240\u9700\u7684\u4ed3\u5e93\u6570\u636e\u3002\u5728Git \u4e2d\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u76ee\u5f55\u7684\u5185\u5bb9\u79f0\u4e3a\u201c\u9644\u5c5e\u4e8e\u8be5\u4ed3\u5e93\u7684\u5de5\u4f5c\u6811\u201d\u3002\u6587\u4ef6\u7684\u7f16\u8f91\u7b49\u64cd\u4f5c\u5728\u5de5\u4f5c\u6811\u4e2d\u8fdb\u884c\uff0c\u7136\u540e\u8bb0\u5f55\u5230\u4ed3\u5e93\u4e2d\uff0c\u4ee5\u6b64\u7ba1\u7406\u6587\u4ef6\u7684\u5386\u53f2\u5feb\u7167\u3002\u5982\u679c\u60f3\u5c06\u6587\u4ef6\u6062\u590d\u5230\u539f\u5148\u7684\u72b6\u6001\uff0c\u53ef\u4ee5\u4ece\u4ed3\u5e93\u4e2d\u8c03\u53d6\u4e4b\u524d\u7684\u5feb\u7167\uff0c\u5728\u5de5\u4f5c\u6811\u4e2d\u6253\u5f00\u3002</li> <li><code>git status</code>\u2014\u2014\u67e5\u770b\u4ed3\u5e93\u7684\u72b6\u6001</li> <li><code>git add</code>\u2014\u2014\u5411\u6682\u5b58\u533a\u4e2d\u6dfb\u52a0\u6587\u4ef6</li> <li><code>git commit</code>\u2014\u2014\u4fdd\u5b58\u4ed3\u5e93\u7684\u5386\u53f2\u8bb0\u5f55 <code>git commit</code>\u547d\u4ee4\u53ef\u4ee5\u5c06\u5f53\u524d\u6682\u5b58\u533a\u4e2d\u7684\u6587\u4ef6\u5b9e\u9645\u4fdd\u5b58\u5230\u4ed3\u5e93\u7684\u5386\u53f2\u8bb0\u5f55\u4e2d\u3002\u901a\u8fc7\u8fd9\u4e9b\u8bb0\u5f55\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u5de5\u4f5c\u6811\u4e2d\u590d\u539f\u6587\u4ef6\u3002\u8bb0\u8ff0\u4e00\u884c\u63d0\u4ea4\u4fe1\u606f   <pre><code>$ git commit -m \"First commit\"\n</code></pre>   -m \u53c2\u6570\u540e\u7684\"First commit\"\u79f0\u4f5c\u63d0\u4ea4\u4fe1\u606f\uff0c\u662f\u5bf9\u8fd9\u4e2a\u63d0\u4ea4\u7684\u6982\u8ff0\u3002git commit -am \"message\"\u4e00\u6b21\u6027\u5b8c\u6210add \u548ccommit</li> <li><code>git log</code>\u2014\u2014\u67e5\u770b\u63d0\u4ea4\u65e5\u5fd7   \u53ea\u8981\u5728<code>git log</code>\u547d\u4ee4\u540e\u52a0\u4e0a\u76ee\u5f55\u540d\uff0c\u4fbf\u4f1a\u53ea\u663e\u793a\u8be5\u76ee\u5f55\u4e0b\u7684\u65e5\u5fd7\u3002\u5982\u679c\u52a0\u7684\u662f\u6587\u4ef6\u540d\uff0c\u5c31\u4f1a\u53ea\u663e\u793a\u4e0e\u8be5\u6587\u4ef6\u76f8\u5173\u7684\u65e5\u5fd7\u3002     <pre><code>$ git log README.md\n</code></pre></li> <li><code>git diff</code>\u2014\u2014\u67e5\u770b\u66f4\u6539\u524d\u540e\u7684\u5dee\u522b   \u4e0d\u59a8\u517b\u6210\u8fd9\u6837\u4e00\u4e2a\u597d\u4e60\u60ef\uff1a\u5728\u6267\u884c<code>git commit</code>\u547d\u4ee4\u4e4b\u524d\u5148\u6267\u884c<code>git diff HEAD</code>\u547d\u4ee4\uff0c\u67e5\u770b\u672c\u6b21\u63d0\u4ea4\u4e0e\u4e0a\u6b21\u63d0\u4ea4\u4e4b\u95f4\u6709\u4ec0\u4e48\u5dee\u522b\uff0c\u7b49\u786e\u8ba4\u5b8c\u6bd5\u540e\u518d\u8fdb\u884c\u63d0\u4ea4\u3002\u8fd9\u91cc\u7684HEAD \u662f\u6307\u5411\u5f53\u524d\u5206\u652f\u4e2d\u6700\u65b0\u4e00\u6b21\u63d0\u4ea4\u7684\u6307\u9488\u3002</li> </ul>"},{"location":"MIT_missing%26practical_skills/git_learning/#42","title":"4.2 \u5206\u652f\u7684\u64cd\u4f5c","text":"<ul> <li><code>git branch</code>\u2014\u2014\u663e\u793a\u5206\u652f\u4e00\u89c8\u8868</li> <li> <p><code>git checkout -b</code>\u2014\u2014\u521b\u5efa\u3001\u5207\u6362\u5206\u652f</p> <p>\u5b9e\u9645\u4e0a\uff0c\u8fde\u7eed\u6267\u884c\u4e0b\u9762\u4e24\u6761\u547d\u4ee4\u4e5f\u80fd\u6536\u5230\u540c\u6837\u6548\u679c\u3002 <pre><code>$ git branch feature-A\n$ git checkout feature-A\n</code></pre></p> </li> <li> <p><code>git merge</code>\u2014\u2014\u5408\u5e76\u5206\u652f</p> <p>\u7136\u540e\u5408\u5e76feature-A \u5206\u652f\u3002\u4e3a\u4e86\u5728\u5386\u53f2\u8bb0\u5f55\u4e2d\u660e\u786e\u8bb0\u5f55\u4e0b\u672c\u6b21\u5206\u652f\u5408\u5e76\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u5408\u5e76\u63d0\u4ea4\u3002\u56e0\u6b64\uff0c\u5728\u5408\u5e76\u65f6\u52a0\u4e0a--no-ff\u53c2\u6570\u3002 <pre><code>$ git checkout master\n$ git merge --no-ff feature-A\n</code></pre></p> </li> <li> <p><code>git log --graph</code>\u2014\u2014\u4ee5\u56fe\u8868\u5f62\u5f0f\u67e5\u770b\u5206\u652f</p> <p>git log --graph\u547d\u4ee4\u53ef\u4ee5\u7528\u56fe\u8868\u5f62\u5f0f\u8f93\u51fa\u63d0\u4ea4\u65e5\u5fd7\uff0c\u975e\u5e38\u76f4\u89c2\uff0c\u8bf7\u5927\u5bb6\u52a1\u5fc5\u8bb0\u4f4f.</p> </li> </ul>"},{"location":"MIT_missing%26practical_skills/git_learning/#43","title":"4.3 \u66f4\u6539\u63d0\u4ea4\u7684\u64cd\u4f5c","text":"<ul> <li> <p><code>git reset</code>\u2014\u2014\u56de\u6eaf\u5386\u53f2\u7248\u672c</p> <p>\u8981\u8ba9\u4ed3\u5e93\u7684HEAD\u3001\u6682\u5b58\u533a\u3001\u5f53\u524d\u5de5\u4f5c\u6811\u56de\u6eaf\u5230\u6307\u5b9a\u72b6\u6001\uff0c\u9700\u8981\u7528\u5230<code>git rest --hard</code>\u547d\u4ee4\u3002\u53ea\u8981\u63d0\u4f9b\u76ee\u6807\u65f6\u95f4\u70b9\u7684\u54c8\u5e0c\u503cA\uff0c\u5c31\u53ef\u4ee5\u5b8c\u5168\u6062\u590d\u81f3\u8be5\u65f6\u95f4\u70b9\u7684\u72b6\u6001\u3002 <pre><code>$ git reset --hard fd0cbf0d4a25f747230694d95cac1be72d33441d HEAD is now at fd0cbf0 Add index\n</code></pre></p> <p>\u6211\u4eec\u5df2\u7ecf\u6210\u529f\u56de\u6eaf\u5230\u7279\u6027\u5206\u652f\uff08feature-A\uff09\u521b\u5efa\u4e4b\u524d\u7684\u72b6\u6001\u3002\u7531\u4e8e\u6240\u6709\u6587\u4ef6\u90fd\u56de\u6eaf\u5230\u4e86\u6307\u5b9a\u54c8\u5e0c\u503c\u5bf9\u5e94\u7684\u65f6\u95f4\u70b9\u4e0a\uff0cREADME.md \u6587\u4ef6\u7684\u5185\u5bb9\u4e5f\u6062\u590d\u5230\u4e86\u5f53\u65f6\u7684\u72b6\u6001\u3002</p> </li> <li> <p><code>git reflog</code>\u2014\u2014\u67e5\u770b\u5f53\u524d\u4ed3\u5e93\u7684\u64cd\u4f5c\u65e5\u5fd7\u3002</p> <p>\u5728\u65e5\u5fd7\u4e2d\u627e\u51fa\u56de\u6eaf\u5386\u53f2\u4e4b\u524d\u7684 \u54c8\u5e0c\u503c\uff0c\u901a\u8fc7git reset --hard\u547d\u4ee4\u6062\u590d\u5230\u56de\u6eaf\u5386\u53f2\u524d\u7684\u72b6\u6001\u3002</p> </li> </ul>"},{"location":"MIT_missing%26practical_skills/git_learning/#44","title":"4.4 \u63a8\u9001\u81f3\u8fdc\u7a0b\u4ed3\u5e93","text":"<ul> <li> <p><code>git remote add</code>\u2014\u2014\u6dfb\u52a0\u8fdc\u7a0b\u4ed3\u5e93</p> <p>\u8fdc\u7a0b\u4ed3\u5e93\u987e\u540d\u601d\u4e49\uff0c\u662f\u4e0e\u6211\u4eec\u672c\u5730\u4ed3\u5e93\u76f8\u5bf9\u72ec\u7acb\u7684\u53e6\u4e00\u4e2a\u4ed3\u5e93\u3002\u8ba9\u6211\u4eec\u5148\u5728GitHub \u4e0a\u521b\u5efa\u4e00\u4e2a\u4ed3\u5e93\uff0c\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a\u672c\u5730\u4ed3\u5e93\u7684\u8fdc\u7a0b\u4ed3\u5e93\u3002\u4e3a\u9632\u6b62\u4e0e\u5176\u4ed6\u4ed3\u5e93\u6df7\u6dc6\uff0c\u4ed3\u5e93\u540d\u8bf7\u4e0e\u672c\u5730\u4ed3\u5e93\u4fdd\u6301\u4e00\u81f4 \u5728GitHub \u4e0a\u521b\u5efa\u7684\u4ed3\u5e93\u8def\u5f84\u4e3a\u201cgit@github.com:\u7528\u6237\u540d/git-tutorial.git\u201d\u3002\u73b0\u5728\u6211\u4eec\u7528git remote add\u547d\u4ee4\u5c06\u5b83\u8bbe\u7f6e\u6210\u672c\u5730\u4ed3\u5e93\u7684\u8fdc\u7a0b\u4ed3\u5e93A</p> <pre><code>$ git remote add origin git@github.com:github-book/git-tutorial.git\n</code></pre> <p>\u6309\u7167\u4e0a\u8ff0\u683c\u5f0f\u6267\u884cgit remote add\u547d\u4ee4\u4e4b\u540e\uff0cGit \u4f1a\u81ea\u52a8\u5c06git@github.com:github-book/git-tutorial.git\u8fdc\u7a0b\u4ed3\u5e93\u7684\u540d\u79f0\u8bbe\u7f6e\u4e3aorigin\uff08\u6807\u8bc6\u7b26\uff09\u3002</p> </li> <li> <p><code>git push</code>\u2014\u2014\u63a8\u9001\u81f3\u8fdc\u7a0b\u4ed3\u5e93</p> <ul> <li><code>$ git push -u origin master</code> \u50cf\u8fd9\u6837\u6267\u884cgit push\u547d\u4ee4\uff0c\u5f53\u524d\u5206\u652f\u7684\u5185\u5bb9\u5c31\u4f1a\u88ab\u63a8\u9001\u7ed9\u8fdc\u7a0b\u4ed3\u5e93origin \u7684master \u5206\u652f\u3002-u\u53c2\u6570\u53ef\u4ee5\u5728\u63a8\u9001\u7684\u540c\u65f6\uff0c\u5c06origin \u4ed3\u5e93\u7684master \u5206\u652f\u8bbe\u7f6e\u4e3a\u672c\u5730\u4ed3\u5e93\u5f53\u524d\u5206\u652f\u7684upstream\uff08\u4e0a\u6e38\uff09\u3002\u6dfb\u52a0\u4e86\u8fd9\u4e2a\u53c2\u6570\uff0c\u5c06\u6765\u8fd0\u884cgit pull\u547d\u4ee4\u4ece\u8fdc\u7a0b\u4ed3\u5e93\u83b7\u53d6\u5185\u5bb9\u65f6\uff0c\u672c\u5730\u4ed3\u5e93\u7684\u8fd9\u4e2a\u5206\u652f\u5c31\u53ef\u4ee5\u76f4\u63a5\u4eceorigin \u7684master \u5206\u652f\u83b7\u53d6\u5185\u5bb9\uff0c\u7701\u53bb\u4e86\u53e6\u5916\u6dfb\u52a0\u53c2\u6570\u7684\u9ebb\u70e6\u3002</li> <li>\u63a8\u9001\u81f3master \u4ee5\u5916\u7684\u5206\u652f\u9664\u4e86master \u5206\u652f\u4e4b\u5916\uff0c\u8fdc\u7a0b\u4ed3\u5e93\u4e5f\u53ef\u4ee5\u521b\u5efa\u5176\u4ed6\u5206\u652f\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u5728\u672c\u5730\u4ed3\u5e93\u4e2d\u521b\u5efafeature-D \u5206\u652f\uff0c\u5e76\u5c06\u5b83\u4ee5\u540c\u540d\u5f62\u5f0fpush \u81f3\u8fdc\u7a0b\u4ed3\u5e93\u3002        <pre><code>$ git checkout -b feature-D\n$ git push -u origin feature-D\n</code></pre>       \u73b0\u5728\uff0c\u5728\u8fdc\u7a0b\u4ed3\u5e93\u7684GitHub \u9875\u9762\u5c31\u53ef\u4ee5\u67e5\u770b\u5230feature-D \u5206\u652f\u4e86\u3002</li> </ul> </li> </ul>"},{"location":"MIT_missing%26practical_skills/git_learning/#45","title":"4.5 \u4ece\u8fdc\u7a0b\u4ed3\u5e93\u83b7\u53d6","text":"<ul> <li><code>git clone</code>\u2014\u2014\u83b7\u53d6\u8fdc\u7a0b\u4ed3\u5e93<ul> <li>\u83b7\u53d6\u8fdc\u7a0b\u4ed3\u5e93   <pre><code>$ git clone git@github.com:github-book/git-tutorial.git\n</code></pre>   \u6267\u884cgit clone\u547d\u4ee4\u540e\u6211\u4eec\u4f1a\u9ed8\u8ba4\u5904\u4e8emaster \u5206\u652f\u4e0b\uff0c\u540c\u65f6\u7cfb\u7edf\u4f1a\u81ea\u52a8\u5c06origin \u8bbe\u7f6e\u6210\u8be5\u8fdc\u7a0b\u4ed3\u5e93\u7684\u6807\u8bc6\u7b26\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u524d\u672c\u5730\u4ed3\u5e93\u7684master \u5206\u652f\u4e0eGitHub \u7aef\u8fdc\u7a0b\u4ed3\u5e93\uff08origin\uff09\u7684master \u5206\u652f\u5728\u5185\u5bb9\u4e0a\u662f\u5b8c\u5168\u76f8\u540c\u7684\u3002</li> <li>\u83b7\u53d6\u8fdc\u7a0b\u7684feature-D \u5206\u652f   <pre><code>$ git checkout -b feature-D origin/feature-D\n</code></pre>   -b \u53c2\u6570\u7684\u540e\u9762\u662f\u672c\u5730\u4ed3\u5e93\u4e2d\u65b0\u5efa\u5206\u652f\u7684\u540d\u79f0\u3002\u4e3a\u4e86\u4fbf\u4e8e\u7406\u89e3\uff0c\u6211\u4eec\u4ecd\u5c06\u5176\u547d\u540d\u4e3afeature-D\uff0c\u8ba9\u5b83\u4e0e\u8fdc\u7a0b\u4ed3\u5e93\u7684\u5bf9\u5e94\u5206\u652f\u4fdd\u6301\u540c\u540d\u3002\u65b0\u5efa\u5206\u652f\u540d\u79f0\u540e\u9762\u662f\u83b7\u53d6\u6765\u6e90\u7684\u5206\u652f\u540d\u79f0\u3002\u4f8b\u5b50\u4e2d\u6307\u5b9a\u4e86origin/feature-D\uff0c\u5c31\u662f\u8bf4\u4ee5\u540d\u4e3aorigin \u7684\u4ed3\u5e93\uff08\u8fd9\u91cc\u6307GitHub \u7aef\u7684\u4ed3\u5e93\uff09\u7684feature-D \u5206\u652f\u4e3a\u6765\u6e90\uff0c\u5728\u672c\u5730\u4ed3\u5e93\u4e2d\u521b\u5efafeature-D \u5206\u652f\u3002</li> <li>\u5411\u672c\u5730\u7684feature-D \u5206\u652f\u63d0\u4ea4\u66f4\u6539   <pre><code> $ git commit -am \"Add feature-D\"\n</code></pre></li> <li>\u63a8\u9001feature-D \u5206\u652f   <pre><code> $ git push\n</code></pre>   \u4ece\u8fdc\u7a0b\u4ed3\u5e93\u83b7\u53d6feature-D \u5206\u652f\uff0c\u5728\u672c\u5730\u4ed3\u5e93\u4e2d\u63d0\u4ea4\u66f4\u6539\uff0c\u518d\u5c06feature-D \u5206\u652f\u63a8\u9001\u56de\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u901a\u8fc7\u8fd9\u4e00\u7cfb\u5217\u64cd\u4f5c\uff0c\u5c31\u53ef\u4ee5\u4e0e\u5176\u4ed6\u5f00\u53d1\u8005\u76f8\u4e92\u5408\u4f5c\uff0c\u5171\u540c\u57f9\u80b2feature-D \u5206\u652f\uff0c\u5b9e\u73b0\u67d0\u4e9b\u529f\u80fd\u3002</li> </ul> </li> <li><code>git pull</code>\u2014\u2014\u83b7\u53d6\u6700\u65b0\u7684\u8fdc\u7a0b\u4ed3\u5e93\u5206\u652f <pre><code> $ git pull origin feature-D\n</code></pre>   GitHub \u7aef\u8fdc\u7a0b\u4ed3\u5e93\u4e2d\u7684feature-D \u5206\u652f\u662f\u6700\u65b0\u72b6\u6001\uff0c\u6240\u4ee5\u672c\u5730\u4ed3\u5e93\u4e2d\u7684feature-D \u5206\u652f\u5c31\u5f97\u5230\u4e86\u66f4\u65b0\u3002\u4eca\u540e\u53ea\u9700\u8981\u50cf\u5e73\u5e38\u4e00\u6837\u5728\u672c\u5730\u8fdb\u884c\u63d0\u4ea4\u518dpush \u7ed9\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u5c31\u53ef\u4ee5\u4e0e\u5176\u4ed6\u5f00\u53d1\u8005\u540c\u65f6\u5728\u540c\u4e00\u4e2a\u5206\u652f\u4e2d\u8fdb\u884c\u4f5c\u4e1a\uff0c\u4e0d\u65ad\u7ed9feature-D \u589e\u52a0\u65b0\u529f\u80fd\u3002</li> </ul>"},{"location":"MIT_missing%26practical_skills/git_learning/#chapter6-pull-request","title":"Chapter6 \u5c1d\u8bd5Pull Request","text":""},{"location":"MIT_missing%26practical_skills/git_learning/#61-pull-request","title":"6.1 Pull Request \u7684\u6982\u8981","text":"<ul> <li>\u4ec0\u4e48\u662f Pull Request   \u9996\u5148\u6211\u4eec\u6765\u7406\u89e3\u4ec0\u4e48\u662fPull Request\u3002Pull Request \u662f\u81ea\u5df1\u4fee\u6539\u6e90\u4ee3\u7801\u540e\uff0c\u8bf7\u6c42\u5bf9\u65b9\u4ed3\u5e93\u91c7\u7eb3\u8be5\u4fee\u6539\u65f6\u91c7\u53d6\u7684\u4e00\u79cd\u884c\u4e3a\u3002</li> </ul>"},{"location":"MIT_missing%26practical_skills/git_learning/#62-pull-request","title":"6.2 \u53d1\u9001Pull Request \u524d\u7684\u51c6\u5907","text":"<ul> <li>Fork\uff08Github\u7f51\u9875\u4e0a\uff09</li> <li>clone   <pre><code>$ git clone git@github.com:hirocastest/first-pr.git\n$ cd first-pr\n</code></pre>   first-pr \u76ee\u5f55\u4e0b\u4f1a\u751f\u6210Git \u4ed3\u5e93\u3002\u8fd9\u4e2a\u4ed3\u5e93\u4e0e\u6211\u4eecGitHub \u8d26\u6237\u4e0bfirst-pr \u4ed3\u5e93\u72b6\u6001\u76f8\u540c\u3002\u73b0\u5728\u53ea\u8981\u5728\u8fd9\u4e2a\u4ed3\u5e93\u4e2d\u4fee\u6539\u6e90\u4ee3\u7801\u8fdb\u884cpush\uff0cGitHub \u8d26\u6237\u4e2d\u7684\u4ed3\u5e93\u5c31\u4f1a\u88ab\u4fee\u6539\u3002</li> <li>branch \u521b\u5efa\u7279\u6027\u5206\u652f   <pre><code> git checkout -b work\n</code></pre></li> <li>\u63d0\u4ea4\u4fee\u6539   <pre><code>$ git add index.html\n$ git commit -m \"Add my impression\"\n</code></pre></li> <li>\u521b\u5efa\u8fdc\u7a0b\u5206\u652f   \u8981\u4eceGitHub \u53d1\u9001Pull Request\uff0cGitHub \u7aef\u7684\u4ed3\u5e93\u4e2d\u5fc5\u987b\u6709\u4e00\u4e2a\u5305\u542b\u4e86\u4fee\u6539\u540e\u4ee3\u7801\u7684\u5206\u652f\u3002\u6211\u4eec\u73b0\u5728\u5c31\u6765\u521b\u5efa\u672c\u5730work \u5206\u652f\u7684\u76f8\u5e94\u8fdc\u7a0b\u5206\u652f\u3002   <pre><code>$ git push origin work\n</code></pre></li> </ul>"},{"location":"MIT_missing%26practical_skills/git_learning/#63-pull-request","title":"6.3 \u53d1\u9001Pull Request","text":"<ul> <li>\u767b\u5f55GitHub \u5e76\u5207\u6362\u81f3work \u5206\u652f\u3002\u70b9\u51fb\u5206\u652f\u540d\u5de6\u4fa7\u7684\u7eff\u8272\u6309\u94ae\uff0c\u4f1a\u8df3\u8f6c\u81f3\u67e5\u770b\u5206\u652f\u95f4\u5dee\u522b\u7684\u9875\u9762\uff08\u56fe6.4\uff09\u3002\u8bf7\u5728\u8fd9\u91cc\u901a\u8fc7\u5dee\u522b\u67e5\u770b\u521a\u521a\u8fdb\u884c\u7684\u66f4\u6539\u662f\u5426\u6b63\u786e\u3002\u8fd9\u91cc\u663e\u793a\u7684\u4e1c\u897f\u5c31\u662f\u6211\u4eec\u672c\u6b21Pull Request \u4e2d\u5305\u542b\u7684\u63d0\u4ea4\u3002\u786e\u8ba4\u60f3\u8981\u53d1\u9001\u7684Pull Request \u7684\u5185\u5bb9\u5dee\u522b\u65e0\u8bef\u540e\uff0c\u8bf7\u70b9\u51fbCreate PullRequest\u3002\u786e\u8ba4\u6ca1\u6709\u95ee\u9898\u540e\uff0c\u70b9\u51fbSend pull request \u6309\u94ae\u3002\u8fd9\u6837\u4e00\u6765\uff0cPull Request \u7684\u76ee\u6807\u4ed3\u5e93\u4e2d\u5c31\u4f1a\u65b0\u5efaPull Request \u548cIssue\uff0c\u540c\u65f6\u8be5\u4ed3\u5e93\u7684\u7ba1\u7406\u8005\u4f1a\u63a5\u5230\u901a\u77e5\u3002</li> </ul>"},{"location":"MIT_missing%26practical_skills/git_learning/#65","title":"6.5 \u4ed3\u5e93\u7684\u7ef4\u62a4","text":"<p>Fork \u6216clone \u6765\u7684\u4ed3\u5e93\uff0c\u4e00\u65e6\u653e\u7f6e\u4e0d\u7ba1\u5c31\u4f1a\u79bb\u6700\u65b0\u7684\u6e90\u4ee3\u7801\u8d8a\u6765\u8d8a\u8fdc\u3002\u5982\u679c\u4e0d\u4ee5\u6700\u65b0\u7684\u6e90\u4ee3\u7801\u4e3a\u57fa\u7840\u8fdb\u884c\u5f00\u53d1\uff0c\u52b3\u795e\u8d39\u529b\u5730\u7f16\u5199\u4ee3\u7801\u4e5f\u5f88\u53ef\u80fd\u662f\u767d\u8d39\u529b\u6c14\u3002\u4e0b\u9762\u5c31\u8ba9\u6211\u4eec\u5b66\u4e60\u5982\u4f55\u8ba9\u4ed3\u5e93\u4fdd\u6301\u6700\u65b0\u72b6\u6001\u3002\u901a\u5e38\u6765\u8bf4clone \u6765\u7684\u4ed3\u5e93\u5b9e\u9645\u4e0a\u4e0e\u539f\u4ed3\u5e93\u5e76\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06\u539f\u4ed3\u5e93\u8bbe\u7f6e\u4e3a\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u4ece\u8be5\u4ed3\u5e93\u83b7\u53d6\uff08fetch\uff09\u6570\u636e\u4e0e\u672c\u5730\u4ed3\u5e93\u8fdb\u884c\u5408\u5e76\uff08merge\uff09\uff0c\u8ba9\u672c\u5730\u4ed3\u5e93\u7684\u6e90\u4ee3\u7801\u4fdd\u6301\u6700\u65b0\u72b6\u6001\u3002</p> <ul> <li>\u4ed3\u5e93\u7684 Fork \u4e0e clone   \u5c06octocat/Spoon-Knife \u4f5c\u4e3a\u539f\u4ed3\u5e93\uff0c\u5728GitHub \u4e0a\u8fdb\u884cFork\uff0c\u7136\u540eclone\u3002   <pre><code>$ git clone git@github.com:hirocastest/Spoon-Knife.git\n$ cd Spoon-Knife\n</code></pre></li> <li>\u7ed9\u539f\u4ed3\u5e93\u8bbe\u7f6e\u540d\u79f0   \u6211\u4eec\u7ed9\u539f\u4ed3\u5e93\u8bbe\u7f6eupstream \u7684\u540d\u79f0\uff0c\u5c06\u5176\u4f5c\u4e3a\u8fdc\u7a0b\u4ed3\u5e93\u3002   <pre><code>$ git remote add upstream git://github.com/octocat/Spoon-Knife.git\n</code></pre>   \u4eca\u540e\uff0c\u6211\u4eec\u7684\u8fd9\u4e2a\u4ed3\u5e93\u5c06\u4ee5upstream \u4f5c\u4e3a\u539f\u4ed3\u5e93\u7684\u6807\u8bc6\u7b26\u3002\u8fd9\u4e2a\u73af\u5883\u4e0b\u53ea\u9700\u8981\u8bbe\u5b9a\u4e00\u6b21\u3002</li> <li>\u83b7\u53d6\u6700\u65b0\u6570\u636e   <pre><code>$ git fetch upstream From git://github.com/octocat/Spoon-Knife * [new branch] master -&gt; upstream/master\n$ git merge upstream/master &gt; Already up-to-date.\n</code></pre>    \u6211\u4eec\u901a\u8fc7 <code>git fetch</code> \u547d\u4ee4\u83b7\u53d6\u6700\u65b0\u7684\u6570\u636e\uff0c\u5c06upstream/master \u5206\u652f\u4e0e\u5f53\u524d\u5206\u652f\uff08master\uff09\u5408\u5e76\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5f53\u524d\u5206\u652f\uff08master\uff09\u5c31\u83b7\u5f97\u4e86\u6700\u65b0\u7684\u6e90\u4ee3\u7801\u3002\u5404\u4f4d\u5728\u521b\u5efa\u7279\u6027\u5206\u652f\uff0c\u7f16\u8f91\u6e90\u4ee3\u7801\u4e4b\u524d\uff0c\u5efa\u8bae\u5148\u5c06\u4ed3\u5e93\u66f4\u65b0\u5230\u8fd9\u4e00\u72b6\u6001\u3002\u4e00\u822c\u60c5\u51b5\u4e0bmaster \u5206\u652f\u90fd\u4f1a\u83b7\u53d6\u6700\u65b0\u4ee3\u7801\uff0c\u5f88\u5c11\u9700\u8981Fork \u7684\u5f00\u53d1\u8005\u4eb2\u81ea\u8fdb\u884c\u4fee\u6b63\u3002</li> </ul>"},{"location":"MIT_missing%26practical_skills/git_learning/#chapter-7-pull-request","title":"Chapter 7 \u63a5\u6536pull request","text":""},{"location":"MIT_missing%26practical_skills/git_learning/#72-pull-request","title":"7.2 \u91c7\u7eb3pull request\u524d\u7684\u51c6\u5907","text":"<p>\u5728\u672c\u5730\u5f00\u53d1\u73af\u5883\u4e2d\u53cd\u6620 Pull Request\u7684\u5185\u5bb9 \u4e0b\u9762\u6211\u4eec\u6765\u8bb2\u89e3\u6536\u5230Pull Request \u540e\u5728\u672c\u5730\u5f00\u53d1\u73af\u5883\u4e2d\u8fdb\u884c\u5b9e\u9645\u68c0\u67e5\u7684\u6d41\u7a0b\u3002\u5728\u672c\u793a\u4f8b\u4e2d\uff0cPull Request \u63a5\u6536\u65b9\u7684\u7528\u6237\u540d\u4e3aituring\uff0c\u53d1\u9001\u65b9\u7684\u7528\u6237\u540d\u4e3a\u201cPR \u53d1\u9001\u8005\u201d\u3002</p> <ul> <li> <p>\u5c06\u63a5\u6536\u65b9\u7684\u672c\u5730\u4ed3\u5e93\u66f4\u65b0\u81f3\u6700\u65b0\u72b6\u6001</p> <p>\u9996\u5148\uff0c\u5c06Pull Request \u63a5\u6536\u65b9\u7684\u4ed3\u5e93clone \u5230\u672c\u5730\u5f00\u53d1\u73af\u5883\u4e2d\uff0c\u5982\u679c\u5df2\u7ecfclone \u8fc7\uff0c\u90a3\u4e48\u8bf7\u8fdb\u884cpull \u7b49\u64cd\u4f5c\u66f4\u65b0\u81f3\u6700\u65b0\u72b6\u6001\u3002 <pre><code>$ git clone git@github.com:ituring/first-pr.git\n$ cd first-pr\n</code></pre></p> </li> <li> <p>\u83b7\u53d6\u53d1\u9001\u65b9\u7684\u8fdc\u7a0b\u4ed3\u5e93</p> <p>\u5c06Pull Request \u53d1\u9001\u65b9\u7684\u4ed3\u5e93\u8bbe\u7f6e\u4e3a\u672c\u5730\u4ed3\u5e93\u7684\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u83b7\u53d6\u53d1\u9001\u65b9\u4ed3\u5e93\u7684\u6570\u636e <pre><code>$ git remote add PR\u53d1\u9001\u8005 git@github.com:PR\u53d1\u9001\u8005/first-pr.git\n$ git fetch PR\u53d1\u9001\u8005\n</code></pre> \u73b0\u5728\u6211\u4eec\u83b7\u53d6\u4e86Pull Request \u53d1\u9001\u65b9\u4ed3\u5e93\u4ee5\u53ca\u5206\u652f\u7684\u6570\u636e</p> </li> <li> <p>\u521b\u5efa\u7528\u4e8e\u68c0\u67e5\u7684\u5206\u652f</p> <p>\u524d\u9762\u6211\u4eec\u53ea\u83b7\u53d6\u4e86\u8fdc\u7a0b\u4ed3\u5e93\u7684\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u5c1a\u672a\u53cd\u6620\u5728\u4efb\u4f55\u4e00\u4e2a\u5206\u652f\u4e2d\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5206\u652f\uff0c\u7528\u6765\u6a21\u62df\u91c7\u7eb3Pull Request \u540e\u7684\u72b6\u6001\u3002\u7531\u4e8e\u8fd9\u662f\u6211\u4eec\u7b2c\u4e00\u4e2aPull Request\uff0c\u5206\u652f\u540d\u5c31\u53ebpr1\u3002 <pre><code>$ git checkout -b pr1\n</code></pre></p> </li> <li> <p>\u5408\u5e76</p> <p>\u4e0b\u9762\u8981\u5c06\u5df2\u7ecffetch \u5b8c\u6bd5\u7684\u201cPR \u53d1\u9001\u8005/work\u201d\u7684\u4fee\u6539\u5185\u5bb9\u4e0epr1\u5206\u652f\u8fdb\u884c\u5408\u5e76\u3002 <pre><code>$ git merge PR\u53d1\u9001\u8005/work\n</code></pre> \u8fd9\u6837\u4e00\u6765\uff0cpr1 \u5206\u652f\u4e2d\u5c31\u52a0\u5165\u4e86\u201cPR \u53d1\u9001\u8005/work\u201d\u5206\u652f\u7684\u4fee\u6539\u5185\u5bb9\u3002</p> </li> <li> <p>\u5220\u9664\u5206\u652f</p> <p>\u68c0\u67e5\u7ed3\u675f\u540epr1 \u5206\u652f\u5c31\u6ca1\u7528\u4e86\uff0c\u53ef\u4ee5\u76f4\u63a5\u5220\u9664\u3002\u6211\u4eec\u5207\u6362\u81f3pr1 \u4e4b\u5916\u7684\u5206\u652f\uff0c\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801\u3002 <pre><code>$ git branch -D pr1\n</code></pre></p> </li> </ul>"},{"location":"MIT_missing%26practical_skills/git_learning/#73-pull-request","title":"7.3 \u91c7\u7eb3pull request","text":"<ul> <li>\u5b8c\u6210\u4e0a\u8ff0\u5185\u5bb9\u540e\uff0c\u5982\u679cPull Request \u7684\u5185\u5bb9\u6ca1\u6709\u95ee\u9898\uff0c\u5927\u53ef\u6253\u5f00\u6d4f\u89c8\u5668\u627e\u51fa\u76f8\u5e94\u7684Pull Request \u9875\u9762\uff0c\u70b9\u51fbMerge pull request \u6309\u94ae\uff0c\u968f\u540ePull Request \u7684\u5185\u5bb9\u4f1a\u81ea\u52a8\u5408\u5e76\u81f3\u4ed3\u5e93</li> </ul>"},{"location":"MIT_missing%26practical_skills/git_learning/#95-github-flow","title":"9.5 \u6a21\u62df\u4f53\u9a8cGitHub flow","text":"<ul> <li> <p>\u6dfb\u52a0\u65b0\u529f\u80fd\uff0c\u521b\u5efa\u65b0\u7684\u5206\u652f</p> <ul> <li> <p>\u5982\u679c\u5c1a\u672aclone \u4ed3\u5e93   <pre><code>$ git clone git@github.com:ituring/fizzbuzz.git\n$ cd fizzbuzz\n</code></pre></p> </li> <li> <p>\u5982\u679c\u4e4b\u524dclone \u8fc7\u4ed3\u5e93   <pre><code>$ git checkout master\n$ git pull\n</code></pre></p> </li> </ul> </li> <li> <p>\u521b\u5efa\u7279\u6027\u5206\u652f   <pre><code>$ git checkout -b 7-case-output-github\n$ git push -u origin 7-case-output-github\n</code></pre></p> </li> <li> <p>\u5b9e\u73b0\u65b0\u529f\u80fd(\u5728\u7279\u6027\u5206\u652f\u4e2d\u4f5c\u51fa\u4fee\u6539)   <pre><code>$ git commit -am \"Add output GitHub\"\n$ git push\n</code></pre></p> </li> <li>\u521b\u5efa Pull Request</li> </ul> <p>\u672c\u7b14\u8bb0\u6458\u8981\u53c2\u8003\u7684GitHub\u5165\u95e8\u4e0e\u5b9e\u8df5 \u53e6\u5916\u9644\u52a0some reference website Git-book Git learn git branching Github \u5feb\u901f\u5165\u95e8</p>"},{"location":"MIT_missing%26practical_skills/markdown_tutorial/","title":"this is a practice for learning markdown","text":""},{"location":"MIT_missing%26practical_skills/markdown_tutorial/#markdown","title":"markdown\u6807\u9898\u8bed\u6cd5","text":""},{"location":"MIT_missing%26practical_skills/markdown_tutorial/#heading-level-1","title":"Heading level 1","text":""},{"location":"MIT_missing%26practical_skills/markdown_tutorial/#heading-lever-2","title":"Heading lever 2","text":""},{"location":"MIT_missing%26practical_skills/markdown_tutorial/#heading-lever-3","title":"Heading lever 3","text":""},{"location":"MIT_missing%26practical_skills/markdown_tutorial/#heading-lever-4","title":"Heading lever 4","text":""},{"location":"MIT_missing%26practical_skills/markdown_tutorial/#heading-lever-5","title":"Heading lever 5","text":""},{"location":"MIT_missing%26practical_skills/markdown_tutorial/#heading-lever-6","title":"Heading lever 6","text":""},{"location":"MIT_missing%26practical_skills/markdown_tutorial/#markdown_1","title":"markdown \u6bb5\u843d\u8bed\u6cd5","text":"<p>\u7a7a\u884c\u4e14\u6bb5\u9996\u4e0d\u8981\u7a7a\u683c I really like using markdown.</p> <p>I think I'll use it to format all of my documents from now on. Don't put tabs or spaces in front of your paragraphs</p> <p>Keep lines left-aligned like this</p>"},{"location":"MIT_missing%26practical_skills/markdown_tutorial/#markdown_2","title":"Markdown\u6362\u884c\u8bed\u6cd5","text":"<p>\u5728\u4e00\u884c\u672b\u5c3e\u6dfb\u52a0\u4e24\u4e2a\u6216\u591a\u4e2a\u7a7a\u683c\uff0c\u7136\u540e\u56de\u8f66\u952e\uff0c\u5373\u53ef\u521b\u5efa\u4e00\u4e2a\u6362\u884c\uff1b\u81f3\u5c11\u6709\u4e24\u79cd\u8f7b\u91cf\u7ea7\u6807\u8bb0\u8bed\u8a00\u652f\u6301\u65e0\u9700\u5728\u884c\u5c3e\u6dfb\u52a0\u4efb\u4f55\u5185\u5bb9\uff0c\u53ea\u9700\u952e\u5165\u56de\u8f66\u952e\uff08return\uff09\u5373\u53ef\u5b9e\u73b0\u6362\u884c This is the first line. And this is the second line</p>"},{"location":"MIT_missing%26practical_skills/markdown_tutorial/#markdown_3","title":"Markdown \u5f3a\u8c03\u8bed\u6cd5","text":"<p>\u7c97\u4f53\uff08bold)\u5728\u5355\u8bcd\u6216\u77ed\u8bed\u524d\u540e\u5404\u6dfb\u52a0\u4e24\u4e2a\u661f\u53f7cd I just love bold text. loveisbold \u659c\u4f53\u5728\u5355\u8bcd\u77ed\u8bed\u524d\u540e\u6dfb\u52a0\u4e00\u4e2a\u661f\u53f7 Italicized text is the *cat's meow Acatmeow \u7c97\u659c\u4f53\u5355\u8bcd\u6216\u77ed\u8bed\u524d\u5404\u6dfb\u52a0\u4e09\u4e2a\u661f\u53f7 This text is really important. This is really very imporant</p>"},{"location":"MIT_missing%26practical_skills/markdown_tutorial/#markdown_4","title":"markdown \u5f15\u7528\u8bed\u6cd5","text":"<p>\u521b\u5efa\u5757\u5f15\u7528\uff0c\u5728\u6bb5\u843d\u524d\u6dfb\u52a0\u4e00\u4e2a<code>&gt;</code>\u7b26\u53f7</p> <p>Dorothy followed her though many of the beautiful rooms in her castle.</p> <p>\u591a\u4e2a\u6bb5\u843d\u7684\u5757\u5f15\u7528,\u5757\u5f15\u7528\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u6bb5\u843d\u3002\u4e3a\u6bb5\u843d\u4e4b\u95f4\u7684\u7a7a\u767d\u884c\u6dfb\u52a0\u4e00\u4e2a<code>&gt;</code>\u7b26\u53f7</p> <p>Dorothy followed her through many of the beautiful rooms in her castle.</p> <p>The Witch bade her clean pots and kettles and sweep the floor and keep the fire fed with wood.</p> <p>\u5d4c\u5957\u5757\u5f15\u7528\uff0c\u5728\u8981\u5d4c\u5957\u7684\u6bb5\u843d\u524d\u6dfb\u52a0\u4e00\u4e2a<code>&gt;&gt;</code>\u7b26\u53f7</p> <p>dorothy followed her through many of the beautiful rooms in her castle.</p> <p>The witch bade her clean the pots and kettles and sweep the floor and keep the fire with wood</p> <p>\u5e26\u6709\u5176\u4ed6\u5143\u7d20\u7684\u5757\u5f15\u7528</p>"},{"location":"MIT_missing%26practical_skills/markdown_tutorial/#the-quarterly-results-look-great","title":"the quarterly results look great!","text":"<ul> <li>Revenue was off the chart.</li> <li>profits were higher than ever.</li> </ul> <p>Everything is going according to plan</p>"},{"location":"MIT_missing%26practical_skills/markdown_tutorial/#markdown_5","title":"markdown \u5217\u8868\u8bed\u6cd5","text":"<p>\u6709\u5e8f\u5217\u8868\uff0c\u5217\u8868\u9879\u524d\u6dfb\u52a0\u6570\u5b57\u5e76\u7d27\u8ddf\u4e00\u4e2a\u82f1\u6587\u53e5\u70b9\uff0c\u6570\u5b57\u4e0d\u5fc5\u6309\u6570\u5b66\u987a\u5e8f\u6392\u5217\uff0c\u4f46\u5217\u8868\u5e94\u5f53\u4ee5\u6570\u5b571\u8d77\u59cb</p> <ol> <li>first item</li> <li>second item</li> <li>third item <ol> <li>first item</li> <li>second</li> </ol> </li> <li>fourth item</li> </ol> <p>\u65e0\u5e8f\u5217\u8868</p> <ul> <li> <p>first item</p> </li> <li> <p>indented item</p> </li> <li>indented item</li> </ul> <p>\u5728\u5217\u8868\u4e2d\u5d4c\u5957\u5176\u4ed6\u5143\u7d20\uff0c\u8bf7\u5c06\u8be5\u5143\u7d20\u7f29\u8fdb\u56db\u4e2a\u7a7a\u683c\u6216\u4e00\u4e2a\u5236\u8868\u7b26 * first item * second item     I need to add another paragraph below the second list item * third item</p> <ul> <li>first item</li> <li>second item     &gt; A blockquote would look great below the second list item.</li> <li>third item</li> </ul> <ol> <li>first item</li> <li>second item      <pre><code>#include&lt;stdio.h&gt;\n{\n    printf()\n}\n</code></pre></li> <li>third item</li> </ol> <ol> <li>first item</li> <li>second item      </li> <li>third item</li> </ol> <p>\u5217\u8868</p> <ol> <li>first item</li> <li>second item <ul> <li>indented item</li> <li>indented item</li> </ul> </li> <li>third item</li> </ol>"},{"location":"MIT_missing%26practical_skills/markdown_tutorial/#markdown_6","title":"markdown \u4ee3\u7801\u8bed\u6cd5","text":"<p>\u884c\u5185\u4ee3\u7801 \u82e5\u5c06\u5355\u8bcd\u6216\u77ed\u8bed\u8868\u793a\u4e3a\u4ee3\u7801\uff0c\u8bf7\u5c06\u5176\u5305\u88f9\u5728\u53cd\u5f15\u53f7\u4e2d  at the command prompt, type <code>nano</code> \u8f6c\u4e49\u53cd\u5f15\u53f7 \u5982\u679c\u4f60\u8981\u8868\u793a\u4e3a\u4ee3\u7801\u7684\u5355\u8bcd\u6216\u77ed\u8bed\u4e2d\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u53cd\u5f15\u53f7\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u5c06\u5355\u8bcd\u6216\u77ed\u8bed\u5305\u88f9\u5728\u53cc\u53cd\u5f15\u53f7(``)\u4e2d\u3002</p> <p><code>Use `code` in your markdown file</code></p> <p>markdown \u56f4\u680f\u5f0f\u4ee3\u7801\u5757(\u5728\u4ee3\u7801\u5757\u7684\u53cd\u5f15\u53f7\u65c1\u6307\u5b9a\u4e00\u79cd\u8bed\u8a00\u5373\u53ef\u8bed\u6cd5\u7a81\u51fa\u663e\u793a) <pre><code>{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n</code></pre></p>"},{"location":"MIT_missing%26practical_skills/markdown_tutorial/#_1","title":"\u5206\u5272\u7ebf\u8bed\u6cd5","text":"<p>\u5355\u72ec\u4e00\u884c\u4e0a\u4f7f\u7528\u4e09\u4e2a\u6216\u591a\u4e2a\u661f\u53f7\uff08<code>***</code>\uff09 try to put a blank line before...</p> <p>...and after put a horizontal rule.</p>"},{"location":"MIT_missing%26practical_skills/markdown_tutorial/#_2","title":"\u94fe\u63a5\u8bed\u6cd5","text":"<p>apple \u4f7f\u7528\u5c16\u62ec\u53f7\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u628aURL\u6216\u8005email\u53d8\u6210\u53ef\u70b9\u51fb\u7684\u94fe\u63a5 https://www.apple.com.cn/ 2177877404@qq.com \u5e26\u683c\u5f0f\u5316\u7684\u94fe\u63a5 This is the Markdown Guide</p>"},{"location":"MIT_missing%26practical_skills/markdown_tutorial/#_3","title":"\u56fe\u7247\u8bed\u6cd5","text":""},{"location":"MIT_missing%26practical_skills/markdown_tutorial/#markdown_7","title":"Markdown\u8f6c\u4e49\u5b57\u7b26\u8bed\u6cd5","text":"<p>\u5728\u5b57\u7b26\u524d\u9762\u6dfb\u52a0\u53cd\u659c\u6760\u5b57\u7b26\\ * Without the backslash, this would be a bullet in an unordered list</p>"},{"location":"MIT_missing%26practical_skills/markdown_tutorial/#markdown_8","title":"markdown \u6269\u5c55\u8bed\u6cd5","text":"<p>Markdown \u8868\u683c</p> syntax description test text Header title here's this paragraph text and more <p>\u56f4\u680f\u4ee3\u7801\u5757 <pre><code>{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n</code></pre> Markdown\u811a\u6ce8 Here's a simple footnote,<sup>1</sup> and here's a longer one.<sup>2</sup></p> <p>Markdown\u5220\u9664\u7ebf \u4e16\u754c\u662f\u5e73\u5766\u7684\uff0c\u6211\u4eec\u73b0\u5728\u77e5\u9053\u662f\u5706\u7684</p> <p>Markdown\u4efb\u52a1\u5217\u8868\u8bed\u6cd5</p> <ul> <li> write the press release</li> <li> update the website</li> <li> contact the media </li> </ul> <p>Markdown \u9ad8\u4eae\u8bed\u6cd5 \u9ad8\u4eae</p> <ol> <li> <p>Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis     sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis     nulla. Vivamus a pharetra leo.</p> <ol> <li> <p>Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet     quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a     ultricies libero efficitur sed.</p> </li> <li> <p>Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet     rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a.</p> <ol> <li>Mauris dictum mi lacus</li> <li>Ut sit amet placerat ante</li> <li>Suspendisse ac eros arcu</li> </ol> </li> </ol> </li> </ol> <ol> <li> <p>This is the first footnote.\u00a0\u21a9</p> </li> <li> <p>Here's one with multiple paragraphs and code. indented paragraphs to include them in the footnote. <code>{my code}</code> add as many paragraphs as you like\u00a0\u21a9</p> </li> </ol>"},{"location":"MIT_missing%26practical_skills/metaprogramming/","title":"Metaprogramming","text":"<p>programs that operate on programs Metaprogramming is a programming technique in which computer programs have the ability to treat other programs as their data. It means that a program can be designed to read, generate, analyze or transform other programs, and even modify itself while running.</p>"},{"location":"MIT_missing%26practical_skills/shell_learning/","title":"shell_learning docs","text":"<p>docs for shell</p> <p>some easily forgotten commands and very important knowledge for shell </p>"},{"location":"MIT_missing%26practical_skills/shell_learning/#using-the-shell","title":"Using the shell","text":"<p>\u952e\u76d8\u7279\u6b8a\u7b26\u53f7\u4e2d\u82f1\u6587\u540d\u79f0\u5bf9\u7167\u8868</p> symbol English meaning <code>.</code> dot current working directory <code>..</code> dot dot parent directory <code>~</code> tilde home directory <code>/</code> slash root directory <code>-</code> dash last working directory <code>$</code> dollar you are not root user <code>#</code> sharp or hash key you are root user <p>more symbol English. If the shell is asked to execute a command that doesn't match one of its programming keywords, it consult an environment variable called <code>$PATH</code> that lists which directories the shell should search for programs when it is given the command.  When we run the <code>echo</code> command, the shell see that it should execute the program <code>echo</code>, and the search though the <code>:</code> seperated lists of directories in <code>$PATH</code> for a file by the name. when it finds it, it runs it.</p>"},{"location":"MIT_missing%26practical_skills/shell_learning/#navigating-in-the-shell","title":"navigating in the shell","text":"<p>A path that starts with <code>/</code> is called an absolute path. Any other path is a relative path. relative paths are relative to the current working directory.  </p> command meaning <code>pwd</code> present working directory <code>cd</code> change directory <code>ls</code> list directory contents <code>mv</code> move/rename a file <code>cp</code> copy a file <code>mkdir</code> make a new directory <code>man</code> manual page <p> <code>ls</code> print the contents of the current directory. most commands accept flags and options(flags with values) that start with <code>-</code> to modify their behaviour.<code>ls -l</code> gives us a bunch more information about each file or directory present. First, the <code>d</code> at the begining of the line tells us that <code>markdown</code> is a directory. Then follow three groups of three characters(rwx)(r-x)(r-x). These indicate what permissions the owner of the file(niyasushi), the owning group(users), and everyone else respectively have on the relevant item. A <code>-</code> indicates that the given principal does not have on the given item. above only the owner is allowed to modify (<code>w</code>) the <code>markdown</code> directory(i.e., add/remove files in it). To enter a directory, a user must have \"search\"(represented by \"execute\": <code>x</code>) permissions on that directory(and its parents). To list its contents, a user must have read(<code>r</code>) permissions on that directory. Notice that nearly all the files in <code>/bin</code> have the <code>x</code> permission set for the last group, \"everyone else\", so that anyone can excute those programs.</p>"},{"location":"MIT_missing%26practical_skills/shell_learning/#connecting-programs","title":"connecting programs","text":"<p>In the shell, programs have two primary \u201cstreams\u201d associated with them: their input stream and their output stream. When the program tries to read input, it reads from the input stream, and when it prints something, it prints to its output stream. Normally, a program\u2019s input and output are both your terminal. That is, your keyboard as input and your screen as output. However, we can also rewire those streams!</p> command meaning <code>&lt; file</code> rewire the input stream <code>&gt; file</code> rewire the output stream <code>&gt;&gt; file</code> append a file <code>1&gt;&amp;2</code> stdout rewire stderr <code>2&gt;&amp;1</code> stderr rewire stdout <code>cat</code> concatenate and print files <code>|</code> pipe <code>sudo</code> execute a command as super user <code>chmod</code> change mode 'grep' globally search a regular expression and print <p>a brief introduction for chmod </p>"},{"location":"MIT_missing%26practical_skills/shell_learning/#shell-scripting","title":"shell scripting","text":"<p>To assign variables in bash, use the syntax <code>foo=bar</code> and access the value of the variable with <code>$foo</code>.  In general, in shell scripts the space character will perform argument splitting. Strings in bash can be defined with <code>'</code> and <code>\"</code> delimiters, but they are not equivalent. Strings delimited with <code>'</code> are literal strings and will not substitute variable values whereas <code>\"</code> delimited strings will.</p> symbol meaning <code>$0</code> Name of the script <code>$1</code> to <code>$9</code> Arguments to the script. <code>$1</code> is the first argument and so on <code>$#</code> Number of arguments <code>$@</code> the list of all the arguments <code>$$</code> Process identification number (PID) for the current script <code>$_</code> Last argument from the last command <code>$?</code> the exit status of the last command <code>!!</code> Entire last command, including arguments <p>Commands will often return output using <code>STDOUT</code>, errors through <code>STDERR</code>. A value of <code>0</code> usually means everything went OK; anything different from <code>0</code> means an error occurred. Exit codes can be used to conditionally execute commands using <code>&amp;&amp;</code> (and operator) and <code>||</code> (or operator), both of which are short-circuiting operators. </p> <p>Another common pattern is wanting to get the output of a command as a variable. This can be done with command substitution. Whenever you place <code>$( CMD )</code> it will execute CMD, get the output of the command and substitute it in place. For example, if you do for file in <code>$(ls)</code>, the shell will first call ls and then iterate over those values. A lesser known similar feature is process substitution, <code>&lt;( CMD )</code> will execute CMD and place the output in a temporary file and substitute the <code>&lt;()</code> with that file\u2019s name.  <pre><code>#!/bin/bash\necho \"starting program at $(date)\"\necho \"Running program $0 with $# arguments with pid $$\"\nfor file in \"$@\"; do\n    grep foobar \"$file\" &gt; /dev/null 2&gt; /dev/null\n    if [[ $? -ne 0 ]]; then\n        echo \"File $file doesn't exist foobar, adding one\"\n        echo \"# foobar\" &gt;&gt; \"$file\"\n    fi\ndone        \n</code></pre></p>"},{"location":"MIT_missing%26practical_skills/shell_learning/#shell-globbing","title":"shell globbing","text":"<ul> <li>Wildcards - Whenever you want to perform some sort of wildcard matching, you can use <code>?</code> and <code>*</code> to match one or any amount of characters respectively. For instance, given files <code>foo</code>, <code>foo1</code>, <code>foo2</code>, <code>foo10</code> and <code>bar</code>, the command <code>rm foo?</code> will delete <code>foo1</code> and <code>foo2</code> whereas <code>rm foo*</code> will delete all but <code>bar</code>.  </li> <li>Curly braces<code>{}</code>-Whenever you have a common substring in a series of commands, you can use curly braces for bash to expand this automatically.  </li> </ul>"},{"location":"MIT_missing%26practical_skills/shell_learning/#task","title":"task","text":"<pre><code> find ./ -name '*.html' -print0 | xargs -0 tar vcf html.zip\n</code></pre> <pre><code> find . -type f -print0 | xargs -0 ls -lt | head -10\n</code></pre>"},{"location":"MIT_missing%26practical_skills/shell_learning/#shell-tools","title":"shell tools","text":"<p>tldr find autojump tree nnn</p>"},{"location":"MIT_missing%26practical_skills/vim_learning/","title":"Vim","text":"Philosophy of Vim <p>When programming, you spend most of your time reading/editing, not writing. For this reason, Vim is a modal editor: it has different modes for inserting text vs manipulating text. Vim is programmable (with Vimscript and also other languages like Python), and Vim\u2019s interface itself is a programming language: keystrokes (with mnemonic names) are commands, and these commands are composable. Vim avoids the use of the mouse, because it\u2019s too slow; Vim even avoids using the arrow keys because it requires too much movement.</p>"},{"location":"MIT_missing%26practical_skills/vim_learning/#modal-editing","title":"Modal editing","text":"<p>Vim\u2019s design is based on the idea that a lot of programmer time is spent reading, navigating, and making small edits, as opposed to writing long streams of text. For this reason, Vim has multiple operating modes.</p> <ul> <li>Normal: for moving around a file and making edits</li> <li>Insert: for inserting text</li> <li>Replace: for replacing text</li> <li>Visual (plain, line, or block): for selecting blocks of text</li> <li>Command-line: for running a command</li> </ul> <p>Keystrokes have different meanings in different operating modes. For example, the letter <code>x</code> in Insert mode will just insert a literal character \u2018x\u2019, but in Normal mode, it will delete the character under the cursor, and in Visual mode, it will delete the selection.  </p> <p>You change modes by pressing <code>&lt;ESC&gt;</code> (the escape key) to switch from any mode back to Normal mode. From Normal mode, enter Insert mode with <code>i</code>, Replace mode with <code>R</code>, Visual mode with <code>v</code>, Visual Line mode with <code>V</code>, Visual Block mode with <code>&lt;C-v&gt;</code> (Ctrl-V, sometimes also written <code>^V</code>), and Command-line mode with <code>:</code>.</p> <p>You use the <code>&lt;ESC&gt;</code> key a lot when using Vim: consider remapping <code>Caps Lock</code> to <code>Escape</code> (macOS instructions).</p>"},{"location":"MIT_missing%26practical_skills/vim_learning/#basics","title":"Basics","text":""},{"location":"MIT_missing%26practical_skills/vim_learning/#inserting-text","title":"Inserting text","text":"<p>From Normal mode, press <code>i</code> to enter Insert mode. Now, Vim behaves like any other text editor, until you press <code>&lt;ESC&gt;</code> to return to Normal mode.  </p>"},{"location":"MIT_missing%26practical_skills/vim_learning/#buffers-tabs-and-windows","title":"Buffers, tabs, and windows","text":"<p>Vim maintains a set of open files, called \u201cbuffers\u201d. A Vim session has a number of tabs, each of which has a number of windows (split panes). Each window shows a single buffer.Vim maintains a set of open files, called \u201cbuffers\u201d. A Vim session has a number of tabs, each of which has a number of windows (split panes). Each window shows a single buffer.</p> <p>By default, Vim opens with a single tab, which contains a single window.  </p>"},{"location":"MIT_missing%26practical_skills/vim_learning/#command-line","title":"Command-line","text":"<p>Command mode can be entered by typing <code>:</code> in Normal mode.</p> command operation <code>:q</code> quit(close window) <code>:w</code> save(write) <code>:wq</code> save and quit <code>:e {name of file}</code> open file for editing <code>:ls</code> show open buffers <code>:help {topic}</code> open help <p><code>:help :w</code> opens help for the <code>:w</code> command <code>:help w</code> opens help for the <code>w</code> movement</p>"},{"location":"MIT_missing%26practical_skills/vim_learning/#vims-interface-is-a-programming-language","title":"Vim\u2019s interface is a programming language","text":"<p>The most important idea in Vim is that Vim\u2019s interface itself is a programming language. Keystrokes (with mnemonic names) are commands, and these commands compose. This enables efficient movement and edits, especially once the commands become muscle memory.</p>"},{"location":"MIT_missing%26practical_skills/vim_learning/#movement","title":"Movement","text":"<p>You should spend most of your time in Normal mode, using movement commands to navigate the buffer. Movements in Vim are also called \u201cnouns\u201d, because they refer to chunks of text.  </p> <ul> <li>Basic movement: <code>hjkl</code> (left, down, up, right)</li> <li>Words: w (next word), b (beginning of word), e (end of word)</li> <li>Lines: <code>0</code> (beginning of line), <code>^</code> (first non-blank character), <code>$</code> (end of line)</li> <li>Screen: <code>H</code> (top of screen), <code>M</code> (middle of screen), <code>L</code> (bottom of screen)  </li> <li>Scroll: <code>Ctrl-u</code> (up), <code>Ctrl-d</code> (down)</li> <li>File: <code>gg</code> (beginning of file), <code>G</code> (end of file)</li> <li>Line numbers: :{number} or {number}G (line {number}) <li>Misc: <code>%</code> (corresponding item<code>[]{}()</code>)</li> <li>Find: <code>f{character}</code>, <code>t{character}</code>, <code>F{character}</code>, <code>T{character}</code><ul> <li>find/to forward/backward {character} on the current line</li> <li><code>,</code> / <code>;</code> for navigating matches</li> </ul> </li> <li>Search: <code>/{regex}</code>, <code>n</code> / <code>N</code> for navigating matches</li>"},{"location":"MIT_missing%26practical_skills/vim_learning/#selection","title":"Selection","text":"<p>Visual modes: Visual: <code>v</code> Visual Line: <code>V</code> Visual Block: <code>Ctrl-v</code> Can use movement keys to make selection.</p>"},{"location":"MIT_missing%26practical_skills/vim_learning/#edits","title":"Edits","text":"<p>Everything that you used to do with the mouse, you now do with the keyboard using editing commands that compose with movement commands. Here\u2019s where Vim\u2019s interface starts to look like a programming language. Vim\u2019s editing commands are also called \u201cverbs\u201d, because verbs act on nouns.  </p> <ul> <li><code>i</code> enter Insert mode<ul> <li>but for manipulating/deleting text, want to use something more than backspace</li> </ul> </li> <li><code>o</code> / <code>O</code> insert line below / above</li> <li><code>d{motion}</code> delete {motion}<ul> <li>e.g. <code>dw</code> is delete word, <code>d$</code> is delete to end of line, <code>d0</code> is delete to beginning of line</li> </ul> </li> <li><code>c{motion}</code> change {motion}<ul> <li>e.g. <code>cw</code> is change word</li> <li>like <code>d{motion}</code> followed by <code>i</code></li> </ul> </li> <li><code>x</code> delete character (equal do <code>dl</code>)</li> <li><code>s</code> substitute character (equal to <code>cl</code>)</li> <li>Visual mode + manipulation<ul> <li>select text, <code>d</code> to delete it or <code>c</code> to change it</li> </ul> </li> <li><code>u</code> to undo, <code>&lt;C-r&gt;</code> to redo</li> <li><code>y</code> to copy / \u201cyank\u201d (some other commands like <code>d</code> also copy)</li> <li><code>p</code> to paste</li> <li>Lots more to learn: e.g. <code>~</code> flips the case of a character</li> </ul>"},{"location":"MIT_missing%26practical_skills/vim_learning/#counts","title":"counts","text":"<p>You can combine nouns and verbs with a count, which will perform a given action a number of times.  </p> <ul> <li><code>3w</code> move 3 words forward</li> <li><code>5j</code> move 5 lines down</li> <li><code>7dw</code> delete 7 words</li> </ul>"},{"location":"MIT_missing%26practical_skills/vim_learning/#modifiers","title":"Modifiers","text":"<p>You can use modifiers to change the meaning of a noun. Some modifiers are <code>i</code>, which means \u201cinner\u201d or \u201cinside\u201d, and <code>a</code>, which means \u201caround\u201d.</p> <ul> <li><code>ci(</code> change the contents inside the current pair of parentheses</li> <li><code>ci[</code> change the contents inside the current pair of square brackets</li> <li><code>da'</code> delete a single-quoted string, including the surrounding single quotes</li> </ul>"},{"location":"MIT_missing%26practical_skills/vim_learning/#vim_1","title":"\u5982\u4f55\u5728 Vim \u4e2d\u590d\u5236\uff0c\u526a\u5207\uff0c\u7c98\u8d34","text":""},{"location":"MIT_missing%26practical_skills/vim_learning/#_1","title":"\u5728\u6b63\u5e38\u6a21\u5f0f\u590d\u5236\uff0c\u526a\u5207\u4ee5\u53ca\u7c98\u8d34","text":"<p>\u5f53\u4f60\u542f\u52a8 Vim \u7f16\u8f91\u5668\u65f6\uff0c\u9ed8\u8ba4\u5c31\u8fdb\u5165\u4e86\u6b63\u5e38\u6a21\u5f0f\u3002\u5728\u8fd9\u4e2a\u6a21\u5f0f\uff0c\u4f60\u53ef\u4ee5\u8fd0\u884c Vim \u547d\u4ee4\uff0c\u5e76\u4e14\u6d4f\u89c8\u6574\u4e2a\u6587\u4ef6\u3002 \u4ece\u5176\u4ed6\u4efb\u4f55\u6a21\u5f0f\u8fd4\u56de\u6b63\u5e38\u6a21\u5f0f\uff0c\u4f60\u53ea\u9700\u8981\u6309<code>Esc</code>\u952e\u3002 Vim \u5bf9\u4e8e\u590d\u5236\uff0c\u526a\u5207\uff0c\u7c98\u8d34\u6709\u5b83\u81ea\u5df1\u7684\u4e00\u5957\u672f\u8bed\u3002\u590d\u5236\u88ab\u53eb\u505a yank(<code>y</code>),\u526a\u5207\u88ab\u53eb\u505a delete\uff08<code>d</code>\uff09\uff0c\u4ee5\u53ca\u7c98\u8d34\u88ab\u53eb\u505a put\uff08<code>p</code>\uff09\u3002 \u590d\u5236 (Yanking) \u60f3\u8981\u590d\u5236\u6587\u672c\uff0c\u5c06\u5149\u6807\u653e\u5230\u4f60\u60f3\u8981\u7684\u5730\u65b9\uff0c\u7136\u540e\u53c2\u8003\u4e0b\u9762\u7684\u547d\u4ee4\u6309\u952ey\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u6709\u7528\u7684\u547d\u4ee4\uff1a</p> <ul> <li><code>yy</code> - \u590d\u5236\u5f53\u524d\u884c\uff0c\u5305\u62ec\u6362\u884c\u7b26</li> <li><code>3yy</code> - \u590d\u5236\u4ece\u5149\u6807\u6240\u5728\u7684\u5f53\u524d\u884c\u5f00\u59cb\u7684\u4e09\u884c\u6587\u672c</li> <li><code>y$</code> - \u590d\u5236\u4ece\u5149\u6807\u4f4d\u7f6e\u5230\u884c\u5c3e\u7684\u6587\u672c</li> <li><code>y^</code> - \u590d\u5236\u4ece\u5149\u6807\u4f4d\u7f6e\u5230\u884c\u9996\u7684\u6587\u672c</li> <li><code>yw</code> - \u590d\u5236\u5230\u4e0b\u4e00\u4e2a\u8bcd\u7684\u5f00\u5934</li> <li><code>yiw</code> - \u590d\u5236\u5f53\u524d\u8bcd</li> <li><code>y%</code> - \u590d\u5236\u5339\u914d\u7b26\u53f7\u8303\u56f4\u5185\u5bb9\u3002\u9ed8\u8ba4\u652f\u6301\u7684\u7b26\u53f7\u5bf9\u662f(),{},[].\u8fd9\u4e2a\u5728\u590d\u5236\u62ec\u53f7\u5185\u5185\u5bb9\u65f6\uff0c\u5f88\u6709\u7528\u5904\u3002</li> </ul> <p>\u526a\u5207 (Deleting)</p> <p>\u5728\u6b63\u5e38\u6a21\u5f0f\u4e0b\uff0c<code>d</code>\u6309\u952e\u662f\u7528\u6765\u526a\u5207\u6587\u672c\u7684\u3002\u628a\u5149\u6807\u79fb\u52a8\u5230\u60f3\u8981\u7684\u4f4d\u7f6e\uff0c\u53c2\u8003\u4e0b\u9762\u7684\u547d\u4ee4\u6309<code>d</code>\u6309\u952e\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u6709\u5e2e\u52a9\u7684\u547d\u4ee4\uff1a</p> <ul> <li><code>dd</code> - \u526a\u5207\u5f53\u524d\u884c\uff0c\u5305\u62ec\u6362\u884c\u7b26</li> <li><code>3dd</code> - \u526a\u5207\u4ece\u5149\u6807\u4f4d\u7f6e\u6240\u5728\u884c\u5f00\u59cb\u7684 3 \u884c\u6587\u672c</li> <li><code>d$</code> - \u526a\u5207\u4ece\u5149\u6807\u4f4d\u7f6e\u5230\u884c\u5c3e\u7684\u5185\u5bb9 \u8fd9\u4e9b\u547d\u4ee4\u540c\u65f6\u9002\u7528\u4e8e\u5220\u9664\u7684\u573a\u666f\u3002\u4f8b\u5982\uff0c<code>dw</code>\u53ef\u4ee5\u5220\u9664\u5230\u4e0b\u4e00\u4e2a\u8bcd\u7684\u5f00\u5934\u3002\u800c<code>d^</code>\u53ef\u4ee5\u5220\u9664\u5149\u6807\u4f4d\u7f6e\u5230\u884c\u9996\u7684\u5185\u5bb9\u3002 </li> </ul> <p>\u7c98\u8d34 (Putting) \u60f3\u8981\u7c98\u8d34\u88ab\u526a\u5207\u7684\u5185\u5bb9\uff0c\u5148\u5c06\u5149\u6807\u79fb\u52a8\u5230\u60f3\u8981\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u6309<code>p</code>\u952e\u53ef\u4ee5\u5c06\u5185\u5bb9\u7c98\u8d34\u5230\u5f53\u524d\u5149\u6807\u540e\u9762\uff0c\u6216\u8005\u6309<code>P</code>\u6309\u952e\u53ef\u4ee5\u7c98\u8d34\u5230\u5f53\u524d\u5149\u6807\u524d\u9762\u3002</p>"},{"location":"MIT_missing%26practical_skills/vim_learning/#_2","title":"\u5728\u53ef\u89c6\u6a21\u5f0f\u4e0b\u590d\u5236\uff0c\u526a\u5207\uff0c\u7c98\u8d34","text":"<p>Vim \u53ef\u89c6\u6a21\u5f0f\u4e0b\uff0c\u5141\u8bb8\u4f60\u9009\u62e9\u548c\u64cd\u4f5c\u6587\u672c\u3002</p> <ol> <li>\u5c06\u5149\u6807\u653e\u5230\u4f60\u60f3\u8981\u5f00\u59cb\u590d\u5236\u6216\u8005\u526a\u5207\u7684\u90a3\u4e00\u884c\u3002</li> <li>\u53ef\u89c6\u6a21\u5f0f\u6709\u4e09\u4e2a\u5b50\u7c7b\u578b<ul> <li>\u6309<code>v</code>\u8fdb\u5165\u53ef\u89c6\u6a21\u5f0f</li> <li>\u6309<code>v</code>\u8fdb\u5165\u53ef\u89c6\u884c\u6a21\u5f0f\u3002\u8be5\u6a21\u5f0f\u4e0b\u6587\u672c\u53ef\u4ee5\u6309\u884c\u6765\u9009\u62e9\u3002</li> <li>\u6309<code>Ctrl+v</code>\u8fdb\u5165\u53ef\u89c6\u5757\u6a21\u5f0f\u3002\u8be5\u6a21\u5f0f\u4e0b\u6587\u672c\u53ef\u4ee5\u6309\u7167\u6587\u672c\u5757\u6765\u9009\u62e9\u3002 \u8fdb\u5165\u53ef\u89c6\u6a21\u5f0f\u5f53\u7136\u4e5f\u6807\u8bb0\u4e86\u4f60\u7684\u5f00\u59cb\u9009\u62e9\u70b9\u3002</li> </ul> </li> <li>\u5c06\u5149\u6807\u79fb\u52a8\u5230\u4f60\u60f3\u8981\u590d\u5236\u6216\u8005\u526a\u5207\u7684\u6587\u672c\u6700\u540e\u9762\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0a\u4e0b\u5de6\u53f3\u6309\u952e\u6765\u8fdb\u884c\u79fb\u52a8\u3002</li> <li>\u6309<code>y</code>\u8fdb\u884c\u62f7\u8d1d\uff0c\u6309d\u526a\u5207\u9009\u62e9\u6587\u672c\u3002</li> </ol>"},{"location":"MIT_missing%26practical_skills/vim_learning/#insert","title":"\u5728 insert/\u63d2\u5165\u6a21\u5f0f\u7c98\u8d34","text":"<p>\u5728 <code>normal</code> \u6a21\u5f0f\u6309\u4e0b <code>i</code> \u6216\u8005 <code>a</code> \u53ef\u4ee5\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\uff0c\u4e5f\u5c31\u662f\u952e\u5165\u5185\u5bb9\u7684\u6a21\u5f0f\u3002<code>p</code> \u5feb\u6377\u952e\u4e0d\u53ef\u7528\u4e8e\u63d2\u5165\u6a21\u5f0f\uff0c\u4f46\u662f\u63d2\u5165\u6a21\u5f0f\u53ef\u4ee5\u901a\u8fc7 <code>Ctrl+r</code> \u6765\u8bbf\u95ee\u6240\u6709\u7684\u5bc4\u5b58\u5668\uff0c\u63d2\u5165\u5bc4\u5b58\u5668\u91cc\u7684\u5185\u5bb9\u3002\u6240\u6709\u526a\u5207\u3001\u62f7\u8d1d\u3001\u5220\u9664\u7684\u5185\u5bb9\u90fd\u4f1a\u5b58\u5728\u4e0d\u540c\u7684 Vim \u5bc4\u5b58\u5668\u91cc\u3002\u6bd4\u5982\uff1a</p> <ul> <li><code>Ctrl+r</code> \" \u63d2\u5165\u6700\u8fd1\u4e00\u6b21\u590d\u5236/\u526a\u5207/\u5220\u9664\u7684\u5185\u5bb9\u3002\" \u662f Vim \u7684\u533f\u540d\u5bc4\u5b58\u5668\u3002</li> <li><code>Ctrl+r 0</code> \u63d2\u5165\u6700\u8fd1\u4e00\u6b21\u590d\u5236\u7684\u5185\u5bb9\u3002\u5176\u4e2d <code>0</code> \u5c5e\u4e8e Vim \u7684\u7f16\u53f7\u5bc4\u5b58\u5668\uff0c\u4fdd\u5b58\u6700\u8fd1\u4e00\u6b21\u62f7\u8d1d\u7684\u5185\u5bb9\u3002</li> <li><code>Ctrl+r 1</code> \u63d2\u5165\u6700\u8fd1\u4e00\u6b21\u5220\u9664\u7684\u5185\u5bb9\uff0c\u5176\u4e2d <code>1</code> \u5c5e\u4e8e vim \u7684\u7f16\u53f7\u5bc4\u5b58\u5668\uff0c\u4fdd\u5b58\u6700\u8fd1\u4e00\u6b21\u5220\u9664\u7684\u5185\u5bb9\u3002 \u6b64\u5916\u5bc4\u5b58\u5668\u8fd8\u4fdd\u5b58\u6709\u5f53\u524d\u6587\u4ef6\u540d\u3001\u6700\u8fd1\u4e00\u6b21\u6267\u884c\u7684\u547d\u4ee4\u3001\u6700\u8fd1\u4e00\u6b21\u641c\u7d22\u5185\u5bb9\u3001\u6700\u8fd1\u4e00\u6b21\u63d2\u5165\u6587\u672c\u7b49\u3002\u53ef\u4ee5\u53c2\u8003 Vim \u5bc4\u5b58\u5668\u5b8c\u5168\u624b\u518c\u3002</li> </ul>"},{"location":"MIT_missing%26practical_skills/vim_learning/#some-plugins","title":"some plugins","text":"<p>recomended plugins vundle it's a vim plugin manager</p>"},{"location":"etc/bugs/","title":"Bugs&amp;Questiions","text":""},{"location":"etc/bugs/#vscode","title":"vscode","text":""},{"location":"etc/bugs/#vscodevim","title":"vscodevim","text":"<p>In vscode settings.json add <code>\"vim.mouseSelectionGoesIntoVisualMode\": false,</code> to use mouse selection, however, it can't work. Just like vim issues 1871 and vim issues 2410, it drives me crazy, because it is a big difference between there is a mouse selecting and there isn't a mouse selection. The problem exists for nearly 2 months and it lead to me giving up using vscodevim at the beginning. However, after battle with this problem for nearly a half day I find it conflict with another software Youdao dictionary. just forbid get word from the screen function. All right for vscodevim.  </p>"},{"location":"etc/bugs/#python","title":"Python","text":""},{"location":"etc/bugs/#after-changing-user-folder-pyenv-fault","title":"After changing user folder pyenv fault","text":"<p>reinstall python with the pyenv  </p> <ul> <li><code>pyenv uninstall 3.11.3</code> you will find the <code>~/.pyenv/versions</code> remove 3.11.3</li> <li>then reinstall <code>pyenv install 3.11.3</code> </li> <li>use <code>which python</code> and <code>where python</code> to test if pyenv work.  </li> </ul>"},{"location":"etc/intel-to-arm/","title":"macbook M3pro 16inches migrate form intel to arm","text":""},{"location":"etc/intel-to-arm/#step1-back-up-old-time-machine-from-intel-macbook","title":"step1 back up old time machine from intel macbook","text":"<p>here is a small problem, the new macbook pro only has thunderbolt interface, and my old macbook pro only has a HDD with USB-A interface, i need buy a USB type-c to USB-A converting cable.  </p>"},{"location":"etc/intel-to-arm/#step2","title":"step2 \u547d\u4ee4\u884c\u4e2d\u7684\u4e00\u4e9b\u9519\u8bef","text":"<ul> <li>homebrew\u7531\u4e8earm\u7248\u8def\u5f84\u53d8\u5316\u9700\u8981\u91cd\u65b0\u5b89\u88c5\uff0c\u9996\u5148\u9700\u8981\u91cd\u65b0\u5b89\u88c5comman-line-tools\uff0c\u7136\u540e\u6839\u636e\u8fd9\u4e2ahomebrew \u8fc1\u79fb\u6559\u7a0b\u6267\u884c\u64cd\u4f5c\uff0c\u5177\u4f53\u601d\u8def\u662f  <ol> <li><code>brew bundle dump</code> \u751f\u6210\u4e00\u4efd brewfile \u7684\u914d\u7f6e\u6587\u4ef6</li> <li>Uninstall Brew from old location</li> <li>Install Brew to new location(opt/homebrew)</li> <li><code>brew budle</code> Reinstall config</li> </ol> </li> <li>\u901a\u8fc7 <code>pip</code> \u5b89\u88c5\u7684\u90e8\u5206 sitepackages \u62a5\u9519     <code>/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/</code> \u8def\u5f84\u4e0b\u627e\u5230\u5bf9\u5e94\u7684 sitepackages \u5220\u9664\u540e\u901a\u8fc7 <code>pip</code> \u91cd\u65b0\u5b89\u88c5</li> <li>\u901a\u8fc7 <code>pyenv</code> \u7ba1\u7406\u5bf9\u5e94\u7684Python\u7248\u672c     \u8fd9\u4e2d\u95f4\u6709\u4e2a\u5c0f\u63d2\u66f2\u9519\u8bef\u6211\u4e0d\u80fd\u7406\u89e3\uff0c\u5f00\u59cb\u6211\u5378\u8f7d Python \u548c pyenv \u540e\u60f3\u770b\u770b\u5728\u65b0\u73af\u5883\u4e0b\u662f\u5426\u80fd\u591f\u4f7f\u7528\uff0c\u4e8e\u662f\u901a\u8fc7 homebrew \u5b89\u88c5 pyenv \u540e\u518d\u6b21\u91cd\u65b0\u5b89\u88c5 Python3.11.3 \u65f6\u603b\u662f\u62a5\u9519\uff0c\u8bf4\u4ec0\u4e48 use zlib from xcode, python-build error \u4e4b\u7c7b\u7684\uff0c\u6211\u65e0\u6cd5\u89e3\u51b3\uff0c\u4f46\u662f\u7761\u4e86\u4e00\u89c9\u540e\u5c31\u597d\u4e86\u3002pyenv \u5e38\u7528\u7684\u51e0\u4e2a\u547d\u4ee4\u975e\u5e38\u7b80\u5355\uff0c\u603b\u4e4b\u5c31\u662f\u5148\u5b89\u88c5\u5bf9\u5e94\u7684 python \u7248\u672c\uff0c\u7136\u540e\u8bbe\u7f6e\u4e3a\u5168\u5c40\u3002</li> </ul>"},{"location":"etc/intel-to-arm/#step3-intel","title":"step3 \u5378\u8f7d intel \u7248\u672c\u7684\u8f6f\u4ef6\u5e76\u91cd\u65b0\u5b89\u88c5\uff0c\u5e76\u5904\u7406\u4e00\u4e9b\u8f6f\u4ef6\u95ee\u9898","text":"<p>\u5728\u901a\u7528/\u5b58\u50a8\u7a7a\u95f4/\u5e94\u7528\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u627e\u5230\u6240\u6709 intel \u7248\u672c\u7684\u8f6f\u4ef6\uff0c\u5378\u8f7d\u540e\u91cd\u65b0\u5b89\u88c5\u3002 \u6709\u7684\u8f6f\u4ef6\u6709 homebrew \u53ef\u4ee5\u76f4\u63a5\u5b89\u88c5\u7684\u8bdd\u5c31\u76f4\u63a5\u5728\u547d\u4ee4\u884c\u4e2d\u4e00\u884c\u547d\u4ee4\u5b89\u88c5\u3002\u4e0d\u53ef\u4ee5\u7684\u8bdd\u5c31\u627e\u5b98\u7f51\u3002  </p> <ul> <li>Alfread \u4e2d\u7684 workflow \u5931\u6548\uff0c\u9700\u8981\u91cd\u65b0\u5b89\u88c5 alfread \u540e\u5220\u9664\u5bf9\u5e94\u7684 workflow \u5e76\u91cd\u65b0\u5b89\u88c5\u548c\u914d\u7f6e workflow\u3002</li> <li>Adguard \u9700\u8981\u5173\u95ed SIP\u3002 \u6709\u4e00\u70b9\u51fa\u5165\u7684\u662f\u8f93\u5165\u547d\u4ee4\u540e\u8fd8\u9700\u8981\u8f93\u5165\u7ba1\u7406\u5458\u8d26\u6237\u548c\u5bc6\u7801\u3002 \u6b64\u5916\u4e0d\u77e5\u9053\u4e3a\u4f55\u5b89\u88c5\u7684\u811a\u672c\u4e22\u5931\u4e86\u4e00\u4e2a\u53bb\u7f51\u9875\u53bb\u5e7f\u544a\u7684\u811a\u672c\uff0c\u53ef\u4ee5\u53bb geeksfork \u4e0b\u8f7d\u60f3\u8981\u7684\u811a\u672c\u5e76\u6258\u7ba1\u5728Adguard\u4e2d\u3002\u6bd4\u5982\u53ef\u4ee5\u53bb\u9664 Youtube \u9996\u9875\u7684\u63a8\u8350\u5e7f\u544a\u3002</li> <li>webcatalog \u4e2d\u5b89\u88c5\u7684\u6240\u6709\u8f6f\u4ef6\u9700\u8981\u91cd\u65b0\u5b89\u88c5 \u6bd4\u5982\u6211\u5e38\u7528\u7684 chatgpt X spotify </li> <li>Qt creator \u867d\u7136\u662f\u901a\u7528\u7248\uff0c\u4f46\u6253\u5f00\u540e\u8fd8\u662f\u5168\u5c4f\u62a5\u9519\uff0c\u9700\u8981\u8fd0\u884c maintennace \u5de5\u5177\u5378\u8f7d\u540e\u91cd\u65b0\u5b89\u88c5</li> <li>\u5176\u4ed6\u6700\u5e38\u7528\u8f6f\u4ef6\u8bbe\u7f6e\u8be6\u89c1mac tips</li> </ul>"},{"location":"etc/intel-to-arm/#step4","title":"step4 \u5378\u8f7d\u4e00\u5207\u4e0d\u9700\u8981\u7684\u8f6f\u4ef6\u548c\u7cfb\u7edf\u5783\u573e\u6e05\u7406\u7a7a\u95f4","text":"<ul> <li>\u5378\u8f7d\u6240\u6709\u4e0d\u9700\u8981\u7684\u8f6f\u4ef6\uff0c\u53ef\u4ee5\u501f\u52a9 cleanmymacX \u6765\u5378\u8f7d\uff0c\u5e76\u4e14\u53ef\u4ee5\u6e05\u7406\u7cfb\u7edf\u7f13\u5b58\u548c\u5e94\u7528\u7f13\u5b58\u8fd9\u4e24\u4e2a\u90e8\u5206\uff0c\u53e6\u5916\u4e00\u4e9b\u5783\u573e\u4e5f\u53ef\u4ee5\u6e05\u7406\u3002</li> <li>~/Library/caches \u548c /Library/caches \u5206\u522b\u662f\u7cfb\u7edf\u7f13\u5b58\u548c\u5e94\u7528\u7f13\u5b58\uff0c\u53ef\u4ee5\u5168\u90e8\u6e05\u7406\u4e5f\u4e0d\u4f1a\u6709\u4ec0\u4e48\u5f71\u54cd\u3002</li> </ul>"},{"location":"etc/intel-to-arm/#step5","title":"step5 \u66f4\u6539\u663e\u793a\u5b57\u4f53\u5927\u5c0f","text":"<p>\u8fd9\u53f0macbookpro \u663e\u793a\u5668\u662f 16\u82f1\u5bf8(3456 \u00d7 2234) \u53ef\u80fd\u7531\u4e8e\u5206\u8fa8\u7387\u592a\u9ad8\uff0c\u5bfc\u81f4\u9ed8\u8ba4\u5b57\u4f53\u770b\u8d77\u6765\u975e\u5e38\u5c0f\uff0c\u8fd9\u70b9\u5728reddiet\u4e0a\u4e5f\u6709\u8ba8\u8bba\uff0c\u6211\u7ed9\u51fa\u7684\u56de\u7b54\u662f  </p> <p>here I suffered the same problem, When I get my new M3 macbook-pro 16inches with screen resolution(3456 \u00d7 2234), I find the font size displayed on my screen  are much more smaller compared with my old macbook, such as in settings, finder, vscode etc..., however in google chrome it's normal. here is my solutition</p> <ul> <li>in accessibility of settings the default font size is 12, change it to 13 applied to all the applications you can select.</li> <li>in vscode, go to preference and change the font size to 13.</li> <li>the default font size of google chrome is 16 so you don't need change it. that's what suitable solution for me, just offered for reference. \u53e6\u5916\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\u7684\u662f MacOS \u7cfb\u7edf\u7684\u5b57\u4f53\u5927\u5c0f\u5355\u4f4d\u662f pt, \u800c\u6d4f\u89c8\u5668\u4e2d\u7684\u5b57\u4f53\u5927\u5c0f\u7684\u5355\u4f4d\u662f px\u3002\u8fd9\u4e24\u8005\u4e4b\u95f4\u7684\u533a\u522b\u662f </li> </ul>"},{"location":"etc/intel-to-arm/#step6","title":"step6 \u66f4\u6539\u3001\u9605\u8bfb\u3001\u719f\u6089\u7cfb\u7edf\u8bbe\u7f6e","text":"<p>\u56e0\u4e3a\u4ece\u8001 mac \u66f4\u65b0\u8fc7\u6765\u540e\u7cfb\u7edf\u8bbe\u7f6e\u754c\u9762 UI \u53d1\u751f\u4e86\u5f88\u5927\u53d8\u5316\uff0c\u5f88\u591a\u5730\u65b9\u9700\u8981\u719f\u6089\u6216\u8005\u66f4\u6539\u6210\u9002\u5408\u81ea\u5df1\u7684  </p> <ol> <li>\u901a\u7528<ol> <li>\u5173\u4e8e\u672c\u673a     macbook \u7b80\u4ecb\uff0c\u7cfb\u7edf\u7248\u672c\uff0c\u663e\u793a\u5668\u53ca\u8bbe\u7f6e\uff08\u70b9\u51fb\u540e\u53ef\u8fdb\u5165\u663e\u793a\u5668\u8bbe\u7f6e\uff09\uff0c\u5b58\u50a8\u7a7a\u95f4\u53ca\u8bbe\u7f6e\uff08\u70b9\u51fb\u540e\u53ef\u8fdb\u5165\u5b58\u50a8\u7a7a\u95f4\u8bbe\u7f6e\u754c\u9762\uff09</li> <li>\u5b58\u50a8\u7a7a\u95f4     \u53ef\u4ee5\u67e5\u770b\u5404\u79cd\u6587\u4ef6\u5b58\u50a8\u6570\u636e\uff0c\u5728\u8be6\u7ec6\u4fe1\u606f\u754c\u9762\u5185\u8fd8\u53ef\u4ee5\u663e\u793a\u7ec6\u5219      </li> <li>\u767b\u5f55\u9879     \u767b\u5f55\u9879\u4e2d\u53ef\u4ee5\u7ba1\u7406\u767b\u5f55\u81ea\u52a8\u6253\u5f00\u7684\u7a0b\u5e8f\uff0c\u4ee5\u53ca\u7ba1\u7406\u540e\u53f0\u7a0b\u5e8f     </li> <li>\u65f6\u95f4\u673a\u5668     \u65f6\u95f4\u673a\u5668\u53ef\u4ee5\u9009\u62e9\u65f6\u95f4\u673a\u5668\u8fdb\u884c\u5907\u4efd</li> <li>\u8fc1\u79fb\u6216\u8fd8\u539f     \u53ef\u4ee5\u6253\u5f00<code>\u8fc1\u79fb\u52a9\u7406</code>\u8fdb\u884c\u6570\u636e\u8fc1\u79fb\uff0c\u4e5f\u53ef\u4ee5\u6253\u5f00<code>\u62b9\u6389\u52a9\u7406</code>\u62b9\u6389\u6240\u6709\u5185\u5bb9\u548c\u8bbe\u7f6e</li> <li>\u542f\u52a8\u78c1\u76d8     \u5728\u542f\u52a8\u78c1\u76d8\u4e2d\u4e5f\u53ef\u4ee5\u9009\u62e9\u542f\u52a8\u7535\u8111\u7684\u78c1\u76d8\u548c\u7cfb\u7edf</li> </ol> </li> <li>\u5916\u89c2\u9009\u62e9<code>\u6d45\u8272</code>\uff0c\u5f3a\u8c03\u8272\u4e3a<code>\u591a\u8272</code>\uff0c\u8fb9\u680f\u56fe\u6807\u5927\u5c0f\u4e3a<code>\u4e2d</code></li> <li>\u8f85\u52a9\u529f\u80fd\u4e2d\u53ef\u4ee5\u8c03\u8282\u6587\u5b57\u5927\u5c0f     </li> <li>\u63a7\u5236\u4e2d\u5fc3\u5c3d\u53ef\u80fd\u8bbe\u7f6e\u7b80\u6d01\uff0c\u53ea\u5c06\u90e8\u5206\u5fc5\u987b\u4f7f\u7528\u7684\u653e\u5165\u83dc\u5355\u680f\uff0c\u5e76\u5173\u95ed\u53f0\u524d\u8c03\u5ea6     </li> <li>\u9690\u79c1\u4e0e\u5b89\u5168\u6027\u4e2d\u53ef\u4ee5\u8bbe\u7f6e\u5e94\u7528\u6743\u9650\uff0c\u6b64\u5916\u4e3a\u65b9\u4fbf\u5b89\u88c5\u8f6f\u4ef6<code>\u5141\u8bb8\u4ece\u4ee5\u4e0b\u4f4d\u7f6e\u4e0b\u8f7d\u7684\u5e94\u7528\u7a0b\u5e8f</code>\u8bbe\u7f6e\u4e3a<code>\u4efb\u4f55\u6765\u6e90</code></li> <li>\u684c\u9762\u4e0e\u7a0b\u5e8f\u575e\u4e2d\u53ef\u4ee5\u8bbe\u7f6e\u7a0b\u5e8f\u575e\u7684\u5927\u5c0f\u548c\u6548\u679c\uff0c\u8c03\u5ea6\u4e2d\u5fc3\uff0c\u4ee5\u53ca\u89e6\u53d1\u89d2          \u5c06\u8c03\u5ea6\u4e2d\u5fc3\u8bbe\u7f6e\u6210<code>\u4f7f\u7a97\u53e3\u6309\u5e94\u7528\u7a0b\u5e8f\u5206\u7ec4</code>      \u5e76\u5c06\u89e6\u53d1\u89d2\u7684\u5de6\u4e0b\u89d2\u8bbe\u7f6e\u6210<code>\u5c4f\u5e55\u4fdd\u62a4\u7a0b\u5e8f</code>\u65b9\u4fbf\u8fdb\u884c\u9690\u79c1\u7ba1\u7406\uff0c\u6b64\u529f\u80fd\u4e5f\u96c6\u6210\u5728 alfred \u7cfb\u7edf\u529f\u80fd\u4e2d\uff0c\u5173\u952e\u8bcd\u4e3a<code>lock</code>\u89e6\u53d1\u9501\u5c4f\u3002\u53f3\u4e0b\u89d2\u4fdd\u6301\u7cfb\u7edf\u9ed8\u8ba4 <code>\u5feb\u6377\u65b0\u5efa\u5907\u5fd8\u5f55</code>\u3002</li> <li>\u89e6\u63a7\u677f\u4e2d\u5f00\u542f<code>\u5355\u6307\u8f7b\u70b9</code>\uff0c\u8ddf\u8e2a\u901f\u5ea6\u8c03\u6574\u81f3\u6700\u5feb\uff0c\u5e76\u5f00\u542f\u6240\u6709\u7684\u66f4\u591a\u624b\u52bf\u548c\u6eda\u52a8\u7f29\u653e\u529f\u80fd\u3002</li> </ol>"},{"location":"etc/mactips/","title":"Mac tips","text":""},{"location":"etc/mactips/#good-software","title":"good software","text":""},{"location":"etc/mactips/#system-efficiency-tool","title":"system efficiency tool","text":"<ul> <li>Alfread     Alfred is an award-winning app for macOS which boosts your efficiency with hotkeys, keywords, text expansion and more. Search your Mac and the web, and be more productive with custom actions to control your Mac.</li> <li>Homebrew     The Missing Package Manager for macOS (or Linux)</li> <li>cheatsheet     CheatSheet is a free utility app that lets you see keyboard shortcuts with a press of a button. (CheatSheet has been discontinued because it no longer works with macOS 14 Sonoma. KeyCue is still available.)</li> <li>maccy     Maccy is a lightweight clipboard manager for macOS.</li> <li>customShortcuts     Customize Mac Menu Keyboard Shortcuts</li> <li>rectangle     Move and resize windows in macOS using keyboard shortcuts or snap areas</li> <li>webCatalog     Transform websites into desktop apps with WebCatalog Desktop, and access a wealth of exclusive apps for Mac, Windows, Linux. Use spaces to organize apps, switch between multiple accounts with ease, and boost your productivity like never before.     I can add X, spotify, chatgpt etc to local and corordinate with alfread to swith those app local</li> <li>Karabiner-Elements     A powerful and stable keyboard customizer for macOS.</li> <li>qwerty learner     \u4e00\u4e2a\u7ec3\u4e60\u76f2\u6253\u548c\u8bb0\u5fc6\u5355\u8bcd\u7684\u597d\u5de5\u5177</li> </ul>"},{"location":"etc/mactips/#system-experience-enhancement-tools","title":"system experience enhancement tools","text":"<ul> <li>ClashX     A rule based proxy For Mac base on Clash.</li> <li>ClashX-Pro.     proxy-providers and rule-providers</li> <li>Adguard     Surf the Web ad-free and safely. Shield up!     in settings open \u52a9\u624b for safari and chrome.</li> <li>Bartender     Bartender is an award-winning app for macOS that superpowers your menu bar, giving you total control over your menu bar items, what's displayed, and when, with menu bar items only showing when you need them.     Bartender improves your workflow with quick reveal, search, custom hotkeys and triggers, and lots more.</li> <li>BetterTouchTool     BetterTouchTool is a great, feature packed app that allows you to customize various input devices on your Mac.</li> <li>AppCleaner     AppCleaner is a small application which allows you to thoroughly uninstall unwanted apps.</li> </ul>"},{"location":"etc/mactips/#software-reference-website","title":"software reference website","text":"<ul> <li>appstorrent</li> <li>xclient</li> </ul>"},{"location":"etc/mactips/#shortcuts","title":"shortcuts","text":"<ul> <li>cheatsheet <code>command</code> 2s view the shortcuts of application's menu bar </li> <li><code>shift + command + .</code> \u6253\u5f00\u9690\u85cf\u6587\u4ef6\u5939</li> <li>\u5f00\u673a\u952e + <code>command + R</code> \u4ece\u5185\u5efa macOS \u6062\u590d\u7cfb\u7edf\u542f\u52a8</li> <li>\u5f00\u673a\u952e + <code>option</code> \u542f\u52a8\u8fdb\u5165\u201c\u542f\u52a8\u7ba1\u7406\u5668\u201d\uff0c\u60a8\u53ef\u4ee5\u4ece\u4e2d\u9009\u53d6\u5176\u4ed6\u53ef\u7528\u7684\u542f\u52a8\u78c1\u76d8\u6216\u5b97\u5377</li> <li>mac \u7684 \u542f\u52a8\u7ec4\u5408\u952e</li> <li><code>option +delete</code>  delete a word</li> <li><code>command + delete</code> delete a line</li> <li><code>enter</code> rename the file or folder</li> <li><code>fn</code> switch input method</li> </ul>"},{"location":"etc/mactips/#configuration","title":"configuration","text":"<ul> <li>mac set up guide</li> <li>my dotfiles </li> <li>some new mac settings </li> </ul>"},{"location":"etc/mactips/#change-user-home-folder-name","title":"change user home folder name <code>~</code>","text":"<ul> <li>change home folder name </li> <li>ennable root user login after log out or restart select others then user name fill in <code>root</code> password fill in password for <code>root</code> </li> </ul>"},{"location":"etc/mactips/#use-time-machine-backup-system-and-replace-ssd","title":"use time machine backup system and replace SSD","text":"<ul> <li>create external booter </li> <li>youtube replace SSD reference </li> <li>use time machine backup mac after backup when restart the new mac select use time machine restore datas  </li> <li>mac \u542f\u52a8\u7ec4\u5408\u952e </li> </ul>"},{"location":"etc/mactips/#proxy","title":"proxy","text":"<ul> <li>telegram  data and storage &gt; use proxy &gt; socks5 host: 127.0.0.1  port: 7890 (which is the port for clashX)</li> </ul>"},{"location":"etc/mactips/#spotify","title":"Spotify","text":"<p>when counter with country and region are different from your information use proxy in the login interface go settings use proxy socks5 host: 127.0.0.1   port: 7890   </p> <ul> <li>clashX allow LAN, to let other devices to go though the GFW without download clash and purchase proxy service, and you can turn off the DHCP <ol> <li>let your Computer and devices connected to the same LAN  </li> <li>turn on the allow lan button of clashX</li> <li>open the network settings and remember the ip address </li> <li>open ipad network settings -&gt; proxy configuration -&gt; mannual select</li> <li>fill in the ip address and port is 7890 (clashX port)  </li> </ol> </li> </ul>"},{"location":"etc/mactips/#chatgpt","title":"chatgpt","text":"<ul> <li>webCatalog     Transform websites into desktop apps with WebCatalog, and access a wealth of exclusive apps for Mac,     then you can pack the chatgpt website in local and revoke chatgpt with Alfred  </li> <li>SMS activate     register a chapgpt account then you can use the free chatgpt version.</li> <li>proxy group  add <code>- DOMAIN-SUFFIX,chat.openai.com,\u52a8\u753b\u75af</code> or <code>- DOMAIN-SUFFIX,chat.openai.com,\u7535\u62a5\u5439\u6c34</code> in the configuration file, the ip address will be changed to taiwan to use ChatGpt, and ban auto update in \u914d\u7f6e/\u6258\u7ba1\u914d\u7f6e</li> </ul>"},{"location":"etc/mactips/#picture-bed","title":"picture bed","text":"<p>upload image you can  </p> <ol> <li>use PicGo extension for vscode use <code>option+command+u</code> to upload the image  <ol> <li>select extension-&gt;installed-&gt;PicGo-&gt;settings: <code>picgo&gt; pic bed&gt; current: smms</code></li> <li><code>picgo&gt; pic bed&gt; smms&gt; tokens:</code>  add your sm.ms token </li> </ol> </li> <li>use github for your picture bed (not recommend ) </li> </ol>"},{"location":"etc/mactips/#auto-fill-passphase-for-ssh","title":"auto fill passphase for ssh","text":"<p><code>ssh-add</code> then fill in the passphase <code>ssh-agent</code> to auto fill passphase  </p>"},{"location":"etc/mactips/#set-off-ipv6-wi-fi","title":"set off ipv6 Wi-Fi","text":"<p><code>sudo networksetup -listallnetworkservices</code> <code>sudo networksetup -setv6off Wi-Fi</code> then the wifi ip will changed from ipv6 to ipv4  </p>"},{"location":"etc/mactips/#font","title":"font","text":"<ul> <li>iterm2 <code>Droid Sans Mono Slashed for Powerline</code></li> <li>terminal <code>SM Mono Regular</code></li> <li>mkdocs <code>Roboto Slab</code></li> </ul>"},{"location":"etc/mactips/#keyboard","title":"keyboard","text":"<ul> <li>in settings keyboard -&gt; keyboard <code>when stoke fn key, change input method</code>.  </li> <li>in settings keyboard -&gt; modifier keys(\u4fee\u9970\u952e) -&gt; <code>caps lock : escape</code>.  </li> <li>in karabiner-elements  <ul> <li>find all devices set <code>caps lock: escape</code> and <code>escape: caps lock</code>.</li> <li>Apple internal keyboard set <code>caps lock : escape</code> and <code>escape : caps lock</code>.  </li> <li>bluetooth usb host controller <code>caps lock : escape</code> and <code>escape: caps lock</code>.</li> </ul> </li> </ul>"},{"location":"etc/mactips/#github-push","title":"github \u514d\u5bc6 push","text":"<ul> <li>gh <code>brew install gh</code></li> <li><code>gh auth login</code> \u6309\u7167\u63d0\u793a\u91c7\u7528 ssh  </li> </ul>"},{"location":"etc/mactips/#store-web-resources","title":"store web resources","text":"<ul> <li>\u89c6\u9891\u4e0b\u8f7d\uff1a<code>yt-dlp</code></li> <li><code>youtube-dl -a videos.txt</code></li> <li>\u6252\u8bfe\u7a0b\u9875\u9762\u6240\u6709\u8d44\u6e90\uff1a <code>wget -mkEpnp --no-check-certificate</code>  \u94fe\u63a5</li> </ul>"},{"location":"etc/mactips/#mac-reference-website","title":"mac reference website","text":"<ul> <li>\u6280\u672f\u89c4\u683c</li> <li>command line tools \u4e0b\u8f7d </li> </ul>"},{"location":"etc/mactips/#clashx-pro-rule-set-proxy-set","title":"clashX-pro rule-set proxy-set","text":"<p>\u7531\u4e8e\u6700\u5f00\u59cb\u4e70\u7684\u4e00\u5bb6\u673a\u573a\u8dd1\u8def\uff0c\u8ba9\u6211\u4e0d\u5f97\u4e0d\u5728 github \u4e0a\u63a5\u89e6\u5230\u4e86 clashX-pro, \u5bf9clashX pro \u7684 proxy-providers \u548c rule-providers \u8fd9\u4e24\u6837\u529f\u80fd\u4ea7\u751f\u4e86\u5f3a\u70c8\u5174\u8da3\uff0c\u4f46\u540c\u65f6\u4e5f\u9047\u5230\u4e86\u4e0d\u5c11\u95ee\u9898\u3002  </p> <ul> <li><code>unmarshal errors</code> \u53ef\u80fd\u662f\u7531\u4e8e\u673a\u573a\u63d0\u4f9b\u7684\u94fe\u63a5\u5e76\u975e\u662fclash\u8ba2\u9605\u94fe\u63a5\uff0c\u9700\u8981\u8fdb\u884c\u8ba2\u9605\u8f6c\u6362 \u5e38\u89c1\u9519\u8bef </li> <li>\u9664\u4e86 <code>proxy-providers</code> \u7684 <code>provider</code> \u53ef\u4ee5\u4f7f\u7528 <code>filter:</code> \u5b57\u6bb5\u5916\uff0c<code>proxy-groups</code> \u4e2d\u4e5f\u53ef\u4ee5\u5728\u4f7f\u7528 <code>use</code> \u5b57\u6bb5\u540e\u4f7f\u7528 <code>filter</code> \u5b57\u6bb5\uff0c\u4f8b\u5982     <pre><code>proxy-providers:\n  provider2:\n    type: http\n    url: url2\n    interval: 86400\n    path: ./proxyset/provider2.yaml\n    filter: '^(?!.*12).*'  # golang \u8d1f\u5411\u524d\u77bb\uff08negative lookahead\uff09\u6392\u9664\u90a3\u4e9b\u500d\u7387\u4e3a12 \u7684\u5f88\u5751\u7684\u8282\u70b9\n    health-check:\n      enable: true\n      interval: 600\n      url: http://www.gstatic.com/generate_204\n\n\nproxy-groups:\n  - name: \u7f8e\u56fd\n    type: url-test\n    url: http://www.gstatic.com/generate_204\n    interval: 500\n    use: \n      - provider1\n    filter: '\u7f8e\u56fd' # golang regrex \u5339\u914d\u5916\u90e8\u4ee3\u7406\u96c6 provider1 \u4e2d\u90a3\u4e9b\u8282\u70b9\u540d\u79f0\u4e2d\u5305\u542b\u7f8e\u56fd\u7684\u8282\u70b9\n</code></pre></li> <li>\u8fd8\u6709\u5176\u4ed6\u5f88\u591a\u5c0f\u95ee\u9898\u548c\u529f\u80fd\u53ef\u4ee5\u63a2\u7d22\uff0c\u5c31\u4e0d\u4e00\u4e00\u5217\u4e3e\u4e86</li> </ul>"},{"location":"etc/prose/","title":"prose","text":""},{"location":"etc/prose/#2023","title":"2023\u5e74\u7684\u4e00\u4e9b\u603b\u7ed3","text":"<p>\u4e00\u4e9b\u5173\u4e8e\u8fc7\u53bb\u7684\u7b80\u5355\u5206\u6790\uff0c\u6211\u4e0d\u60f3\u5f53\u4e00\u4e2a\u6d3b\u5728\u8fc7\u53bb\u7684\u4eba\uff0c\u73b0\u5728\u6211\u66f4\u613f\u610f\u505a\u4e00\u4e2a\u6d3b\u5728\u5f53\u4e0b\uff0c\u4e13\u6ce8\u4e8e\u5f53\u4e0b\uff0c\u5bf9\u4e0d\u592a\u8fdc\u7684\u672a\u6765\u6709\u4e00\u5b9a\u60f3\u6cd5\u7684\u4eba\u3002\u4f46\u5982\u679c\u8fc7\u53bb\u7684\u4e8b\u80fd\u6210\u4e3a\u4e00\u79cd\u7ecf\u5386\u518d\u7ed3\u5408\u6211\u638c\u63e1\u7684\u77e5\u8bc6\uff0c\u52a0\u4ee5\u5206\u6790\uff0c\u6211\u4f1a\u89c9\u5f97\u6211\u5bf9\u8fd9\u4e2a\u4e16\u754c\u7684\u770b\u6cd5\u66f4\u52a0\u6e05\u6670\uff0c\u79bb\u8fd9\u4e2a\u4e16\u754c\u7684\u771f\u76f8\u66f4\u8fd1\u4e00\u6b65\u3002</p> <p>\u4ece\u5927\u4e8c\u5f00\u59cb\u7684\u65f6\u5019\u6211\u7684\u5fc3\u4e2d\u5c31\u4e00\u76f4\u6709\u4e00\u4e2a\u95ee\u9898\u8426\u7ed5\u5728\u6211\u7684\u5fc3\u5934\uff0c\u5c31\u662f\u6211\u4e00\u76f4\u6000\u7591\u81ea\u5df1\u662f\u4e0d\u662f\u4e0d\u9002\u5408\u8ba1\u7b97\u673a\u8fd9\u4e2a\u4e13\u4e1a\uff08\u672c\u79d1\u8f6f\u4ef6\u5de5\u7a0b\uff0c\u8ba1\u7b97\u673a\u4e8c\u7ea7\u5b66\u79d1\uff09\uff0c\u8fd9\u4e2a\u95ee\u9898\u966a\u4f34\u4e86\u6211\u75db\u82e6\u7684\u5927\u5b66\u751f\u6daf\uff0c\u90a3\u79cd\u75db\u82e6\u5927\u7ea6\u5c31\u662f\u5c31\u7b97\u6211\u60f3\u5b66\u597d\uff0c\u5374\u600e\u4e48\u4e5f\u5b66\u4e0d\u597d\uff1b\u65e0\u8bba\u6211\u600e\u6837\u4ed8\u51fa\u52aa\u529b\uff0c\u5374\u5f97\u4e0d\u5230\u6b63\u53cd\u9988\u3002\u9ad8\u4e2d\u65f6\u671f\u90a3\u79cd\u4f18\u7b49\u751f\u7684\u81ea\u4fe1\u9010\u6e10\u7834\u788e\uff0c\u70ed\u60c5\u53d8\u6210\u4e86\u9ebb\u6728\uff0c\u4e45\u800c\u4e45\u4e4b\uff0c\u6211\u4fbf\u6210\u4e86\u4e00\u4e2a\u5f97\u8fc7\u4e14\u8fc7\uff0c\u4e00\u6709\u7a7a\u95f2\u65f6\u95f4\u4fbf\u6253\u6e38\u620f\uff0c\u53ea\u60f3\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\u62ff\u5230\u6240\u6709\u5b66\u5206\u5c3d\u81ea\u5df1\u6240\u80fd\u6df7\u4e2a\u6bd5\u4e1a\u7684\u6df7\u5b50\uff0c\u6211\u53ea\u80fd\u4e0d\u77e5\u4e3a\u4f55\u800c\u5fd9\u5730\u5fd9\u788c\u800c\u53c8\u6beb\u65e0\u6536\u83b7\u5730\u5c3d\u529b\u5730\u62ff\u5230\u6bcf\u4e00\u79d1\u7684\u5b66\u5206\u3002\u4e8b\u5b9e\u4e0a\u6211\u633a\u52aa\u529b\u7684\uff0c\u56e0\u4e3a\u6211\u7684\u52a0\u6743\u6210\u7ee9\u4e5f\u80fd\u6392\u5728\u524d25%\uff0c\u4f46\u6211\u7684\u4e13\u4e1a\u8bfe\u5374\u603b\u662f\u62d6\u6211\u7684\u540e\u817f\uff0c\u6211\u662f\u4e00\u4e2a\u6709\u4e00\u5b9a\u5b8c\u7f8e\u4e3b\u4e49\u8272\u5f69\u7684\u4eba\uff0c\u800c\u4e14\u6211\u76f8\u4fe1\u5174\u8da3\u548c\u5929\u8d4b\u8fd9\u79cd\u4e1c\u897f\uff0c\u6240\u4ee5\u5f53\u73b0\u5b9e\u78e8\u706d\u4e86\u6211\u7684\u5174\u8da3\u5e76\u5426\u5b9a\u6211\u7684\u65f6\u5019\uff0c\u6211\u4e0d\u5f97\u4e0d\u5c06\u6b64\u548c\u547d\u8fd0\u8054\u7cfb\u4e86\u8d77\u6765\u3002\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u5185\uff0c\u6211\u5bf9\u8ba1\u7b97\u673a\u611f\u5230\u6050\u60e7\u5e76\u5f00\u59cb\u6392\u65a5\u548c\u5426\u5b9a\u81ea\u6211\u3002\u6211\u60f3\u8fc7\u5f88\u591a\u65b9\u9762\u7684\u539f\u56e0\uff0c\u6bd4\u5982\u662f\u4e0d\u662f\u6211\u63a5\u89e6\u8ba1\u7b97\u673a\u592a\u8fdf\uff08\u6211\u4e0a\u5927\u5b66\u624d\u5f00\u59cb\u6709\u624b\u673a\u548c\u7535\u8111\uff09\uff0c\u662f\u4e0d\u662f\u5929\u751f\u6211\u624d\u5728\u5176\u4ed6\u5730\u65b9\uff0c\u6211\u5c31\u662f\u4e0d\u9002\u5408\uff0c\u547d\u4e2d\u6ce8\u5b9a\u7684\u4e8b\uff0c\u662f\u4e0d\u662f\u6211\u4e0d\u591f\u52aa\u529b\uff0c\u6211\u60f3\u8fc7\u5f88\u591a\u5f88\u591a\uff0c\u90a3\u65f6\u5019\u6211\u505a\u8fc7\u4e00\u573a\u5669\u68a6\uff0c\u6211\u68a6\u89c1\u6211\u91cd\u65b0\u56de\u5230\u4e86\u9ad8\u4e09\uff0c\u4f46\u6211\u518d\u4e5f\u65e0\u6cd5\u5728\u8003\u573a\u4e2d\u8fbe\u5230\u6211\u66fe\u7ecf\u7684\u9ad8\u5ea6\uff0c\u6211\u4ece\u5669\u68a6\u4e2d\u9192\u6765\uff0c\u51b7\u6c57\u6d78\u900f\u4e86\u6211\u7684\u8863\u670d\uff0c\u6211\u518d\u56de\u5230\u5669\u68a6\u822c\u7684\u73b0\u5b9e\u3002\u6700\u540e\u538b\u57ae\u6211\u7684\u4e00\u6839\u7a3b\u8349\u662f\u6211\u5728\u7814\u7a76\u751f\u8003\u8bd5\u4e2d\u4e13\u4e1a\u8bfe\u53c8\u8003\u7684\u6700\u5dee\uff0c\u73b0\u5b9e\u7ed9\u4e86\u6211\u7edd\u671b\u7684\u4e00\u51fb\uff0c\u8bd5\u95ee\u4e00\u4e2a\u8ffd\u6c42\u5b8c\u7f8e\u7684\u4eba\u5982\u4f55\u63a5\u53d7\u4e00\u4e2a\u8fd9\u6837\u7684\u81ea\u5df1\uff0c\u90a3\u65f6\u5019\u6211\u6253\u7b97\u5f7b\u5e95\u548c\u8fd9\u4e2a\u4e13\u4e1a\u8bc0\u522b\uff0c\u6211\u518d\u4e5f\u4e0d\u60f3\u518d\u78b0\u8ba1\u7b97\u673a\u4e86\u3002  </p> <p>\u6211\u5176\u5b9e\u4e5f\u80fd\u53d1\u73b0\u5f88\u591a\u95ee\u9898\uff0c\u4f46\u6211\u51ed\u6211\u7684\u4e2a\u4eba\u80fd\u529b\u627e\u4e0d\u5230\u8def\uff0c\u800c\u4e14\u90a3\u65f6\u5019\u6211\u5f88\u5c11\u5c06\u81ea\u5df1\u7684\u5931\u8d25\u548c\u5b66\u6821\u548c\u8001\u5e08\u8054\u7cfb\u8d77\u6765\uff0c\u6bd5\u7adf\u534e\u79d1\u4e5f\u662f\u4e00\u6240top10\u7684\u9ad8\u6821\uff0c\u5728\u7edd\u5927\u591a\u6570\u4eba\u5fc3\u4e2d\u662f\u4e00\u4e2a\u6743\u5a01\u7684\u5730\u65b9\u3002\u6211\u662f\u6000\u7740\u9057\u61be\u548c\u5931\u8d25\u6bd5\u4e1a\u7684\uff0c\u6211\u5f88\u52aa\u529b\u4f46\u4e00\u65e0\u6240\u83b7\u3002\u6211\u53ea\u80fd\u8ddf\u7740\u547d\u8fd0\u7684\u5b89\u6392\u968f\u5fc3\u6240\u52a8\uff0c\u4e0d\u65ad\u63a2\u7d22\uff0c\u53ea\u80fd\u4e0d\u65ad\u5730\u5bfb\u627e\u81ea\u5df1\u7684\u624d\u80fd\u70b9\uff0c\u6211\u53c8\u5728\u7535\u6c14\u5de5\u7a0b\u63a2\u7d22\u4e86\u4e24\u5e74\uff0c\u8fd9\u4e24\u5e74\u7eaf\u7cb9\uff0c\u62ab\u661f\u6234\u6708\uff0c\u6211\u7684\u667a\u5546\u548c\u7ecf\u5386\u4e0d\u65ad\u63d0\u5347\uff0c\u6211\u5bf9\u4e8b\u7269\u7684\u770b\u6cd5\u4e0d\u65ad\u6df1\u5165\uff0c\u6211\u5f00\u59cb\u80fd\u4ece\u522b\u4eba\u7684\u89d2\u5ea6\u601d\u8003\u95ee\u9898\uff0c\u6211\u5f00\u59cb\u80fd\u4e0d\u65ad\u601d\u8003\u4e2a\u4eba\u4e43\u81f3\u793e\u4f1a\u5e76\u80fd\u5f52\u7eb3\u603b\u7ed3\u4e00\u4e9b\u6df1\u5c42\u6b21\u7684\u539f\u56e0\uff0c\u56e0\u4e3a\u7ecf\u5386\u8fc7\u4f4e\u8c37\uff0c\u6240\u4ee5\u6211\u80fd\u4f53\u4f1a\u5f31\u8005\u5fc3\u4e2d\u6240\u60f3\uff1b\u56e0\u4e3a\u6211\u5f88\u52aa\u529b\uff0c\u6240\u4ee5\u6211\u660e\u767d\u6210\u529f\u7684\u6765\u4e4b\u4e0d\u6613\u3002\u6211\u9010\u6e10\u4ece\u66b4\u623e\u523b\u8584\u53d8\u5f97\u5305\u5bb9\uff0c\u4ece\u8f7b\u6d6e\u53d8\u5f97\u6c89\u7740\u51b7\u9759\uff0c\u6211\u4e0d\u65ad\u5256\u6790\u81ea\u5df1\uff0c\u8ba4\u8bc6\u81ea\u6211\u3002\u591c\u6df1\u4eba\u9759\u7684\u65f6\u5019\uff0c\u6216\u8005\u4e00\u4e2a\u4eba\u6563\u6b65\u7684\u65f6\u5019\uff0c\u6211\u603b\u4f1a\u601d\u7d22\u4e00\u4e9b\u201c\u6b63\u4e8b\u201d\u4e4b\u5916\u7684\u4e8b\u60c5\uff0c\u5c3d\u7ba1\u6700\u540e\u7684\u7ed3\u679c\u4e0d\u5c3d\u4eba\u610f\uff0c\u4f46\u6211\u8ba4\u4e3a\u8fd9\u4e24\u5e74\u91cd\u65b0\u7ed9\u4e86\u6211\u89e3\u51b3\u95ee\u9898\u7684\u667a\u529b\u548c\u4eba\u683c\u3002\u590d\u8bd5\u5b8c\u6211\u8d70\u51fa\u9762\u8bd5\u6559\u5ba4\u7684\u65f6\u5019\uff0c\u6211\u5c31\u5927\u81f4\u77e5\u9053\u7ed3\u679c\u4e86\uff0c\u4e00\u662f\u4e00\u4e2a\u7535\u6c14\u5b66\u9662\u7684\u4eba\u5bf9\u6211\u8bf4\uff0c\u4f60\u7684\u7ade\u4e89\u5bf9\u624b\u90fd\u662f\u672c\u5b66\u9662\u7684\u4eba\uff1b\u4e8c\u662f\u90a3\u65f6\u5019\u5f53\u6211\u8d70\u51fa\u6559\u5ba4\u7684\u65f6\u5019\u4e00\u4e2a\u8001\u5e08\u5bf9\u6211\u8bf4\u4e86\u4e00\u53e5\u201c\u8c22\u8c22\u201d\uff0c\u6211\u8eab\u540e\u7a81\u7136\u4e00\u80a1\u51c9\u610f,\u6211\u7684\u9762\u8bd5\u6210\u7ee9\u8fdc\u8fdc\u4f4e\u4e8e\u4ed6\u4eec\uff0c\u540e\u6765\u6211\u601d\u8003\u8fd9\u4ef6\u4e8b\u7684\u65f6\u5019\uff0c\u6211\u4f1a\u89c9\u5f97\u5176\u5b9e\u8fd9\u662f\u4e00\u6b21\u4e86\u4e0d\u8d77\u7684\u63a2\u7d22\uff0c\u540c\u65f6\u90a3\u4e9b\u8001\u5e08\u4e5f\u914d\u4e0d\u4e0a\u6211\u3002 </p> <p>\u547d\u8fd0\u7ed9\u4e86\u6211\u5b83\u5e94\u6709\u7684\u7b54\u6848\uff0c\u6211\u53ea\u80fd\u91cd\u65b0\u56de\u5230\u8ba1\u7b97\u673a\u7684\u9886\u57df\u3002\u65f6\u95f4\u6765\u5230\u4e86\u75ab\u60c5\u7ed3\u675f\u7684\u56db\u6708\uff0c\u6211\u5173\u6ce8\u4e86b\u7ad9\u4e0a\u4e00\u4e2a\u6559\u5b9e\u7528\u6280\u80fd\u7684up\u4e3b\u9e64\u7fd4\u4e07\u91cc\uff0c\u4e00\u6b21\u5076\u7136\u95f4\u6211\u63a5\u89e6\u5230\u4e86\u4ed6\u7684\u4e00\u7bc7\u63a8\u6587\u8bb2\u7684\u662f\u201c\u5982\u4f55\u8ba9\u81ea\u5df1\u770b\u4e0a\u53bb\uff0c\u95fb\u8d77\u6765\u90fd\u50cf\u662f\u4e00\u4e2aCSer\u201d\uff0c \u4ece\u91cc\u9762\u6211\u770b\u5230\u4e86CSDIY\u8fd9\u672c\u4e66\uff0c\u90a3\u4e2a\u4f5c\u8005\u8bf4\u4ed6\u52a8\u7b14\u7684\u539f\u56e0\u4e5f\u662f\u53d7\u5230\u4e86CSDIY\u7684\u5f71\u54cd\uff0c\u6211\u4e00\u53e3\u6c14\u5c06\u8fd9\u7bc7\u63a8\u6587\u770b\u4e86\u597d\u51e0\u904d\uff0c\u7279\u522b\u662f\u540e\u8bb0\u8ba9\u6211\u5bf9\u5927\u591a\u6570\u4eba\u5927\u5b66\u751f\u6d3b\u7684\u75db\u82e6\u8c41\u7136\u5f00\u6717\uff0c\u524d\u8a00\u4e5f\u8ba9\u6211\u77e5\u9053\u54ea\u6015\u662f\u50cf\u4f5c\u8005\u90a3\u6837\u4f18\u79c0\u7684\u5317\u5927\u4eba\u4e5f\u66fe\u6000\u7591\u8fc7\u81ea\u5df1\u662f\u5426\u9002\u5408\u5b66\u4e60\u8ba1\u7b97\u673a\u3002\u4ece\u4e94\u6708\u4efd\u5f00\u59cb\u7684\u4e00\u5e74\u91cc\u6211\u5f00\u59cb\u6253\u5f00\u4e86\u65b0\u4e16\u754c\u7684\u5927\u95e8\uff0c\u8fd9\u4e00\u5e74\u91cc\uff08\u5b9e\u9645\u4e0a\u53ea\u67098\u4e2a\u6708\uff09\uff0c\u6211\u51e0\u4e4e\u9a6c\u4e0d\u505c\u8e44\u7684\u6311\u9009\u4e86\u4e00\u4e9b\u63a8\u8350\u8bfe\u7a0b\u91cc\u9762\u6700\u57fa\u7840\u6700\u7b80\u5355\u7684\u8bfe\u7a0b\uff0c\u5c3d\u7ba1\u5982\u6b64\u5176\u8bfe\u7a0b\u96be\u5ea6\u53ea\u6709\u7ecf\u5386\u8fc7\u7684\u4eba\u624d\u77e5\u9053\u3002\u6211\u5728MIT-MissingSemester\u4e0a\u5b66\u4e60\u4e86\u4e13\u4e1a\u8ba1\u7b97\u673a\u4eba\u4f7f\u7528\u8ba1\u7b97\u673a\u7684\u4e00\u4e9b\u5b9e\u7528\u6280\u80fd\u3001\u6211\u5728CS50X\u4e0a\u770b\u5230\u4e86david\u6325\u6c57\u5982\u96e8\u6bcf\u8282\u8bfe\u8fde\u7eed\u8bb2\u4e24\u4e2a\u5c0f\u65f6\u7684\u8bfe\u7a0b\u5e76\u5c06\u6559\u5b66\u5185\u5bb9\u5f00\u6e90\u5230\u5168\u4e16\u754c\uff0c\u540c\u65f6\u4e3a\u5168\u4e16\u754c\u7684\u5b66\u751f\u914d\u7f6e\u5b9e\u9a8c\u73af\u5883\u548c\u6d4b\u8bd5\u7a0b\u5e8f\u3001\u6211\u548cflyingpig\u4e00\u6837\u5728CS61A\u90a3\u91cc\u6253\u5f00\u4e86\u65b0\u4e16\u754c\u7684\u5927\u95e8\uff0c\u6211\u7b2c\u4e00\u6b21\u770b\u5230\u6709\u4eba\u80fd\u628a\u7a0b\u5e8f\u8bb2\u5230\u54f2\u5b66\u7684\u9ad8\u5ea6\uff0c\u5e76\u5728\u8bfe\u5802\u4e2d\u5206\u4eab\u751f\u6d3b\u4e2d\u7684\u54f2\u5b66\uff0c\u5176\u4f5c\u4e1a\u548c\u6d4b\u8bd5\u7a0b\u5e8f\u8ba9\u4eba\u62cd\u6848\u53eb\u7edd\uff0c\u81f3\u6b64\u5bf9\u7a0b\u5e8f\u6211\u518d\u4e5f\u4e0d\u4f1a\u89c9\u5f97\u4e00\u5934\u96fe\u6c34\u4e86\u3001\u6211\u5728nand2tetris\u90a3\u91cc\u771f\u6b63\u901a\u8fc7 ALU, PC, Memory, D register, A register, demultiplexer\u7b49\u62c6\u89e3\u6c47\u7f16\u6307\u4ee4\u4eb2\u624b\u642d\u5efa\u4e86\u4e00\u4e2a16bitCPU\uff0c\u4eb2\u624b\u5199\u4e86\u4e00\u4e2a\u7b80\u6613\u865a\u62df\u673a\u770b\u6e05\u4e86\u51fd\u6570\u8c03\u7528\u7684\u8fc7\u7a0b\uff0c\u4ece\u6b64\u5728\u6c47\u7f16\u5c42\u9762\u7406\u89e3\u4e86\u51fd\u6570\u8c03\u7528\u548c\u9012\u5f52\u3001\u6211\u5728princeton Algorithms I \u90a3\u91cc\u770b\u5230\u4e86\u4f18\u5316\u5230\u6781\u81f4\u7684\u6570\u636e\u7ed3\u6784\u4ee3\u7801\uff08\u867d\u7136\u592a\u96be\u8ba9\u6211\u7559\u4e86\u4e00\u534a\u5230\u660e\u5e74\uff09\u3001\u6211\u5728Computer Network A top approach \u90a3\u91cc\u6293\u4f4f\u4e86\u8ba1\u7b97\u673a\u7f51\u7edc\u7684\u91cd\u70b9\u534f\u8bae\uff0c\u5176\u914d\u5957\u7684\u5b9e\u9a8c\u5e26\u7740\u4f60\u4e00\u6b65\u4e00\u6b65\u62c6\u89e3\u6570\u636e\u5305\uff0c\u81f3\u5c11\u914d\u5408chatGpt\u6211\u61c2\u600e\u4e48\u5b89\u88c5\u81ea\u5df1\u5bb6\u91cc\u7684 802.11 WIFI\u4e86\uff0c\u7b49\u7b49\u7b49\u7b49\u672a\u6765\u6211\u8fd8\u6709\u505a\u4e0d\u5b8c\u7684\u4e8b\uff0c\u4e3a\u6b64\u6211\u8fd8\u4e13\u95e8\u4e5f\u5efa\u7acb\u4e86\u8fd9\u4e2a\u7f51\u7ad9\u6765\u8bb0\u5f55\u81ea\u5df1\u7684\u5b66\u4e60\u5386\u7a0b(\u5f00\u59cb\u4e8e\u6211\u60f3\u7ed9CS61A\u505a\u505a\u7b14\u8bb0)\u3002\u6211\u7b2c\u4e00\u6b21\u611f\u53d7\u5230\u539f\u6765\u8ba1\u7b97\u673a\u5b66\u8d77\u6765\u662f\u53ef\u4ee5\u8fd9\u4e48\u6709\u610f\u601d\uff0c\u539f\u6765\u8bb2\u6e05\u695a\u540e\u5176\u5b9e\u4e5f\u6ca1\u6709\u90a3\u4e48\u96be\uff0c\u539f\u6765\u5728\u5b8c\u6210CS61A\u540e\u5728Nand2tetris\u7684project8\u90a3\u91cc\u6211\u4e5f\u53ef\u4ee5\u5199\u51faVMTranslator.py\u90a3\u6837\u6f02\u4eae\u4f18\u96c5\u7684\u4ee3\u7801\uff0c\u751a\u81f3\u6211\u89c9\u5f97\u5b83\u7684\u95e8\u69db\u6ca1\u6709\u7535\u6c14\u5de5\u7a0b\u9ad8\uff0c\u800c\u4e14\u5b66\u7684\u90a3\u4e9b\u96be\u5ea6\u5728\u4e09\u9897\u661f\u7684\u8fd8\u6ca1\u6709\u7535\u6c14\u5de5\u7a0b\u7684\u96be\uff0c\u6211\u5fc3\u4e2d\u90a3\u4e2a\u6700\u5927\u7684\u68a6\u9b47\u7ec8\u4e8e\u6d88\u9664\u4e86\uff0c\u539f\u6765\u5176\u5b9e\u6211\u6ca1\u6709\u95ee\u9898\uff0c\u6211\u662f\u8f93\u5728\u4e86\u6559\u80b2\u4f53\u7cfb\uff0c\u8f93\u5728\u4e86\u5b66\u6821\uff0c\u6b7b\u5728\u4e86\u90a3\u4e9b\u8001\u5e08\u624b\u4e0a\u3002\u90a3\u4e9b\u63a8\u8350\u8bfe\u7a0b\u7684\u8001\u5e08\u5e7d\u9ed8\u98ce\u8da3\uff0c\u8ba4\u771f\u8d1f\u8d23\uff0c\u6388\u8bfe\u5bcc\u6709\u6fc0\u60c5\uff0c\u6559\u5b66\u5185\u5bb9\u8be6\u5c3d\uff0c\u751a\u81f3\u80fd\u591f\u5c06\u7a0b\u5e8f\u5c06\u8ba1\u7b97\u673a\u8bb2\u5230\u54f2\u5b66\u7684\u9ad8\u5ea6\u5e76\u5206\u4eab\u81ea\u5df1\u4eba\u751f\u7684\u54f2\u5b66\u3002\u8fd9\u4e00\u5e74\u91cc\u6211\u8fc7\u5f97\u975e\u5e38\u5145\u5b9e\uff0c\u5b66\u4e60\u5f00\u59cb\u53d8\u6210\u4e86\u4e00\u79cd\u4e3b\u52a8\u548c\u4eab\u53d7\u7684\u8fc7\u7a0b\uff08\u867d\u7136\u4e5f\u4f1a\u6709\u957f\u65f6\u95f4\u505a\u4e00\u4ef6\u4e8b\u6709\u65f6\u5019\u7d2f\u5230\u9ebb\u6728\u4e0d\u60f3\u52a8\u7684\u65f6\u5019\uff09\uff0c\u6709\u7684\u95ee\u9898\u4e00\u4e2a\u5c0fproject\u6211\u5c31\u8981\u548c\u5b83battle\u4e00\u4e2a\u661f\u671f\uff0c\u4f46\u90a3\u4e9b\u8bfe\u7a0b\u6211\u8ba4\u4e3a\u53ea\u8981\u5b8c\u6210\u5ea6\u80fd\u670960%\uff0c\u53ea\u8981\u80fd\u62ff\u5230\u53ca\u683c\u5206\uff0c\u5bf9\u4e2a\u4eba\u5bf9\u8ba1\u7b97\u673a\u7684\u7406\u89e3\u90fd\u662f\u8d28\u53d8\u3002\u6211\u91cd\u65b0\u6361\u8d77\u4e86\u8fc7\u53bb\u4e22\u6389\u7684\u4eba\u751f\u76ee\u6807\uff0c\u6211\u60f3\u8d70\u8fc7flyingpig\u8d70\u8fc7\u7684\u8def\u8fbe\u5230flyingpig\u4e09\u5206\u4e4b\u4e00\u7684\u6c34\u5e73\uff08\u8fd9\u662f\u6211\u76ee\u524d\u7684\u552f\u4e00\u76ee\u6807\uff09\uff0c\u5e76\u5728\u5c06\u6765\u5982\u679c\u6709\u80fd\u529b\u6210\u4e3a\u50cf\u4ed6\u4eec\u8fd9\u6837\u7684\u6539\u5584\u8fd9\u4e2a\u4e16\u754c\u7684\u4eba\u3002  </p> <p>\u4e24\u5e74\u524d\u7684\u65f6\u5019\u6211\u5c31\u610f\u8bc6\u5230\u201d\u8ffd\u6c42\u4e2a\u4eba\u4ef7\u503c\u7684\u4eba\u81ea\u7136\u4e0e\u4f17\u4e0d\u540c\u201c\uff0c\u5f53\u65f6\u6211\u5728\u770b\u522b\u4eba\u9493\u9c7c\uff0c\u7136\u540e\u6709\u4e00\u4e2a\u4eba\u7a81\u7136\u8fc7\u6765\u627e\u6211\u5e76\u52a0\u4e86\u5fae\u4fe1\u597d\u53cb\uff0c\u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u7684\u4e86\u89e3\u5e76\u5728\u4e00\u8d77\u5b66\u4e60\u4e00\u6bb5\u65f6\u95f4\u540e\u6211\u4eec\u6210\u4e3a\u4e86\u5f88\u597d\u7684\u670b\u53cb\uff0c\u540e\u6765\u6211\u95ee\u4ed6\u4e3a\u4ec0\u4e48\u5f53\u65f6\u627e\u6211\uff0c\u4ed6\u5bf9\u6211\u8bf4\u201d\u6211\u770b\u5230\u4f60\u7684\u7b2c\u4e00\u773c\u5c31\u89c9\u5f97\u4f60\u4e0d\u4e00\u6837\u201c\uff0c\u4e5f\u8bb8\u5f53\u65f6\u6211\u8868\u9762\u4e0a\u5728\u770b\u522b\u4eba\u9493\u9c7c\uff0c\u5185\u5fc3\u82e5\u6709\u6240\u601d\u663e\u5f97\u6709\u4e9b\u4e0d\u540c\uff0c\u4f46\u66f4\u591a\u7684\u662f\u6211\u89c9\u5f97\u201d\u8ffd\u6c42\u4e2a\u4eba\u4ef7\u503c\u7684\u4eba\u81ea\u7136\u4e0e\u4f17\u4e0d\u540c\u201c\u3002\u4eca\u5e74\u7684\u4e00\u4ef6\u4e8b\u66f4\u52a0\u5370\u8bc1\u4e86\u6211\u7684\u8fd9\u79cd\u60f3\u6cd5\uff0c\u53ea\u662f\u8fd9\u6b21\u6211\u76ee\u6807\u66f4\u52a0\u660e\u786e\uff0c\u4e00\u6b21\u6211\u5728\u81ea\u4e60\u5ba4\u81ea\u4e60\u65f6\u7a81\u7136\u4e00\u4e2a\u5973\u751f\u8fc7\u6765\u52a0\u6211\u597d\u53cb\uff0c\u5938\u6211\u6c14\u8d28\u597d\uff0c\u89c9\u5f97\u6211\u7684\u7406\u6027\u6c14\u8d28\u975e\u5e38\u5438\u5f15\u5979\uff0c\u5979\u8fd8\u95ee\u6211\u5982\u4f55\u4fdd\u6301\u51b7\u9759\u4ee5\u53ca\u60c5\u7eea\u7a33\u5b9a\uff0c\u89c9\u5f97\u6211\u8eab\u4e0a\u6709\u5979\u7f3a\u5c11\u7684\u4e1c\u897f\uff0c\uff08\u5979\u627e\u6211\u9996\u5148\u6392\u9664\u6211\u957f\u5f97\u5e05\uff0c\u56e0\u4e3a\u6211\u786e\u5b9e\u957f\u5f97\u4e0d\u548b\u5730\uff0c\u5979\u8bf4\u7684\u51b7\u9759\u548c\u60c5\u7eea\u7a33\u5b9a\u53ef\u80fd\u662f\u56e0\u4e3a\u6211\u65e2\u6709\u975e\u5e38\u5feb\u4e50\u7f8e\u597d\u7684\u56de\u5fc6\uff0c\u4e5f\u7ecf\u5386\u8fc7\u6781\u7aef\u75db\u82e6\u8270\u96be\u7684\u65f6\u5149\uff0c\u6240\u4ee5\u9762\u5bf9\u60c5\u7eea\u4e0a\u7684\u8d77\u4f0f\u6211\u4f3c\u4e4e\u8868\u73b0\u5f97\u6709\u4e9b\u9ebb\u6728\uff0c\u540c\u65f6\u6211\u7684\u786e\u6709\u610f\u57f9\u517b\u81ea\u5df1\u51b7\u9759\u9762\u5bf9\u95ee\u9898\u7684\u80fd\u529b\uff0c\u4f46\u4e8b\u5b9e\u4e0a\u6211\u5e76\u4e0d\u662f\u4e00\u4e2a\u60c5\u7eea\u7a33\u5b9a\u7684\u4eba\uff09\u3002\u6709\u660e\u786e\u4eba\u751f\u76ee\u6807\u8ffd\u6c42\u4e2a\u4eba\u4ef7\u503c\u7684\u4eba\u548c\u6ca1\u6709\u660e\u786e\u76ee\u6807\u968f\u6ce2\u9010\u6d41\u7684\u4eba\u770b\u6765\u662f\u4e24\u79cd\u4eba\uff0c\u5f53\u65f6\u6211\u53ea\u7528\u4e86\u51e0\u79d2\u949f\u7684\u601d\u8003\u5c31\u5927\u7ea6\u77e5\u9053\u5979\u662f\u5927\u4e00\u7684\uff0c\u56e0\u4e3a\u53ea\u6709\u5927\u4e00\u7684\u4eba\u624d\u4f1a\u6709\u6d3b\u529b\u548c\u6000\u7740\u5bf9\u8fd9\u4e2a\u4e16\u754c\u7684\u597d\u5947\u5fc3\u505a\u8fd9\u6837\u7684\u4e8b\uff0c\u4f46\u6211\u633a\u559c\u6b22\u8fd9\u6837\u7684\u53ef\u7231\u4eba\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u4eba\u6709\u6d3b\u529b\u800c\u4e14\u5e26\u6709\u4e00\u4e1d\u6d6a\u6f2b\u4e3b\u4e49\u8272\u5f69\uff0c\u6211\u5e0c\u671b\u5979\u80fd\u5c11\u7ecf\u5386\u4e00\u4e9b\u7cdf\u5fc3\u7684\u4e8b\uff0c\u7136\u540e\u88ab\u6559\u80b2\u53d8\u6210\u4e00\u4e2a\u65e2\u4e0d\u4f1a\u568e\u5555\u5927\u54ed\u4e5f\u4e0d\u4f1a\u5f00\u6000\u5927\u7b11\u7684\u201d\u9ebb\u6728\u201c\u7684\u4eba\uff0c\u6bd5\u7adf\u6bcf\u4e2a\u4eba\u90fd\u6709\u4e00\u4efd\u5c5e\u4e8e\u81ea\u5df1\u7684\u5473\u9053\u3002   \u6211\u8fd8\u7279\u5730\u4fdd\u5b58\u4e86\u8fd9\u4e24\u5f20\u622a\u56fe\uff0c\u6211\u89c9\u5f97\u8fd9\u662f\u5bf9\u6211\u7684\u81f3\u9ad8\u8d5e\u7f8e\uff0c\u800c\u4e14\u8fd9\u8bc1\u660e\u4e86\u6211\u7684\u60f3\u6cd5\u662f\u6b63\u786e\u7684\u3002</p> <p>\u5b66\u4e86\u4e00\u6bb5\u65f6\u95f4\u7684\u8bfe\u7a0b\u540e\u901a\u8fc7\u5bf9\u6bd4\u56fd\u5185\u7684\u5783\u573e\u8bfe\u7a0b\u6211\u5b8c\u5168\u80fd\u9886\u4f1a\u5230flyingpig\u8bf4\u7684\u201d\u964d\u7ef4\u6253\u51fb\u201c\uff1a  </p> <ul> <li>\u4ed6\u4eec\u7684\u6240\u6709\u8bfe\u7a0b\u90fd\u662f\u5efa\u7acb\u4e00\u4e2a\u72ec\u7acb\u7684\u7f51\u7ad9\uff0c\u4e0d\u4ec5\u7f8e\u89c2\u65b9\u4fbf\uff0c\u800c\u4e14\u975e\u5e38\u5f3a\u8c03 self-enclouse(\u95ed\u5305)\u7684\u6982\u5ff5\uff0c\u51e0\u4e4e\u6240\u6709\u4f60\u6240\u9700\u8981\u7684\u8bfe\u7a0b\u5185\u7684\u8d44\u6599\u90fd\u53ef\u4ee5\u5728\u8bfe\u5802\u4e2d\u627e\u5230\uff0c\u4e0d\u4f1a\u6709\u4ec0\u4e48\u8d85\u7eb2\u5185\u5bb9\u3002</li> <li>\u8bfe\u7a0b\u6781\u5176\u5f3a\u8c03\u5b9e\u8df5\uff0c\u5f80\u5f80\u4e00\u5802\u8bfe\u5bf9\u5e94\u7684\u5b9e\u8df5\u5185\u5bb9\u662f\u8bfe\u7a0b\u5185\u5bb9\u81f3\u5c113\u500d\u7684\u8bad\u7ec3\u91cf\uff0c\u6bd4\u5982 lab, hw, proj, discuss \u7b49\u7b49\uff0c\u5b9e\u8df5\u5185\u5bb9\u7684\u96be\u5ea6\u901a\u5e38\u6bd4\u4e0a\u8bfe\u5185\u5bb9\u96be\u5f88\u591a\u3002</li> <li>\u4fdd\u59c6\u7ea7\u7684\u8bfe\u7a0b\u6559\u5b66\uff0c\u5c31\u50cf\u5e96\u4e01\u89e3\u725b\u822c\u5c06\u5173\u952e\u95ee\u9898\u7559\u7ed9\u4f60\uff0c\u800c\u4e0d\u4f1a\u5728\u5b9e\u9a8c\u73af\u5883\u914d\u7f6e\u7b49\u7b49\u7410\u788e\u7684\u4e8b\u60c5\u4e0a\u6d6a\u8d39\u4f60\u8fc7\u591a\u7684\u65f6\u95f4\uff0c\u6d88\u78e8\u4f60\u7684\u5174\u81f4\uff0c\u800c\u4e14\u90fd\u662f\u5355\u72ec\u7684\u5b9e\u9a8c\u6587\u6863\uff0c\u975e\u5e38\u7ec6\u81f4\u3002\u53ea\u8981\u613f\u610f\u82b1\u8d39\u529f\u592b\uff0c\u4e00\u5b9a\u6709\u6536\u83b7\u3002</li> <li>\u7f16\u7a0b\u4efb\u52a1\u90fd\u4f1a\u6709\u914d\u5957\u7684\u6d4b\u8bd5\u7a0b\u5e8f\u6216\u8005\u6d4b\u8bd5\u6846\u67b6\uff0c\u4f60\u53ef\u4ee5\u5f88\u597d\u7684\u5f97\u5230\u53cd\u9988\u3002</li> <li>\u8ba1\u7b97\u673a\u7684\u672f\u8bed\u5c31\u662f\u672f\u8bed\uff0cterminology\u4e2d\u5e26term\u7684\u5c31\u662fterm, \u5c31\u50cf\u9012\u5f52\u6811\u4e2d\u7684\u53f6\u5b50\u8282\u70b9\u4e00\u6837\u4e0d\u53ef\u518d\u5206\uff0c\u7ffb\u8bd1\u6210\u4e2d\u6587\u5c31\u53d8\u5473\u4e86\uff0c\u6240\u4ee5\u80fd\u591f\u4f7f\u7528\u82f1\u6587\u672f\u8bed\u5c31\u662f\u66f4\u52a0\u51c6\u786e\u5f97\u591a\u3002\u591a\u591a\u9605\u8bfb\u4ed6\u4eec\u7684\u6587\u6863\u7edd\u5bf9\u5927\u6709\u88e8\u76ca\u3002  </li> </ul> <p>\u518d\u5bf9\u6bd4\u4e00\u4e0b\u6211\u81ea\u8eab\u611f\u53d7\u7684\u56fd\u5185\u6559\u5b66\uff0c</p> <ul> <li>\u7b2c\u4e00\uff0c\u5927\u5b66\u662f\u4f2a\u88c5\u6210\u5b66\u6821\u7684\u79d1\u7814\u673a\u6784\uff0c\u90a3\u4e9b\u8001\u5e08\u4eec\u7684\u9996\u8981\u4efb\u52a1\u90fd\u662f\u5e94\u4ed8\u79d1\u7814\u8003\u6838\u800c\u975e\u6559\u4e66\u80b2\u4eba\uff0c\u5b66\u6821\u4e5f\u662f\u9762\u5411\u5b66\u672f\u7814\u7a76\u578b\u4eba\u624d\u57f9\u517b\uff08\u5c31\u6211\u90a3\u4e2a\u5783\u573e\u5b66\u9662\u9ad8\u6500\u4e0d\u4e0a\u5b66\u672f\u8fd9\u4e2a\u540d\u8bcd\uff0c\u66f4\u50cf\u662f\u4e00\u4e2a\u56db\u4e0d\u50cf\uff0c\u4e0d\u4f26\u4e0d\u7c7b\uff09\uff0c\u5c06\u6240\u6709\u4eba\u653e\u8fdb\u540c\u4e00\u4e2a\u8d5b\u9053\uff0c\u6295\u5165\u4e00\u5b9a\u8d44\u91d1\uff0c\u6bcf\u5e74\u80fd\u6536\u83b7\u76f8\u5e94\u7684\u79d1\u7814\u4ea7\u51fa\u5373\u53ef\uff0c\u6240\u4ee5\u4e3a\u4ec0\u4e48\u90a3\u4e9b\u8ddf\u7740\u5b66\u6821\u8d70\u7684\u6700\u540e\u88ab\u6dd8\u6c70\u7684\u4eba\u4f1a\u4e25\u91cd\u548c\u793e\u4f1a\u8131\u8282\uff0c\u5c31\u62ff\u8ba1\u7b97\u673a\u7684\u57f9\u517b\u65b9\u5f0f\u6765\u8bf4\uff0c\u4e0d\u4ec5\u4e0d\u80fd\u7528\u548c\u56fd\u5916\u76f8\u540c\u7684\u201d\u6210\u719f\u201c\u6765\u5f62\u5bb9\uff0c\u66f4\u663e\u5f97\u5e7c\u7a1a\u53ef\u7b11\uff0c\u751a\u81f3\u662f\u6ed1\u7a3d\u8bbd\u523a\u3002</li> <li>\u7b2c\u4e8c\u5c31\u662f\u635e\u94b1\uff08\u6bd4\u5982\u62db\u6536\u7814\u7a76\u751f\u81ea\u5df1\u5f53\u8001\u677f\uff0c\u8ba9\u7814\u7a76\u751f\u8fdb\u81ea\u5df1\u5b9e\u9a8c\u5ba4\u6253\u9ed1\u5de5\uff09\u3002</li> <li>\u7b2c\u4e09\u624d\u662f\u4e0a\u8bfe\uff0c\u81f3\u4e8e\u6559\u5b66\u5982\u4f55\uff0c\u5bf9\u4ed6\u4eec\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\uff0c\u6240\u4ee5\u4f60\u4f1a\u53d1\u73b0\u78b0\u5230\u8ba4\u771f\u4e0a\u8bfe\u771f\u6b63\u4f20\u6388\u77e5\u8bc6\u5e0c\u671b\u5b66\u751f\u80fd\u5b66\u5230\u771f\u4e1c\u897f\u7684\u8001\u5e08\u662f\u4e00\u79cd\u5e78\u8fd0\u3002</li> </ul> <p>\u8fde\u8ba1\u7b97\u673a\u8fd9\u79cd\u4fe1\u606f\u6bd4\u8f83\u900f\u660e\u7684\u4e13\u4e1a\u5c1a\u4e14\u5982\u6b64\uff0c\u65e0\u6cd5\u60f3\u8c61\u5176\u4ed6\u4e13\u4e1a\u662f\u4ec0\u4e48\u6837\u5b50\u3002</p> <p>\u60f3\u6765\u81ea\u5df1\u8fd1\u51e0\u5e74\u4e00\u4e8b\u65e0\u6210\uff0c\u4f46\u771f\u6b63\u5f53\u6211\u641e\u7838\u4e00\u5207\u7684\u65f6\u5019\u6211\u53cd\u5012\u89c9\u5f97\u4ee5\u5f80\u8ba4\u4e3a\u5f88\u91cd\u8981\u5929\u90fd\u8981\u584c\u4e0b\u6765\u7684\u4e8b\u73b0\u5728\u5374\u89c9\u5f97\u201dnothing really matters to me\u201c\uff0c\u53cd\u5012\u89c9\u5f97\u201d\u5929\u6717\u6c14\u6e05\uff0c\u60e0\u98ce\u548c\u7545\u201c\uff0c\u6bd4\u8d77\u793e\u4f1a\u4ef7\u503c\u8bc4\u4ef7\u4f53\u7cfb\uff0c\u6211\u60f3\u771f\u6b63\u91cd\u8981\u7684\u4e8b\u662f\u6709\u6ca1\u6709\u5f97\u5230\u81ea\u5df1\u771f\u6b63\u60f3\u8981\u7684\u4e1c\u897f\u3002\u201d\u609f\u5df2\u5f80\u4e4b\u4e0d\u8c0f\uff0c\u77e5\u6765\u8005\u4e4b\u53ef\u8ffd\u201c\uff0c\u5e0c\u671b\u81ea\u5df1\u80fd\u4e0d\u65ad\u63a5\u8fd1\u81ea\u5df1\u5728\u9996\u9875\u4e2d\u7684\u672a\u6765\u3002</p>"},{"location":"etc/prose/#_1","title":"\u4e00\u4e9b\u5370\u8c61\u4e2d\u7684\u4e8b","text":"<ul> <li>\u6211\u6bd5\u4e1a\u90a3\u5e74\u521a\u597d\u6709\u4e00\u4e2a\u8ba1\u7b97\u673a\u7cfb\u7684\u7814\u7a76\u751f\u8df3\u697ccommit sucide, \u6211\u8bfb\u8fc7\u4ed6\u7684\u9057\u4e66\uff0c\u90a3\u65f6\u5019\u86ee\u9707\u64bc\u7684\uff0c\u56e0\u4e3a\u4ed6\u7684\u90a3\u4e9b\u56f0\u96be\u4ee5\u6211\u5f53\u65f6\u7684\u80fd\u529b\u9762\u5bf9\u4e5f\u89e3\u51b3\u4e0d\u4e86\u3002</li> <li>\u65b0\u51a0\u80ba\u708e\u75ab\u60c5\u7684\u65f6\u5019\uff0c\u90a3\u65f6\u5019\u6211\u6bcf\u665a\u90fd\u5b66\u5230\u5f88\u665a\u624d\u56de\u53bb\uff0c\u6211\u624d\u53d1\u73b0\uff0c\u5728\u6b66\u6c49\u5728\u534e\u79d1\u665a\u4e0a10\u70b9\u7684\u65f6\u5019\u5c45\u7136\u8fd8\u6709\u4e00\u4e9b\u8001\u4eba\u751a\u81f3\u4e2d\u5e74\u5987\u5973\u5728\u5783\u573e\u6876\u91cc\u7ffb\u627e\u53ef\u56de\u6536\u5e9f\u54c1\uff0c\u800c\u90a3\u4e2a\u65f6\u5019\u6211\u4eec\u8fd8\u5728\u6b4c\u9882\u4f1f\u5927\u7684\u6297\u75ab\u7cbe\u795e\uff0c\u6bcf\u5e74\u8fd8\u6709\u5343\u4e07\u9ad8\u8003\u751f\u548c\u51e0\u767e\u4e07\u7684\u8003\u7814\u4eba\u5728\u653f\u6cbb\u8bd5\u5377\u4e0a\u8a8a\u5199\u7740\u80cc\u8bf5\u7684\u201d\u65b0\u65f6\u4ee3\u201c\u3002\u90a3\u4e2a\u65f6\u5019\u6211\u662f\u771f\u6b63\u611f\u53d7\u5230\u4e86\u751f\u6d3b\u7684\u8270\u8f9b\uff0c\u8fd9\u4ef6\u4e8b\u60c5\u6211\u4e45\u4e45\u4e0d\u80fd\u5fd8\u6000\uff0c\u6211\u60f3\u6211\u4f1a\u8bb0\u4e00\u8f88\u5b50\u3002</li> <li>\u75ab\u60c5\u7206\u53d1\u540e\uff0c\u5b66\u6821\u4e3a\u4e86\u54cd\u5e94\u653f\u5e9c\u6297\u75ab\uff0c\u7b2c\u4e00\u4ef6\u4e8b\u60f3\u5230\u7684\u4e0d\u662f\u600e\u4e48\u4fdd\u5168\u6bd5\u4e1a\u751f\u7684\u5229\u76ca\uff0c\u800c\u662f\u600e\u4e48\u6e05\u7406\u6bd5\u4e1a\u751f\uff0c\u6bd4\u5982\u4e0a\u534a\u5e74\u9519\u5cf0\u56de\u5b66\u6821\u6bcf\u4eba\u53ea\u5141\u8bb8\u56de\u6765\u4e00\u5929\u3002\u7136\u540e\u51e0\u5e74\u540e\u518d\u6b21\u54cd\u5e94\u653f\u5e9c\u53f7\u53ec\u8c03\u67e5\u5c31\u4e1a\u7387\u7b49\u3002</li> <li>\u75ab\u60c5\u7b2c\u4e00\u5e74\u8fd8\u6bd4\u8f83\u6b63\u5e38\uff0c\u57fa\u672c\u4e0a\u4e5f\u5c31\u662f\u6ce8\u5c04\u4e00\u5242\u8fd8\u662f\u4e24\u5242\u75ab\u82d7\uff1b\u7b2c\u4e8c\u5e74\u548c\u7b2c\u4e09\u5e74\u5c31\u53d8\u8d28\u4e86\uff0c\u6838\u9178\u68c0\u6d4b\u4ece\u51e0\u5468\u5230\u4e00\u5468\uff0c\u518d\u4ece\u4e00\u5468\u5230\u51e0\u5929\uff0c\u4eba\u4eec\u6392\u8d77\u957f\u957f\u7684\u961f\u4f0d\uff0c\u50cf\u7ef5\u7f8a\u4e00\u6837\u805a\u96c6\u5728\u4e00\u8d77\u63a5\u53d7\u6838\u9178\u68c0\u6d4b\uff0c\u4e5f\u4e0d\u77e5\u9053\u68c0\u6d4b\u7684\u662f\u75c5\u6bd2\u8fd8\u662f\u670d\u4ece\u6027\u8fd8\u662f\u601d\u60f3\u653f\u6cbb\u68c0\u6d4b\uff0c\u9760\u7740\u53e3\u53f7\u548c\u6807\u8bed\u6297\u75ab\uff0c\u9760\u7cbe\u795e\u800c\u975e\u79d1\u5b66\u6765\u6297\u75ab\u3002\u7ed3\u679c\u75ab\u60c5\u653e\u5f00\u7684\u65f6\u5019\u76f4\u63a5180\u00b0\u8f6c\u53d8\uff0c\u7136\u800c\u4eba\u4eec\u5403\u7684\u8fd8\u662f\u4ec0\u4e48\u8fde\u82b1\u6e05\u761f\u80f6\u56ca\uff0c\u56fd\u5bb6\u6295\u5165\u4e86\u8fd9\u4e48\u591a\u94b1\uff0c\u6297\u75ab\u4e86\u8fd9\u4e48\u957f\u65f6\u95f4\uff0c\u5403\u7684\u8fd8\u662f\u611f\u5192\u836f\uff0c\u8fd8\u662f\u6b7b\u4e86\u90a3\u4e48\u591a\u8001\u4eba\uff0c\u519c\u6751\u653e\u5f00\u90a3\u5e74\u6751\u6751\u90fd\u6709\u597d\u591a\u5bb6\u505a\u767d\u4e8b\uff0c\u4e5f\u6ca1\u542c\u8bf4\u75ab\u60c5\u540e\u6211\u56fd\u5728\u533b\u7597\u4f20\u67d3\u75c5\u9886\u57df\u53d6\u5f97\u4e86\u4e16\u754c\u9886\u5148\u7684\u5730\u4f4d\u3002\u66f4\u5947\u602a\u7684\u662f\u75c5\u6bd2\u5c31\u597d\u50cf\u7a81\u7136\u4ece\u4e2d\u56fd\u793e\u4f1a\u6d88\u5931\u4e86\u4e00\u6837\uff0c\u8fde\u8ba8\u8bba\u7684\u58f0\u97f3\u90fd\u6ca1\u6709\u4e86\uff0c\u4e4b\u540e\u5c31\u662f\u623f\u5730\u4ea7\u6ce1\u6cab\u7834\u88c2\uff0c\u6052\u5927\u66b4\u96f7\uff0c\u4f46\u6211\u603b\u89c9\u5f97\u6052\u5927\u4e0d\u8fc7\u662f\u7528\u6765\u8f6c\u79fb\u4eba\u6c11\u77db\u76fe\u7684\u66ff\u6b7b\u9b3c\u3002</li> <li>\u7535\u6c14\u5b66\u9662\u7814\u7a76\u751f\u590d\u8bd5\u7684\u65f6\u5019\u90a3\u4e2a\u53d1\u8bd5\u5377\u7684\u5927\u59d0\u4f30\u8ba1\u662f\u5b66\u6821\u884c\u653f\u7684\u5bb6\u5c5e\uff0c\u8003\u8bd5\u7684\u65f6\u5019\u73a9\u624b\u673a\u8fd8\u5916\u653e\u8fd8\u8bb2\u8bdd\u8fd8\u4e00\u8fb9\u7b11\uff1b\u8fd8\u6709\u4e00\u4e2a\u7ec4\u7ec7\u90e8\u7684\u5c0f\u9886\u5bfc\u5973\u6027\uff0c\u4f30\u8ba1\u81ea\u5df1\u90fd\u6ca1\u770b\u590d\u8bd5\u51c6\u5219\uff0c\u81ea\u5df1\u4e0d\u6309\u89c4\u7ae0\u5236\u5ea6\u529e\u4e8b\uff0c\u8981\u5728\u4e00\u4e9b\u5c0f\u4e8b\u4e0a\u5356\u5f04\u6743\u529b\u6545\u610f\u5201\u96be\uff0c\u800c\u5979\u72d7\u4e00\u822c\u7684\u7537\u4e0b\u5c5e\u4e00\u542c\u5230\u4e3b\u4eba\u7684\u547d\u4ee4\u4fbf\u50cf\u4e00\u53ea\u75af\u72d7\u4e00\u6837\u767e\u822c\u5201\u96be\uff0c\u4ec0\u4e48\u201d\u6211\u4e0d\u7ba1\u600e\u4e48\u600e\u4e48\u6837\uff0c\u4f60\u660e\u5929\u5fc5\u987b\u628a\u6750\u6599\u7ed9\u6211\u4ea4\u8fc7\u6765\u201c\uff0c\u4e8b\u540e\u4ed6\u7684\u5973\u4e3b\u4eba\u5c0f\u9886\u5bfc\u4f30\u8ba1\u770b\u4e86\u51c6\u5219\u540e\u4f30\u8ba1\u6015\u6211\u4e3e\u62a5\u4fbf\u53c8\u597d\u58f0\u597d\u6c14\u7684\u8bf4\u201d\u90a3\u4e2a\u665a\u4e9b\u4ea4\u4e5f\u6ca1\u4e8b\u201c\uff0c\u6211\u624d\u660e\u767d\u4e86\u4ec0\u4e48\u662f\u771f\u6b63\u7684\u9636\u7ea7\u654c\u4eba\u3002\u8fd9\u5c45\u7136\u662f\u534e\u79d1\u6700\u597d\u7684\u5b66\u9662\u4e4b\u4e00\u201d\u7535\u6c14\u5b66\u9662\u201c\u3002</li> <li>\u60f3\u5230\u4e86\u5927\u5b66\u8001\u5e08\u7684\u4e00\u4e9b\u597d\u7b11\u7684\u4e8b\uff0c\u6559\u6211\u4eec\u6570\u636e\u5e93\u7684\u8001\u5e08\u672c\u79d1\u662f\u534e\u5e08\u6570\u5b66\u7cfb\u7684\uff1b\u6559\u6211\u4eec\u8ba1\u7b97\u673a\u6e38\u620f\u8bbe\u8ba1\u7684\u8001\u5e08\u672c\u79d1\u662f\u571f\u6728\u5de5\u7a0b\u7684\uff1b\u6559\u6211\u4eecC\u8bed\u8a00\u7684\u8001\u5e08\u7559\u4e0b\u8fc7\u4e00\u53e5\u540d\u8a00\u201d\u4eba\u7406\u89e3\u8fed\u4ee3\uff0c\u795e\u7406\u89e3\u9012\u5f52\u201c\uff0c\u7136\u540e\u5979\u81ea\u5df1\u90fd\u8bb2\u4e0d\u6e05\u695a\u9012\u5f52\uff1b\u6559\u6211\u4eec\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7684\u8001\u5e08\u4e0a\u8bfe\u4e3e\u7684\u4f8b\u5b50\u5c31\u662f\u81ea\u5df1\u5728\u5bb6\u600e\u4e48\u7092\u83dc\uff1b\u6559\u6211\u4eec\u6570\u636e\u7ed3\u6784\u7684\u8001\u5e08\u5c31\u662f\u8ba9\u6211\u4eec\u8bfe\u5802\u4e0a\u9762\u5411\u624b\u673a\u4ee5\u4e00\u79cd\u6781\u4e0d\u89c4\u8303\u7684\u65b9\u5f0f\u7f16\u7a0b\uff1b\u6559\u6211\u4eec\u8f6f\u4ef6\u6587\u6863\u5199\u4f5c\u7684\u8001\u5e08\u5c31\u662f\u6bcf\u8282\u8bfe\u5ff5\u4ed6\u5199\u7684word\u6587\u6863\uff0c\u591a\u5e74\u4e4b\u540e\u6211\u770b\u5230\u4ed6\u7684\u8bfe\u5802\u4e0a\u4ed6\u8fd8\u5728\u5ff5\uff0c\u540e\u9762\u7684\u5b66\u751f\u90fd\u5728\u4f4e\u7740\u5934\u505a\u81ea\u5df1\u7684\u4e8b\u6216\u8005\u73a9\u624b\u673a\uff1b\u6559\u6211\u4eec\u64cd\u4f5c\u7cfb\u7edf\u7684\u8001\u5e08\u4e0a\u4e86\u4e00\u5b66\u671f\u7684\u8bfe\u5ff5\u4e86\u4e00\u5b66\u671f\u7684PPT\u540e\u6211\u5c31\u77e5\u9053\u4e86\u64cd\u4f5c\u7cfb\u7edf\u8fd9\u4e2a\u540d\u8bcd\uff0c\u7136\u540e\u9664\u4e86\u968f\u673a\u70b9\u540d\u56de\u7b54\u95ee\u9898\u6211\u5565\u4e5f\u4e0d\u77e5\u9053\uff1b\u6559\u6211\u4eec\u5de5\u7a0b\u5b9e\u8bad\u7684\u4eba\u8fdeC++\u8fd9\u95e8\u6700\u96be\u7684\u8bed\u8a00\u4ec0\u4e48\u90fd\u4e0d\u8bb2\uff0c\u5c31\u76f4\u63a5\u8ba9\u6211\u4eec\u62ffC++\u5f00\u53d1\u9879\u76ee\uff0c\u5176\u7ed3\u679c\u65e0\u975e\u662f\u51e0\u4e2a\u83dc\u9e21\u627e\u5927\u4f6c\u62b1\u5927\u817f\uff0c\u5e94\u4ed8\u8fc7\u540e\u81ea\u4fe1\u5fc3\u88ab\u6253\u51fb\uff1b\u6240\u6709\u7684\u5b9e\u9a8c\u73af\u5883\u914d\u7f6e\u8001\u5e08\u90fd\u662f\u6839\u636e\u81ea\u5df1\u7684\u64cd\u4f5c\u7cfb\u7edf\u6765\uff0c\u4ece\u6765\u6ca1\u6709\u50cf\u56fd\u5916\u8bfe\u7a0b\u901a\u5e38\u4f1a\u5728Assignment0\u4e2d\u7ed9\u51famacos, linux, windows\u4e09\u79cd\u73af\u5883\u7684\u914d\u7f6e\uff0c\u5b9e\u9a8c\u6587\u6863\u4e5f\u662f\u4e00\u8a00\u96be\u5c3d\u3002</li> <li>\u8fd1\u4e24\u5e74\u6211\u63a5\u89e6\u5230\u8fc7\u5f62\u5f62\u8272\u8272\u7684\u4eba\uff0c\u6211\u63a5\u89e6\u8fc7\u5149\u7535\u5b66\u9662\u7684\u4eba\uff08\u534e\u79d1\u6700\u597d\u7684\u4e13\u4e1a\u4e4b\u4e00\uff09\uff0c\u6709\u7684\u5bf9\u672a\u6765\u6ca1\u6709\u4ec0\u4e48\u6253\u7b97\u7684\u4eba\u53ea\u80fd\u8003\u7814\uff0c\u8fd8\u6709\u4e00\u4e2a\u4fdd\u7814\u7684\u4eba\u8bf4\u4e0d\u77e5\u9053\u81ea\u5df1\u5927\u5b66\u5b66\u4e86\u4ec0\u4e48\uff0c\u8981\u662f\u6ca1\u6709\u4fdd\u4e0a\u7814\uff0c\u771f\u4e0d\u77e5\u9053\u505a\u4ec0\u4e48\uff0c\u4fdd\u7814\u7684\u4eba\u6211\u90fd\u80fd\u611f\u53d7\u5230\u4ed6\u5bf9\u672a\u6765\u7684\u8ff7\u832b\uff1b\u5728\u64cd\u573a\u5750\u5728\u89c2\u793c\u53f0\u4e0a\u5439\u665a\u98ce\u7684\u65f6\u5019\u6211\u542c\u5230\u4e00\u4e2a\u7537\u751f\u54ed\uff0c\u65c1\u8fb9\u4e00\u4e2a\u670b\u53cb\u5b89\u6170\u4ed6\uff0c\u4ed6\u8bf4\u201d\u771f\u7684\u597d\u60f3\u53bb\u6b7b\uff0c\u6211\u4e0d\u77e5\u9053\u81ea\u5df1\u5927\u5b66\u5e72\u4e86\u4ec0\u4e48\uff0c\u5b66\u4e5f\u6ca1\u6709\u5b66\uff0c\u604b\u7231\u4e5f\u6ca1\u6709\u8c08\uff0c\u6e38\u620f\u4e5f\u6ca1\u6709\u597d\u597d\u73a9\uff0c\u6211\u5230\u5e95\u5e72\u4e86\u4ec0\u4e48\u201c\uff0c\u6211\u53ea\u542c\u5230\u4ed6\u7684\u60c5\u7eea\u5d29\u6e83\u548c\u75db\u82e6\uff1b\u53bb\u5e74\u7684\u65f6\u5019\u6211\u65f6\u5e38\u770b\u5230\u4e00\u4e2a\u5973\u751f\u51c6\u5907\u516c\u52a1\u5458\u8003\u8bd5\uff0c\u56e0\u4e3a\u6211\u4e00\u822c\u90fd\u56fa\u5b9a\u5728\u4e00\u4e2a\u81ea\u4e60\u5ba4\u770b\u89c1\u5979\u5f88\u591a\u6b21\uff0c\u65e0\u610f\u4e2d\u77a5\u89c1\u5979\u7684ipad\u58c1\u7eb8\u4e0a\u5199\u7740\u201d\u505a\u4e00\u4e2a\u4f18\u79c0\u7684\u666e\u901a\u4eba\u201c\uff0c\u4f46\u5b9e\u9645\u4e0a\u6211\u89c9\u5f97\u5979\u5e76\u4e0d\u60f3\u8003\u516c\uff0c\u56e0\u4e3a\u5979\u4e00\u822c\u90fd\u5728\u5237\u89c6\u9891\u6216\u8005\u73a9\u624b\u673a\uff0c\u6211\u8fd8\u770b\u89c1\u6709\u7684\u5973\u751fipad\u58c1\u7eb8\u4e0a\u5199\u7740\u201d\u62d2\u7edd\u7126\u8651\u201c\u4e4b\u7c7b\u7684\u8bcd\uff1b\u8fd8\u6709\u4e00\u4e2a\u6b66\u5927\u6bd5\u4e1a\u7684\u5b66\u89c4\u5212\u7684\uff0c\u5927\u5b66\u5b66\u4e86\u4e94\u5e74\uff0c\u4ed6\u6700\u60f3\u5b66\u7684\u662f\u751f\u7269\uff08\u66fe\u7ecf\u8fd8\u62ff\u8fc7\u56fd\u5bb6\u8fd8\u662f\u7701\u7ea7\u751f\u7269\u7ade\u8d5b\u5956\u9879\uff09\uff0c\u6bd5\u4e1a\u540e\u4e00\u4e2a\u6708\u62ff\u77403000\u7684\u5de5\u8d44\uff0c\u800c\u4e14\u968f\u7740\u57fa\u5efa\u65f6\u4ee3\u7684\u7ed3\u675f\u4ee5\u53ca\u623f\u5730\u4ea7\u7684\u5d29\u76d8\uff0c\u4ed6\u4eec\u6ca1\u6709\u4e8b\u60c5\u53ef\u505a\uff0c\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u8ba8\u597d\u7532\u65b9\u4ee5\u53ca\u673a\u68b0\u5f0f\u7684\u753b\u56fe\uff0c\u6ca1\u6709\u4e0a\u5347\u7a7a\u95f4\uff0c\u751a\u81f3\u4ed6\u4eec\u81ea\u5df1\u90fd\u89c9\u5f97\u81ea\u5df1\u505a\u7684\u4e8b\u6ca1\u6709\u610f\u4e49\uff0c\u4ed6\u51c6\u5907\u7684\u4e8b\u60c5\u5c31\u662f\u8003\u516c\u52a1\u5458\uff08\u4ed6\u6bd5\u4e1a\u4e4b\u524d\u5c31\u8003\u8fc7\uff09\uff0c\u53e6\u5916\u4e00\u4e2a\u6b66\u7406\u6bd5\u4e1a\u7684\u627e\u8001\u5e08\u5e2e\u5fd9\u65f6\u8001\u5e08\u7ed9\u4ed6\u7684\u5efa\u8bae\u662f\u8f6c\u884c\uff0c\u8ba9\u4ed6\u5411\u7740\u7f16\u5236\u65b9\u5411\u8f6c\uff0c\u53e6\u4e00\u4e2a\u4ed6\u4eec\u7684\u5973\u59d0\u59d0\u540c\u4e8b\u5bf9\u6211\u8bf4\u201d\u4eba\u8fd8\u662f\u8981\u8981\u70b9\u7406\u60f3\u7684\uff0c\u4e0d\u8981\u50cf\u6211\u8fd9\u6837\uff0c\u6bd5\u4e1a\u540e\u7406\u60f3\u7406\u60f3\u6ca1\u6709\uff0c\u94b1\uff0c\u94b1\u4e5f\u6ca1\u6709\u8d5a\u5230\u51e0\u4e2a\u201c\uff1b\u53e6\u5916\u4e00\u4e9b\u4fdd\u7814\u7684\u7b97\u662f\u6211\u4eec\u4e13\u4e1a\u7684\u7b5b\u9009\u51fa\u6765\u7684\u975e\u5e38\u4f18\u79c0\u7684\u4eba\uff0c\u5f88\u591a\u4e5f\u89c9\u5f97\u81ea\u5df1\u505a\u7684\u8ddf\u79d1\u7814\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\uff0c\u5c31\u662f\u7ed9\u8001\u5e08\u6253\u5de5\uff0c\u6211\u6240\u8ba4\u8bc6\u7684\u90a3\u4e9b\u975e\u5e38\u4f18\u79c0\u7684\u4eba\u91cc\u9009\u62e9\u8bfb\u535a\u7684\u4eba\u53ea\u77e5\u9053\u4e00\u4e2a\uff1b\u6211\u8fd8\u8ba4\u8bc6\u4e86\u4e00\u4e2a\u65b0\u7586\u7684\u5b66\u7ecf\u6d4e\u7684\u4e00\u4e2a\u7537\u751f\uff0c\u7279\u522b\u5f00\u6717\u52aa\u529b\uff0c\u4ed6\u4f1a\u4e09\u79cd\u8bed\u8a00\u7ef4\u543e\u5c14\u8bed\uff0c\u6c49\u8bed\u548c\u82f1\u8bed\uff0c\u4ed6\u751a\u81f3\u8f85\u4fee\u4e86\u53cc\u5b66\u4f4d\uff0c\u53e6\u4e00\u4e2a\u597d\u50cf\u5c31\u662f\u82f1\u8bed\u4e13\u4e1a\u7684\uff0c\u4ed6\u975e\u5e38\u52aa\u529b\uff0c\u6211\u5e38\u5e38\u770b\u89c1\u4ed6\u6700\u65e9\u5230\u81ea\u4e60\u5ba4\uff0c\u6700\u665a\u56de\u53bb\uff0c\u4f46\u4ed6\u8003\u7814\u5931\u5229\u540e\u5bf9\u6211\u8bf4\uff0c\u6211\u73b0\u5728\u662f\u4e00\u70b9\u4e5f\u4e0d\u60f3\u8bfb\u4e66\u4e86\uff0c\u81f3\u5c11\u73b0\u5728\u4e0d\u60f3\uff0c\u4e5f\u8bb8\u6211\u662f\u6709\u4e00\u70b9\u81ea\u4e0d\u91cf\u529b\u4e86\u3002\u8fd8\u6709\u4e00\u4e9b\u73af\u5883\u5b66\u9662\u7684\uff0c\u56e0\u4e3a\u968f\u7740\u623f\u5730\u4ea7\u884c\u4e1a\u7684\u5012\u53f0\uff0c\u4ed6\u4eec\u5c31\u4e1a\u7387\u60e8\u4e0d\u5fcd\u7779\uff0c\u751a\u81f3\u4e0d\u5c11\u8003\u7814\u7684\u9009\u62e9\u8bfb\u975e\u5168\u65e5\u5236\uff0c\u6211\u5c31\u89c1\u5230\u4e00\u4e2a\u73af\u5883\u5b66\u9662\u8bfb\u975e\u5168\u65e5\u5236\u7684\u5973\u751f\uff0c\u5979\u5bf9\u6211\u8bf4\u201d\u522b\u4eba\u8bf4\u8bfb\u975e\u5168\u65e5\u5236\u5b66\u4e60\u548c\u5de5\u4f5c\u4e24\u4e0d\u8bef\uff0c\u4f46\u5b9e\u9645\u4e0a\u6211\u611f\u89c9\u81ea\u5df1\u4e00\u5934\u90fd\u6ca1\u6709\u201c\uff0c\u800c\u4e14\u5979\u8bf4\u5979\u5e76\u4e0d\u559c\u6b22\u6b66\u6c49\uff0c\u5979\u662f\u8d35\u5dde\u4eba\uff0c\u5979\u8bf4\u201d\u5982\u679c\u6ca1\u6709\u9000\u8def\u4e86\u7684\u8bdd\u624d\u4f1a\u9009\u62e9\u53bb\u8003\u516c\uff0c\u89c9\u5f97\u516c\u52a1\u5458\u633a\u6ca1\u6709\u610f\u601d\u7684\u201c\u3002</li> <li>\u4ee5\u524d\u7684\u65f6\u5019\u6211\u6ca1\u6709\u542c\u8bf4\u8fc7\u4e13\u95e8\u6709\u201d\u5927\u5b66\u751f\u5fc3\u7406\u5065\u5eb7\u201c\u8fd9\u95e8\u8bfe\uff0c\u4f46\u662f\u53bb\u5e74\u7684\u65f6\u5019\u6211\u5728\u6559\u5b66\u697c\u5927\u5385\u7684\u8bfe\u8868\u4e0a\u770b\u5230\u4e86\u6709\u8fd9\u95e8\u8bfe\uff0c\u8fd9\u662f\u53d8\u76f8\u7684\u627f\u8ba4\u73af\u5883\u7684\u95ee\u9898\u5417\uff1f</li> <li>\u4e00\u5e74\u524d\u6211\u78b0\u5230\u4e86\u4e00\u4e2a\u8f6f\u4ef6\u5b66\u9662\u7684\u5b66\u5f1f\uff0c\u4ed6\u5bf9\u6211\u8bf4\u201c\u4ed6\u5176\u5b9e\u5bf9\u7f16\u7a0b\u4e00\u70b9\u5174\u8da3\u4e5f\u6ca1\u6709\u201d\uff0c\u6211\u5c31\u77e5\u9053\u534e\u79d1\u7684\u8f6f\u4ef6\u5b66\u9662\u6559\u80b2\u4e00\u70b9\u53d8\u5316\u90fd\u6ca1\u6709\u3002</li> <li>\u5c31\u5728\u521a\u521a\u5403\u996d\u65f6\uff0c\u65c1\u8fb9\u4e00\u4e2a\u5b66\u751f\u8bf4\u7684\u8bdd\u5f15\u8d77\u4e86\u6211\u7684\u6ce8\u610f\uff0c\u4ed6\u8bf4\u4ed6\u4eec\u8001\u5e08\u68c0\u67e5\u671f\u672b\u8003\u8bd5\u7684\u65b9\u5f0f\u662f\u6bcf\u4e2a\u5c0f\u7ec4\u5199\u4e00\u4e2a\u516c\u53f8\u7ba1\u7406\u7cfb\u7edf\u7136\u540e\u6f14\u793a\u505aPPT\uff0c\u7136\u540e\u4ed6\u8bf4\u4ed6\u4eec\u5c0f\u7ec4\u6240\u6709\u4eba\u4e0a\u8bfe\u90fd\u6ca1\u542c\u8bfe\uff0c\u53ea\u80fd\u6700\u540e\u5230\u7f51\u4e0a\u627e\u4e86\u4e00\u4efd\u4ee3\u7801\uff0c\u627e\u4e00\u4e2a\u4eba\u505aPPT\uff0c\u6f14\u793a\u6548\u679c\u548c\u201chello world\u201d\u5dee\u4e0d\u591a\uff0c\u7ed3\u679c\u5c31\u88ab\u8001\u5e08\u4e00\u987f\u9a82\uff0c\u4f46\u4ed6\u8bf4\u7b2c\u4e00\u7ec4\u9a82\u7684\u66f4\u60e8\uff0c\u4f46\u4ed6\u4eec\u4e5f\u6beb\u4e0d\u5728\u610f\uff0c\u56e0\u4e3a\u8001\u5e08\u81ea\u5df1\u5728\u8bfe\u5802\u4e0a\u8bf4\u4ed6\u7684\u8bfe\u542c\u4e0d\u542c\u90fd\u53ef\u4ee5\uff0c\u53ea\u8981\u522b\u5728\u4e0b\u9762\u8bf4\u8bdd\u5c31\u53ef\u4ee5\u4e86\u3002\u4f30\u8ba1\u4ed6\u4e5f\u5927\u7ea6\u662f\u8f6f\u4ef6\u5de5\u7a0b\u6216\u4eba\u5de5\u667a\u80fd\u7cfb\u7684\u3002</li> <li>\u6211\u5f53\u7136\u9664\u4e86\u8fd9\u4e9b\u4e0d\u597d\u7684\u5370\u8c61\u8fd8\u6709\u8bb8\u591a\u6709\u8da3\u7f8e\u597d\u7684\u56de\u5fc6\uff0c\u53ea\u662f\u9009\u62e9\u4e86\u4e00\u4e9b\u7b26\u5408\u8fd9\u7bc7\u968f\u7b14\u5782\u76f4\u5ea6\u5f15\u4eba\u601d\u8003\u7684\u4e8b\u3002</li> <li>\u4e09\u5e74\u75ab\u60c5\uff0c\u6211\u5f97\u5230\u7684\u8fd8\u662f\u8fdc\u8fdc\u6bd4\u5931\u53bb\u7684\u591a\u3002<pre><code>                                     2024.1.8 \u665a\u4e8e\u534e\u4e2d\u79d1\u6280\u5927\u5b66\u4e1c\u6821\u533a\u4e1c12\u697cF301\n</code></pre> </li> </ul>"},{"location":"etc/reading/","title":"Intimate Relationships","text":""},{"location":"etc/reading/#_1","title":"\u4eb2\u5bc6\u5173\u7cfb","text":""},{"location":"etc/reading/#chapter1","title":"chapter1 \u4eba\u9645\u5173\u7cfb\u7684\u6784\u6210","text":"<ul> <li>\u628a\u4e0e\u4efb\u52a1\u6709\u5173\u7684\u201c\u7537\u5b50\u6c14\u201d\u7684\u624d\u80fd\u79f0\u4e3a\u5de5\u5177\u6027\uff08instrumental\uff09\u7279\u8d28\uff0c\u628a\u4e0e\u793e\u4ea4\u548c\u60c5\u611f\u6709\u5173\u7684\u201c\u5973\u4eba\u5473\u201d\u7684\u6280\u80fd\u79f0\u4e3a\u8868\u8fbe\u6027\uff08expressive\uff09\u7279\u8d28\u3002\u8fd9\u4e24\u7c7b\u7279\u8d28\u5728\u540c\u4e00\u4eba\u8eab\u4e0a\u51fa\u73b0\u5c31\u4e00\u70b9\u4e5f\u4e0d\u5947\u602a\u4e86\u3002\u53cc\u6027\u5316\u7684\u4eba\u53ef\u80fd\u662f\u8fd9\u6837\u4e00\u4e2a\u4eba\uff1a\u5728\u804c\u573a\u6fc0\u70c8\u7684\u85aa\u916c\u8c08\u5224\u4e2d\u80fd\u6709\u6548\u800c\u5f3a\u608d\u5730\u634d\u536b\u81ea\u5df1\u7684\u5229\u76ca\uff1b\u4f46\u56de\u5230\u5bb6\u540e\u53c8\u80fd\u6e29\u67d4\u800c\u7ec6\u817b\u5730\u5b89\u6170\u521a\u521a\u5931\u53bb\u5ba0\u7269\u7684\u5b69\u5b50\u3002\u5927\u591a\u6570\u4eba\u53ea\u64c5\u957f\u4e00\u79cd\u6280\u80fd\uff0c\u5728\u4e00\u79cd\u60c5\u5883\u4e0b\u663e\u5f97\u6e38\u5203\u6709\u4f59\uff0c\u53e6\u4e00\u79cd\u60c5\u5883\u4e0b\u5c31\u4e0d\u4f1a\u90a3\u4e48\u8f7b\u677e\u3002\u800c\u53cc\u6027\u5316\u7684\u4eba\u5728\u4e24\u79cd\u60c5\u51b5\u4e0b\u90fd\u80fd\u9a7e\u9a6d\u81ea\u5982\u3002  \uff08\u8fd9\u6bb5\u6458\u5f55\u8ba9\u6211\u60f3\u5230\u4e86\u4e00\u4e2a\u4eba Adolf Hilter\uff09  </li> <li>\u5927\u591a\u6570\u4eba\u559c\u6b22\u81ea\u5df1\uff0c\u4e5f\u6709\u4eba\u4e0d\u559c\u6b22\u81ea\u5df1\u3002\u5bf9\u81ea\u6211\u7684\u8bc4\u4ef7\u6784\u6210\u4e86\u81ea\u5c0a\uff08self-esteem\uff09\u3002\u5982\u679c\u5bf9\u81ea\u5df1\u7684\u80fd\u529b\u548c\u7279\u8d28\u6301\u6b63\u9762\u8bc4\u4ef7\uff0c\u81ea\u5c0a\u6c34\u5e73\u5c31\u9ad8\uff1b\u5982\u679c\u6000\u7591\u81ea\u5df1\uff0c\u81ea\u5c0a\u6c34\u5e73\u5c31\u4f4e\u3002\u56e0\u4e3a\u9ad8\u81ea\u5c0a\u7684\u4eba\u4e00\u822c\u6bd4\u4f4e\u81ea\u5c0a\u7684\u4eba\u6d3b\u5f97\u66f4\u5065\u5eb7\u3001\u66f4\u5e78\u798f\uff0c\u6240\u4ee5\u4eba\u4eec\u666e\u904d\u8ba4\u4e3a\u81ea\u6211\u611f\u89c9\u826f\u597d\u6709\u76ca\u8eab\u5fc3\u3002  \uff08\u6211\u4e4b\u524d\u770b\u5230\u4e00\u79cd\u8bf4\u6cd5\uff0c\u8bf4\u81ea\u604b\u5176\u5b9e\u662f\u4e00\u79cd\u5fc3\u7406\u4e0a\u7684\u81ea\u6211\u4fdd\u62a4\u884c\u4e3a\uff0c\u6211\u89c9\u5f97\u5f88\u6709\u9053\u7406\uff09 </li> <li>\u9ad8\u81ea\u5c0a\u7684\u4eba\u56e0\u4e3a\u5bf9\u4f34\u4fa3\u7ed9\u81ea\u5df1\u7684\u7231\u604b\u548c\u5173\u5fc3\u5145\u6ee1\u4fe1\u5fc3\uff0c\u5373\u4f7f\u4eb2\u5bc6\u5173\u7cfb\u51fa\u73b0\u56f0\u96be\u4e5f\u80fd\u548c\u4f34\u4fa3\u62c9\u8fdb\u8ddd\u79bb\u3002\u76f8\u53cd\uff0c\u4f4e\u81ea\u5c0a\u7684\u4eba\u5219\u6301\u7eed\u5730\u6000\u7591\u4f34\u4fa3\u5bf9\u81ea\u5df1\u7684\u5173\u5fc3\u548c\u4fe1\u8d56\uff0c\u6240\u4ee5\u4e00\u65e6\u5173\u7cfb\u53d8\u7cdf\u5c31\u4ece\u4f34\u4fa3\u8eab\u8fb9\u79bb\u53bb\uff0c\u4ee5\u4fdd\u62a4\u81ea\u5df1\u514d\u53d7\u4f24\u5bb3\u3002\u6211\u4eec\u90fd\u9700\u8981\u5728\u4e0e\u4ed6\u4eba\u7684\u8054\u7cfb\u548c\u81ea\u6211\u4fdd\u62a4\u95f4\u4fdd\u6301\u5e73\u8861\uff0c\u4f46\u4f4e\u81ea\u5c0a\u7684\u4eba\u603b\u628a\u4ed6\u4eec\u8106\u5f31\u7684\u81ea\u5c0a\u5fc3\u7f6e\u4e8e\u4eb2\u5bc6\u5173\u7cfb\u4e4b\u4e0a\u3002\u7ed3\u679c\u662f\uff0c\u4f4e\u81ea\u5c0a\u8005\u7684\u81ea\u6211\u6000\u7591\u548c\u654f\u611f\u8106\u5f31\u4f7f\u4ed6\u4eec\u4ece\u65e0\u6570\u7684\u7410\u4e8b\u4e2d\u5236\u9020\u51fa\u5806\u79ef\u5982\u5c71\u7684\u95ee\u9898\u3002\u4ed6\u4eec\u9519\u8bef\u5730\u4ee5\u4e3a\u7231\u60c5\u4e4b\u8def\u4e0a\u7684\u78d5\u78d5\u78b0\u78b0\u662f\u4f34\u4fa3\u62d2\u7edd\u627f\u8bfa\u7684\u4e0d\u7965\u4e4b\u5146\u3002\u7136\u540e\uff0c\u53c8\u8868\u73b0\u51fa\u4ee4\u4eba\u53cd\u611f\u3001\u81ea\u6211\u6253\u51fb\u5f0f\u7684\u4f24\u5bb3\u548c\u6124\u6012\uff0c\u5b8c\u5168\u9694\u65ad\u4e86\u81ea\u5df1\u6e34\u671b\u7684\u4f34\u4fa3\u7684\u5b89\u6170\u3002\u76f8\u5f62\u4e4b\u4e0b\uff0c\u9ad8\u81ea\u5c0a\u8005\u5bf9\u540c\u6837\u7684\u5c0f\u78d5\u7eca\u5b8c\u5168\u4e0d\u4ee5\u4e3a\u610f\uff0c\u4fe1\u5fc3\u5341\u8db3\u5730\u671f\u5f85\u4f34\u4fa3\u5bf9\u81ea\u5df1\u7684\u63a5\u7eb3\u548c\u6b63\u9762\u8bc4\u4ef7\u3002  </li> <li>\u5973\u4eba\u9009\u62e9\u77ed\u671f\u6027\u4f19\u4f34\u65f6--\u5c24\u5176\u53d1\u751f\u5a5a\u5916\u60c5\u65f6--\u66f4\u770b\u91cd\u6027\u611f\u3001\u6709\u9b44\u529b\u3001\u5f3a\u52bf\u7b49\u6709\u8bb8\u591a\u9633\u521a\u4e4b\u6c14\u7684\u7537\u4eba\u3002\u4f46\u5f53\u8bc4\u4ef7\u6709\u6f5c\u529b\u7684\u4e08\u592b\u65f6\uff0c\u90fd\u628a\u7ecf\u6d4e\u524d\u666f\u4f5c\u4e3a\u9996\u9009\uff0c\u6709\u7a33\u5b9a\u548c\u8f83\u9ad8\u6536\u5165\u548c\u8d44\u6e90\u7684\u7537\u4eba\u60f3\u5fc5\u80fd\u7ed9\u5979\u4eec\u7684\u5b69\u5b50\u5e26\u6765\u5b89\u5168\u7684\u6210\u957f\u73af\u5883\u3002\u4e00\u822c\u800c\u8a00\uff0c\u5973\u6027\u6bd4\u7537\u6027\u66f4\u5173\u6ce8\u957f\u671f\u4f34\u4fa3\u7684\u7ecf\u6d4e\u524d\u666f\u548c\u793e\u4f1a\u5730\u4f4d\u3002  \uff08\u4ee5\u524d\u6211\u4e00\u76f4\u89c9\u5f97\u901a\u5e38\u60c5\u51b5\u4e0b\u5973\u6027\u7684\u62e9\u5076\u6807\u51c6\u4e2d\uff0c99% \u7684\u5973\u6027\u4f1a\u5c06\u6027\u5438\u5f15\u529b\u6392\u7b2c\u4e00\uff0c\u8d22\u5bcc\u7269\u8d28\u6392\u7b2c\u4e8c\uff0c\u4e00\u4e2a\u4eba\u7684\u5185\u5728\u6392\u7b2c\u4e09\uff0c\u8fd9\u662f\u57fa\u4e8e\u6211\u89c2\u5bdf\u548c\u751f\u6d3b\u7ecf\u5386\u7684\u7ed3\u8bba\uff09</li> <li>\u4eb2\u5bc6\u5173\u7cfb\u4e5f\u6709\u4e00\u4e9b\u6f5c\u5728\u7684\u4ee3\u4ef7\uff0c\u6211\u4eec\u9700\u8981\u4eb2\u5bc6\u5173\u7cfb\uff08\u6ca1\u6709\u5b83\u6211\u4eec\u4f1a\u5907\u53d7\u714e\u71ac\uff09\uff0c\u4f46\u6709\u65f6\u6211\u4eec\u548c\u4ed6\u4eba\u6253\u4ea4\u9053\u4e5f\u4f1a\u5e26\u6765\u4e0d\u5e78\u548c\u75db\u82e6\u3002\u7684\u786e\uff0c\u4eba\u9645\u5173\u7cfb\u5728\u5f88\u591a\u65b9\u9762\u90fd\u53ef\u80fd\u4ee4\u4eba\u5931\u671b\u3002 \uff08\u6211\u662f\u4e00\u4e2a\u559c\u6b22\u5b64\u72ec\u7684\u4eba\uff0c\u6211\u4e5f\u89c9\u5f97\u53ea\u6709\u91cd\u8981\u7684\u4eba\u624d\u503c\u5f97\u4ed8\u51fa\u65f6\u95f4\u548c\u7cbe\u529b\uff0c\u4e0d\u8981\u5728\u5783\u573e\u8eab\u4e0a\u6d88\u8017\u81ea\u5df1\uff09</li> </ul>"},{"location":"etc/reading/#chapter3","title":"chapter3 \u5438\u5f15\u529b","text":"<ul> <li>\u5438\u5f15\u529b\u7684\u57fa\u7840\u662f\u4e00\u79cd\u5956\u8d4f\uff0c\u5f71\u54cd\u5438\u5f15\u529b\u7684\u5956\u8d4f\u6709\u4e24\u79cd\u7c7b\u578b\uff1a\u4e0e\u4ed6\u4eba\u4ea4\u5f80\u4ea7\u751f\u7684\u76f4\u63a5\u5956\u8d4f\uff0c\u548c\u4ec5\u4e0e\u4ed6\u4eba\u6709\u5173\u7684\u95f4\u63a5\u5229\u76ca\u3002\u76f4\u63a5\u5956\u8d4f\u662f\u6307\u4ed6\u4eba\u63d0\u4f9b\u7ed9\u6211\u4eec\u7684\u6240\u6709\u7684\u663e\u800c\u6613\u89c1\u7684\u6109\u60a6\uff0c\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4eba\u4eec\u63d0\u4f9b\u7684\u76f4\u63a5\u5956\u8d4f\u8d8a\u591a\uff0c\u5bf9\u6211\u4eec\u7684\u5438\u5f15\u529b\u5c31\u8d8a\u5f3a\u3002</li> <li>\u5f53\u4eba\u4eec\u9762\u5bf9\u9762\u5730\u4ea4\u5f80\u65f6\uff08\u5728\u8eab\u4f53\u4e0a\uff0c\u800c\u4e14\u5728\u5fc3\u7406\u4e0a\u90fd\u66f4\u63a5\u8fd1\uff09\uff0c\u8fd9\u6837\u7684\u4eba\u9645\u5173\u7cfb\u5956\u8d4f\u4ef7\u503c\u66f4\u9ad8\u3002\u73b0\u5b9e\u7a7a\u95f4\u7684\u4e34\u8fd1\u901a\u5e38\u9996\u5148\u51b3\u5b9a\u4e86\u4eba\u4eec\u80fd\u5426\u76f8\u9047\uff0c\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u53cb\u8c0a\u548c\u7231\u60c5\u6e90\u81ea\u4e0e\u8eab\u8fb9\u4eba\u7684\u4ea4\u5f80\u3002</li> <li>\uff08\u65b9\u4fbf\uff1a\u8fdc\u4eb2\u4e0d\u5982\u8fd1\u90bb\uff09\u4f4f\u5728\u4e00\u8d77\u7684\u604b\u4eba\uff0c\u5047\u82e5\u8981\u5206\u79bb\u4e00\u6bb5\u65f6\u95f4\uff0c\u4ed6\u4eec\u8fd8\u53ef\u80fd\u5feb\u4e50\u5730\u8ba4\u4e3a\u8fd9\u5e76\u4e0d\u4f1a\u5f71\u54cd\u4ed6\u4eec\u7684\u611f\u60c5\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684\u7231\u60c5\u5df2\u7ecf\u5177\u6709\u8db3\u591f\u7684\u5956\u8d4f\u4ef7\u503c\u3002\u5982\u679c\u8fd9\u6837\uff0c\u4ed6\u4eec\u6216\u8bb8\u4f1a\u5947\u602a\u4e8e\u8ddd\u79bb\u5bf9\u4eb2\u5bc6\u5173\u7cfb\u5f71\u54cd\u3002\u539f\u672c\u4e34\u8fd1\u53c8\u4fbf\u5229\u7684\u4eb2\u5bc6\u5173\u7cfb\u5982\u679c\u56e0\u4e3a\u8ddd\u79bb\u800c\u53d8\u5f97\u758f\u8fdc\uff0c\u8fd9\u79cd\u4f24\u5bb3\u662f\u4efb\u4f55\u4eba\u90fd\u96be\u4ee5\u9884\u6599\u7684\u3002\u5373\u4fbf\u5df2\u5a5a\u7684\u592b\u59bb\u5982\u679c\u5206\u5c45\u4e24\u5730\u4e5f\u66f4\u53ef\u80fd\u79bb\u5a5a\u3002\u5206\u79bb\u4f3c\u4e4e\u5e76\u6ca1\u6709\u52a0\u6df1\u611f\u60c5\u3002\uff08\u6211\u89c9\u5f97\u8ddd\u79bb\u4ea7\u751f\u7f8e\u611f\uff0c\u8fd1\u8ddd\u79bb\u4e0b\u8981\u4fdd\u6301\u8ddd\u79bb\uff0c\u5c0a\u91cd\u5bf9\u65b9\u7684\u9690\u79c1\uff0c\u5404\u81ea\u8981\u6709\u5404\u81ea\u7684\u751f\u6d3b\u7a7a\u95f4\u3002\u540c\u65f6\u8ddd\u79bb\u4e0d\u53ef\u957f\u65f6\u95f4\u8fc7\u8fdc\uff0c\u4ece\u7814\u7a76\u7ed3\u679c\u4e0a\u770b\u5f02\u5730\u604b\u5927\u6982\u7387\u65e0\u75be\u800c\u7ec8\u662f\u6709\u539f\u56e0\u7684\uff09\u3002</li> <li>\uff08\u719f\u8bc6\uff1a\u91cd\u590d\u63a5\u89e6\uff09\u91cd\u590d\u5730\u63a5\u89e6\u4ed6\u4eba\uff08\u751a\u81f3\u53ea\u8981\u770b\u5230\u4ed6\u4eba\u7167\u7247\uff09\u901a\u5e38\u80fd\u589e\u52a0\u6211\u4eec\u5bf9\u4ed6\u4eec\u7684\u559c\u6b22\u7a0b\u5ea6\uff0c\u800c\u4e0d\u4f1a\u5bfc\u81f4\u538c\u70e6\uff0c\u6b64\u5373\u66dd\u5149\u6548\u5e94\u3002\u5373\u4f7f\u6211\u4eec\u4ece\u6765\u6ca1\u6709\u4e0e\u964c\u751f\u4eba\u8bf4\u8bdd\uff0c\u6211\u4eec\u4ecd\u503e\u5411\u4e8e\u559c\u6b22\u89c1\u8fc7\u5f88\u591a\u6b21\u7684\u9762\u5b54\uff0c\u800c\u975e\u4e0d\u719f\u6089\u7684\u9762\u5b54\u3002\u56e0\u4e3a\u4e34\u8fd1\u5e38\u5e38\u80fd\u5bfc\u81f4\u719f\u8bc6\uff0c\u800c\u719f\u8bc6\u53c8\u5f15\u8d77\u559c\u6b22\uff0c\u6240\u4ee5\u4e0e\u4ed6\u4eec\u9891\u7e41\u7684\u63a5\u89e6\u4e0d\u4ec5\u80fd\u4f7f\u4ea4\u5f80\u66f4\u65b9\u4fbf\uff0c\u800c\u4e14\u4f1a\u4f7f\u5bf9\u65b9\u770b\u8d77\u6765\u66f4\u6709\u5438\u5f15\u529b\u3002</li> <li>\u5f53\u7136\uff0c\u7a7a\u95f4\u4e0a\u7684\u4e34\u8fd1\u6240\u589e\u52a01\u7684\u5438\u5f15\u529b\u662f\u6709\u9650\u7684\u3002\u5982\u679c\u4e0d\u65ad\u63a5\u89e6\uff0c\u5219\u4efb\u4f55\u4e8b\u7269\uff08\u559c\u7231\u7684\u98df\u7269\u3001\u6b4c\u66f2\u3001\u4e5f\u8bb8\u662f\u604b\u4eba\uff09\u90fd\u4f1a\u4ee4\u4eba\u538c\u70e6\u3002\u719f\u8bc6\u80fd\u589e\u52a0\u5438\u5f15\u529b\uff0c\u4f46\u8fc7\u5ea6\u63a5\u89e6\u5219\u672a\u5fc5\u3002\u800c\u4e0e\u53ef\u618e\u3001\u96be\u4e8e\u76f8\u5904\u7684\u4eba\u4e34\u8fd1\u5e76\u4e0d\u4e00\u5b9a\u8ba9\u6211\u4eec\u66f4\u52a0\u559c\u6b22\u4ed6\u4eec\uff08\u6211\u89c9\u5f97\u53ea\u4f1a\u8ba9\u6211\u611f\u5230\u6076\u5fc3\uff0c\u53ea\u60f3\u7528\u811a\u8e39\u6b7b\uff09\u3002\u8981\u7ed9\u4e34\u8fd1\u7684\u4f5c\u7528\u4e0b\u4e00\u4e2a\u5b9a\u8bba\u7684\u8bdd\uff0c\u5c31\u662f\u5b83\u80fd\u589e\u5f3a\u6211\u4eec\u5bf9\u4ed6\u4eba\u7684\u60c5\u611f\u3002\u6211\u4eec\u5f80\u5f80\u559c\u6b22\u8eab\u8fb9\u7684\u4eba\uff0c\u7136\u800c\u5982\u679c\u4ed6\u4eec\u4ee4\u6211\u4eec\u538c\u70e6\uff0c\u90a3\u4e48\u4e34\u8fd1\u53ea\u4f1a\u96ea\u4e0a\u52a0\u971c\u3002  </li> <li>\uff08\u957f\u76f8\u5438\u5f15\u529b\uff1a\u559c\u6b22\u90a3\u4e9b\u53ef\u7231\u7684\u4eba\uff09\u957f\u76f8\u5438\u5f15\u529b\u5bf9\u4eba\u4eec\u7b2c\u4e00\u5370\u8c61\u7684\u5f62\u6210\u6709\u7740\u91cd\u8981\u7684\u5f71\u54cd\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4e14\u5148\u4e0d\u7ba1\u5bf9\u9519\uff0c\u6211\u4eec\u503e\u5411\u4e8e\u8ba4\u4e3a\u5916\u8c8c\u4fca\u7f8e\u7684\u4eba\u66f4\u8ba8\u4eba\u559c\u6b22\uff0c\u66f4\u597d\u76f8\u5904\u3002</li> <li>\u4eba\u4eec\u4f3c\u4e4e\u53d7\u5230\u201c\u7f8e\u7684\u5c31\u662f\u597d\u7684\u201d\u8fd9\u4e00\u7b80\u5355\u523b\u677f\u5370\u8c61\u7684\u5f71\u54cd\uff1b\u4eba\u4eec\u8ba4\u4e3a\u6709\u5438\u5f15\u529b\u7684\u4eba\u4e5f\u6709\u7740\u4ee4\u4eba\u6ee1\u610f\u7684\u7279\u8d28\uff08\u6211\u89c9\u5f97\u4e5f\u53ef\u80fd\u662f\u671f\u671b\u503c\uff09\uff0c\u4ee5\u4e0e\u5176\u4fca\u7f8e\u7684\u957f\u76f8\u5339\u914d\u3002</li> <li>\uff08\u957f\u76f8\u7684\u91cd\u8981\u6027\uff09\u957f\u76f8\u771f\u7684\u5f88\u91cd\u8981\uff0c\u5916\u8c8c\u5438\u5f15\u529b\u6216\u8bb8\u662f\u5f71\u54cd\u7537\u5973\u4e4b\u95f4\u6700\u521d\u559c\u6b22\u5f7c\u6b64\u7684\u6700\u91cd\u8981\u7684\u56e0\u7d20\u3002</li> <li>\u7537\u4eba\u7684\u957f\u76f8\u548c\u4ed6\u4eec\u4e0e\u5973\u4eba\u4ea4\u5f80\u7684\u6b21\u6570\u53ca\u65f6\u95f4\u5b58\u5728\u76f8\u5173\u3002\u957f\u76f8\u5e73\u5eb8\u7684\u7537\u4eba\u4e0e\u82f1\u4fca\u6f47\u6d12\u7684\u7537\u4eba\u76f8\u6bd4\uff0c\u4e0e\u5973\u6027\u4efb\u4f55\u5f62\u5f0f\u7684\u4ea4\u5f80\u90fd\u66f4\u5c11\u3002\u957f\u76f8\u5438\u5f15\u529b\u5bf9\u7537\u4eba\u793e\u4ea4\u6d3b\u52a8\u7684\u5f71\u54cd\u8981\u751a\u4e8e\u5973\u4eba\u3002</li> <li>\u867d\u7136\u5f88\u4e0d\u6d6a\u6f2b\uff0c\u4f46\u76f8\u4f3c\u7684\u957f\u76f8\u5438\u5f15\u529b\u6216\u8bb8\u662f\u7b5b\u9009\u4f34\u4fa3\u7684\u4e00\u4e2a\u6307\u6807</li> <li>\u9047\u4e0a\u559c\u6b22\u6211\u4eec\u7684\u4eba\u5177\u6709\u5956\u8d4f\u610f\u4e49\u3002\u5982\u679c\u80fd\u9047\u4e0a\u548c\u6211\u4eec\u6070\u597d\u76f8\u50cf\u7684\u4eba\uff0c\u4e0e\u6211\u4eec\u6709\u540c\u6837\u7684\u80cc\u666f\u3001\u5174\u8da3\u3001\u548c\u54c1\u4f4d\uff0c\u4e5f\u4ee4\u4eba\u611f\u5230\u6109\u60a6\u5feb\u4e50\u3002\u7684\u786e\uff0c\u4eba\u9645\u5438\u5f15\u6700\u57fa\u672c\u7684\u539f\u5219\u4e4b\u4e00\u5c31\u662f\u76f8\u50cf\u6027\uff1a\u540c\u6027\u76f8\u5438\uff0c\u8c1a\u8bed\u201c\u7269\u4ee5\u7c7b\u805a\u4eba\u4ee5\u7fa4\u5206\u201d\u7edd\u5bf9\u662f\u6b63\u786e\u7684\u3002</li> <li>\u76f8\u5f02\u5e76\u4e0d\u76f8\u5438\uff0c\u4e24\u4e2a\u4eba\u8d8a\u76f8\u4f3c\uff0c\u5c31\u8d8a\u559c\u6b22\u5bf9\u65b9\u3002\u90a3\u4e48\uff0c\u4e3a\u4ec0\u4e48\u5f88\u591a\u4eba\u76f8\u4fe1\u201c\u5f02\u6027\u76f8\u5438\u201d\u5462\uff1f\u662f\u5426\u5b58\u5728\u5171\u540c\u70b9\u8d8a\u5c11\u5c31\u8d8a\u559c\u6b22\u5bf9\u65b9\u7684\u4f8b\u5b50\uff1f\u603b\u7684\u6765\u8bf4\uff0c\u7b54\u6848\u662f\u5426\u5b9a\u7684\u3002\u4f46\u6709\u4e00\u4e9b\u5fae\u5999\u4e4b\u5904\u3002\u4f46\u6709\u4e00\u4e9b\u5fae\u5999\u4e4b\u5904\u9700\u8981\u597d\u597d\u4f53\u4f1a\u7406\u89e3\uff0c\u5c3d\u7ba1\u4eba\u4eec\u4e00\u822c\u4e0d\u4f1a\u6ee1\u8db3\u4e8e\u4e0d\u76f8\u4f3c\u7684\u4f34\u4fa3\u3002\u4e0d\u8fc7\uff0c\u76f8\u50cf\u8d77\u4f5c\u7528\u7684\u65b9\u5f0f\u6709\u65f6\u5f88\u5de7\u5999\uff0c\u8fd9\u70b9\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u8bef\u5bfc\u4eba\u4eec\u8ba4\u4e3a\u76f8\u5f02\u4e5f\u80fd\u76f8\u5438\u3002</li> <li>\u4e5f\u8bb8\u770b\u4e0a\u53bb\u4e0d\u592a\u6d6a\u6f2b\uff0c\u4f46\u540d\u671b\u3001\u8d22\u5bcc\u3001\u5065\u5eb7\u3001\u624d\u80fd\u3001\u548c\u957f\u76f8\u7b49\u7b49\u90fd\u50cf\u5546\u54c1\u4e00\u6837\uff0c\u80fd\u7528\u6765\u5438\u5f15\u5fc3\u4eea\u7684\u4f34\u4fa3\u3002\u5982\u679c\u6211\u4eec\u628a\u5339\u914d\u89c6\u4e3a\u5e7f\u6cdb\u7684\u8fc7\u7a0b\uff0c\u4e0d\u4ec5\u6d89\u53ca\u957f\u76f8\u5438\u5f15\u529b\uff0c\u800c\u4e14\u5305\u62ec\u5404\u79cd\u5176\u4ed6\u957f\u5904\u548c\u7279\u8d28\uff0c\u90a3\u4e48\u5f88\u663e\u7136\uff0c\u4eba\u4eec\u603b\u662f\u4f1a\u4e0e\u65d7\u9f13\u76f8\u5f53\u7684\u4eba\u914d\u6210\u4e00\u5bf9\uff0c\u540c\u6027\u76f8\u5438\u5c31\u53d1\u751f\u4e86\u3002</li> <li>\u5973\u6027\u4e0d\u5fc5\u5173\u5fc3\u4f34\u4fa3\u662f\u5426\u5e74\u8f7b\uff0c\u56e0\u4e3a\u7537\u6027\u53ea\u8981\u6d3b\u7740\u5c31\u6709\u751f\u6b96\u80fd\u529b\u3002\u76f8\u53cd\uff0c\u9274\u4e8e\u5973\u6027\u5728\u5176\u540e\u4ee3\u6240\u8017\u8d39\u7684\u5de8\u5927\u517b\u80b2\u6295\u5165\uff0c\u5979\u4eec\u5e94\u8be5\u627e\u4e00\u4f4d\u80fd\u591f\u5728\u6f2b\u957f\u7684\u5b55\u671f\u53ca\u54fa\u4e73\u671f\u4e3a\u5979\u4eec\u906e\u98ce\u6321\u96e8\u3001\u4fdd\u62a4\u5b89\u5168\u7684\u4f34\u4fa3\uff1b\u4ed6\u4eec\u5e94\u8be5\u504f\u7231\u80fd\u4fdd\u969c\u6bcd\u5b50\u5e78\u798f\u3001\u62e5\u6709\u4e30\u5bcc\u8d44\u6e90\u3001\u793e\u4f1a\u5730\u4f4d\u9ad8\u7684\u5f3a\u52bf\u7537\u4eba\u3002\u6240\u4ee5\u5973\u6027\u4ee5\u5e74\u8f7b\u3001\u7f8e\u8c8c\u4ea4\u6362\u7537\u6027\u793e\u4f1a\u5730\u4f4d\uff0c\u7ecf\u6d4e\u8d44\u6e90\uff0c\u8fd9\u6837\u7684\u592b\u59bb\u5339\u914d\u975e\u5e38\u666e\u904d\u3002\u7684\u786e\uff0c\u5168\u4e16\u754c\u90fd\u8fd9\u6837\u3002\u5982\u679c\u201c\u76f8\u5f02\u201d\u770b\u8d77\u6765\u76f8\u4e92\u5438\u5f15\uff0c\u4e5f\u8bb8\u4eba\u4eec\u662f\u5728\u7528\u4e00\u79cd\u4f18\u52bf\u4ea4\u6362\u4f34\u4fa3\u7684\u53e6\u4e00\u79cd\u4f18\u52bf\uff0c\u4ee5\u4fbf\u5f97\u5230\u4f34\u4fa3\u7c7b\u4f3c\u7684\u793e\u4f1a\u5730\u4f4d\uff0c\u6240\u4ee5\u6b63\u662f\u4ed6\u4eec\u7c7b\u4f3c\u7684\u666e\u9002\u4ef7\u503c\uff0c\u800c\u975e\u4efb\u4f55\u5916\u5728\u7684\u201c\u76f8\u5f02\u201d\uff0c\u4f7f\u5f97\u4ed6\u4eec\u5f7c\u6b64\u76f8\u5438\u3002</li> <li>\u5f53\u4f34\u4fa3\u7b2c\u4e00\u6b21\u76f8\u9047\u65f6\uff0c\u5f7c\u6b64\u7684\u5438\u5f15\u529b\u4e3b\u8981\u5efa\u7acb\u5728\u201d\u523a\u6fc0\u201c\u4fe1\u606f\u57fa\u7840\u4e0a\uff0c\u5305\u62ec\u5e74\u9f84\u3001\u6027\u522b\u3001\u957f\u76f8\u7b49\u660e\u663e\u7684\u5916\u90e8\u7279\u5f81\u3002\u968f\u540e\u5c31\u8fdb\u5165\u4e86\u201d\u4ef7\u503c\u89c2\u201c\u9636\u6bb5\uff0c\u5438\u5f15\u529b\u53d6\u51b3\u4e8e\u5f7c\u6b64\u6001\u5ea6\u548c\u4fe1\u5ff5\u7684\u76f8\u50cf\u7a0b\u5ea6\uff0c\u4eba\u4eec\u5f00\u59cb\u4e86\u89e3\u5f7c\u6b64\u662f\u5426\u559c\u6b22\u540c\u6837\u7684\u62ab\u8428\u3001\u7535\u5f71\u548c\u5ea6\u5047\u65b9\u5f0f\u3002\u518d\u5f80\u540e\uff0c\u201d\u89d2\u8272\u201c\u7684\u76f8\u5bb9\u6027\u624d\u53d8\u5f97\u91cd\u8981\uff0c\u6b64\u65f6\u4f34\u4fa3\u4eec\u6700\u7ec8\u53d1\u73b0\u4ed6\u4eec\u5728\u517b\u80b2\u65b9\u5f0f\u3001\u4e8b\u4e1a\u3001\u5c45\u5bb6\u7b49\u57fa\u672c\u7684\u751f\u6d3b\u8981\u52a1\u4e0a\u662f\u5426\u4e00\u81f4\u3002\u6709\u65f6\u5019\u91cd\u5927\u7684\u5dee\u5f02\u53ea\u6709\u5728\u5a5a\u540e\u624d\u51f8\u663e\u51fa\u6765\uff1b\u5c3d\u7ba1\u5b58\u5728\u8fd9\u4e9b\u5dee\u5f02\uff0c\u592b\u59bb\u4ecd\u53ef\u80fd\u751f\u6d3b\u5728\u4e00\u8d77\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u56e0\u4e3a\u76f8\u5f02\u800c\u76f8\u5438\u3002</li> <li>\u6211\u4eec\u5f88\u5c11\u771f\u6b63\u5730\u5982\u81ea\u5df1\u8ba4\u4e3a\u7684\u90a3\u822c\u4e86\u89e3\u4f34\u4fa3\u3002\u5373\u4fbf\u662f\u591a\u5e74\u7684\u8001\u53cb\u6216\u7ed3\u5a5a\u5f88\u591a\u5e74\u7684\u592b\u59bb\uff0c\u4ed6\u4eec\u8ba4\u4e3a\u5f7c\u6b64\u6709\u7740\u8bb8\u591a\u5171\u540c\u70b9\uff0c\u4f46\u5b9e\u9645\u4e0a\u5e76\u975e\u5982\u6b64\u3002\u4ed6\u4eec\u8fc7\u9ad8\u7684\u4f30\u8ba1\u4e86\u5f7c\u6b64\u7684\u76f8\u50cf\u3002\u8010\u4eba\u5bfb\u5473\u7684\u662f\uff0c\u77e5\u89c9\u5230\u7684\u76f8\u50cf\u548c\u5173\u7cfb\u6ee1\u610f\u5ea6\u4e4b\u95f4\u7684\u76f8\u5173\u9ad8\u4e8e\u771f\u5b9e\u7684\u76f8\u50cf\u548c\u5173\u7cfb\u6ee1\u610f\u5ea6\u4e4b\u95f4\u7684\u76f8\u5173\u3002\uff08\u6211\u89c9\u5f97\u81ea\u5df1\u662f\u4e00\u4e2a\u5584\u4e8e\u89c2\u5bdf\u7684\u4eba\uff0c\u4e5f\u6bd4\u8f83\u80fd\u5206\u6790\u4ed6\u4eba\uff0c\u4f46\u6211\u4e0d\u5c51\u4e8e\u53bb\u4e86\u89e3\u4e0d\u91cd\u8981\u7684\u4eba\uff09  </li> <li>\u67d0\u4e9b\u76f8\u50cf\u66f4\u91cd\u8981\uff0c\u5982\u679c\u4f34\u4fa3\u5728\u4e00\u4e9b\u91cd\u8981\u7684\u8bae\u9898\u4e0a\u80fd\u548c\u6211\u4eec\u4fdd\u6301\u4e00\u81f4\uff0c\u5c06\u7279\u522b\u5177\u6709\u5956\u8d4f\u4ef7\u503c\u3002\u76f8\u5f02\u5e76\u4e0d\u76f8\u5438\uff0c\u800c\u4e14\u5982\u679c\u4f34\u4fa3\u53cc\u65b9\u4e0d\u592a\u770b\u91cd\u8fd9\u79cd\u5dee\u5f02\u7684\u8bdd\uff0c\u76f8\u5f02\u6216\u8bb8\u4e00\u70b9\u5f71\u54cd\u90fd\u6ca1\u6709\u3002</li> <li>\u4e92\u8865\u6027\uff0c\u4e0d\u540c\u7c7b\u578b\u7684\u884c\u4e3a\u6709\u65f6\u5374\u80fd\u548c\u8c10\u5171\u5b58\u3002\u6709\u52a9\u4e8e\u6211\u4eec\u5b9e\u73b0\u76ee\u6807\u7684\u884c\u4e3a\u90fd\u662f\u53d7\u6b22\u8fce\u7684\u3002\u5982\u679c\u4f34\u4fa3\u53cc\u65b9\u6709\u4e0d\u540c\u7684\u6280\u80fd\uff0c\u4e00\u65b9\u5f80\u5f80\u4e50\u4e8e\u8ba9\u53e6\u4e00\u65b9\u5728\u5176\u4f18\u52bf\u9879\u76ee\u4e0a\u53d1\u6325\u7279\u957f\u3002\u8fd9\u6837\u7684\u884c\u4e3a\u5c31\u662f\u53d6\u957f\u8865\u77ed\uff0c\u5373\u4e92\u8865\u6027\uff0c\u4ed6\u80fd\u5f25\u8865\u6211\u4eec\u7684\u4e0d\u8db3\uff0c\u56e0\u6b64\u5177\u6709\u5438\u5f15\u529b\u3002</li> <li>\u5f97\u4e0d\u5230\u7684\u5c31\u559c\u6b22\uff0c\u4eba\u4eec\u52aa\u529b\u514b\u670dzhang'ai1\u4ee5\u5b9e\u73b0\u671f\u671b\u7684\u57fa\u672c\u503e\u5411\u3002\u5fc3\u7406\u6297\u62d2\u7406\u8bba\u8ba4\u4e3a\uff0c\u5982\u679c\u4eba\u4eec\u5931\u53bb\u884c\u52a8\u6216\u8005\u9009\u62e9\u7684\u81ea\u7531\uff0c\u4f1a\u594b\u529b\u4e89\u53d6\u91cd\u83b7\u81ea\u7531\u3002\u56e0\u800c\uff0c\u5982\u679c\u6211\u4eec\u9762\u4e34\u5931\u53bb\u67d0\u79cd\u4e8b\u7269\u7684\u5371\u9669\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u53cd\u800c\u60f3\u5f97\u5230\u66f4\u591a\u3002\u7f57\u5bc6\u6b27\u4e0e\u6731\u4e3d\u53f6\u6548\u5e94\uff1a\u7236\u6bcd\u8d8a\u662f\u5e72\u6d89\u5b50\u5973\u7684\u604b\u7231\u81ea\u7531\uff0c\u4ed6\u4eec\u5f7c\u6b64\u4e4b\u95f4\u5c31\u4f1a\u8d8a\u52a0\u76f8\u7231\u3002\u8fd9\u6216\u8bb8\u4e0d\u4ec5\u4ec5\u662f\u7b80\u5355\u7684\u76f8\u5173\uff1b\u4e45\u800c\u4e45\u4e4b\u7236\u6bcd\u7684\u5e72\u6d89\u5bf9\u5e74\u8f7b\u604b\u4eba\u65e5\u76ca\u589e\u52a0\u7684\u72c2\u70ed\u4e4b\u7231\u8d77\u7740\u79ef\u6781\u7684\u63a8\u52a8\u4f5c\u7528\u3002</li> <li>\u5728\u8bc4\u4ef7\u672a\u6765\u4f34\u4fa3\u65f6\uff0c\u7537\u4eba\u5f80\u5f80\u9996\u5148\u786e\u4fdd\u5973\u53cb\u81f3\u5c11\u6709\u666e\u901a\u7684\u957f\u76f8\uff0c\u7136\u540e\u518d\u6765\u5bfb\u627e\u5c3d\u53ef\u80fd\u591a\u7684\u70ed\u60c5\u3001\u53cb\u5584\u3001\u8bda\u5b9e\u3001\u5766\u7387\u3001\u7a33\u5b9a\u3001\u5e7d\u9ed8\u548c\u667a\u6167\u7b49\u7b49\u7279\u8bc1\u3002\u7edd\u4e16\u5bb9\u8c8c\u662f\u7537\u4eba\u6240\u6e34\u6c42\u7684\uff0c\u4f46\u4e0d\u5982\u9ad8\u6c34\u5e73\u7684\u70ed\u60c5\u548c\u5fe0\u8bda\u91cd\u8981\uff08\u793e\u4f1a\u5730\u4f4d\u548c\u7ecf\u6d4e\u8d44\u6e90\u53bb\u5c45\u7b2c\u4e09\u4f4d\uff09\u3002\u5973\u4eba\u5f80\u5f80\u9996\u5148\u786e\u4fdd\u7537\u53cb\u81f3\u5c11\u6709\u70b9\u91d1\u94b1\u548c\u524d\u9014\uff0c\u7136\u540e\u518d\u6765\u5bfb\u627e\u5c3d\u53ef\u80fd\u591a\u7684\u70ed\u60c5\u3001\u53cb\u5584\u3001\u8bda\u5b9e\u3001\u5766\u7387\u3001\u7a33\u5b9a\u3001\u5e7d\u9ed8\u548c\u667a\u6167\u7b49\u7b49\u7279\u5f81\u3002\u91d1\u94b1\u4e0e\u8d22\u5bcc\u662f\u5973\u4eba\u6240\u6e34\u6c42\u7684\uff0c\u4f46\u4e0d\u5982\u9ad8\u6c34\u5e73\u7684\u70ed\u60c5\u548c\u5fe0\u8bda\u91cd\u8981\uff0c\u957f\u76f8\u6392\u7b2c\u4e09\u4f4d\u3002\uff08\u8fd9\u4e3a\u4ec0\u4e48\u548c\u6211\u65e5\u5e38\u751f\u6d3b\u6240\u89c2\u5bdf\u5230\u7684\u6027\u5438\u5f15\u529b\u6392\u7b2c\u4e00\uff0c\u7269\u8d28\u91d1\u94b1\u6392\u7b2c\u4e8c\uff0c\u4e00\u4e2a\u4eba\u7684\u5185\u5728\u6392\u7b2c\u4e09\u76f8\u53cd\u5462\uff1f\uff09</li> </ul>"},{"location":"etc/reading/#chapter4","title":"Chapter4 \u793e\u4f1a\u8ba4\u77e5","text":"<p>\u793e\u4f1a\u8ba4\u77e5\u4e00\u822c\u6307\u6211\u4eec\u7406\u89e3\u793e\u4f1a\u73b0\u8c61\u7684\u77e5\u89c9\u548c\u5224\u65ad\u8fc7\u7a0b\u3002</p> <ul> <li>\u7b2c\u4e00\u5370\u8c61\u5f71\u54cd\u7740\u4eba\u4eec\u5bf9\u968f\u540e\u6240\u83b7\u4fe1\u606f\u7684\u89e3\u91ca\uff0c\u4e5f\u5f71\u54cd\u7740\u4eba\u4eec\u5bf9\u65b0\u4fe1\u606f\u7684\u62e9\u53d6\u3002\u5982\u679c\u8981\u68c0\u67e5\u5bf9\u522b\u4eba\u5f62\u6210\u7684\u7b2c\u4e00\u5370\u8c61\u662f\u5426\u771f\u5b9e\uff0c\u4eba\u4eec\u66f4\u6709\u53ef\u80fd\u53bb\u5bfb\u627e\u53ef\u4ee5\u8bc1\u660e\u81ea\u5df1\u4fe1\u5ff5\u7684\u4fe1\u606f\uff0c\u800c\u4e0d\u662f\u67e5\u627e\u53ef\u4ee5\u8bc1\u660e\u81ea\u5df1\u9519\u8bef\u7684\u4fe1\u606f\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4eba\u4eec\u5e38\u5e38\u4f1a\u8868\u73b0\u51fa\u9a8c\u8bc1\u6027\u504f\u5dee\uff1a\u4ed6\u4eec\u5e38\u5e38\u5bfb\u627e\u90a3\u4e9b\u80fd\u591f\u8bc1\u660e\u81ea\u5df1\u6b63\u786e\u7684\u4fe1\u606f\uff0c\u800c\u4e0d\u662f\u8bc1\u660e\u81ea\u5df1\u9519\u8bef\u7684\u8bc1\u636e\u3002\uff08\u6211\u4e4b\u524d\u4e5f\u6709\u8fd9\u79cd\u611f\u89c9\uff0c\u4f46\u6211\u89c9\u5f97\u8fd9\u79cd\u884c\u4e3a\u662f\u6b63\u786e\u7684\uff0c\u4eba\u9996\u5148\u5e94\u8be5\u6709\u4e00\u4e2a\u5224\u65ad\uff0c\u7136\u540e\u57fa\u4e8e\u81ea\u5df1\u7684\u5224\u65ad\u8bba\u8bc1\uff0c\u5982\u679c\u67e5\u8bc1\u81ea\u5df1\u7684\u6709\u8bef\uff0c\u518d\u4fee\u6539\uff0c\u4f46\u51fa\u53d1\u65b9\u5411\u5e94\u8be5\u662f\u57fa\u4e8e\u81ea\u5df1\u7684\u5224\u65ad\u7684\uff09</li> <li>\u5c3d\u7ba1\u4f34\u4fa3\u95f4\u6709\u7740\u6df1\u5165\u7684\u4e86\u89e3\uff0c\u4ecd\u7136\u4f1a\u53d7\u5230\u884c\u52a8\u8005/\u89c2\u5bdf\u8005\u6548\u5e94\u7684\u5f3a\u70c8\u5f71\u54cd\u3002\u4ed6\u4eec\u5bf9\u81ea\u5df1\u7684\u884c\u4e3a\u7684\u89e3\u91ca\uff0c\u4e0e\u5bf9\u89c2\u5bdf\u5230\u7684\u4f34\u4fa3\u7684\u7c7b\u4f3c\u884c\u4e3a\u7684\u89e3\u91ca\u5b8c\u5168\u4e24\u6837\u3002\u4eba\u4eec\u5e38\u5e38\u80fd\u6df1\u5207\u5730\u611f\u53d7\u5230\u5f71\u54cd\u81ea\u5df1\u884c\u4e3a\u538b\u529b\uff0c\u56e0\u800c\u5bf9\u81ea\u5df1\u884c\u4e3a\u7684\u89e3\u91ca\u5bb9\u6613\u505a\u51fa\u5916\u90e8\u5f52\u56e0\u3002\u4f46\u5b83\u4eec\u6ce8\u610f\u4e0d\u5230\u540c\u6837\u7684\u73af\u5883\u4e5f\u4f1a\u5f71\u54cd\u4ed6\u4eba\uff0c\u4ece\u800c\u5728\u89e3\u91ca\u4ed6\u4eba\u4e00\u6837\u7684\u884c\u4e3a\u65f6\uff0c\u5e38\u5e38\u5f52\u56e0\u4e8e\u4ed6\u4eec\u7684\u5185\u90e8\u539f\u56e0\uff0c\u5982\u610f\u56fe\u6216\u6027\u683c\u3002\u8fd9\u79cd\u504f\u5dee\u76f8\u5f53\u666e\u904d\uff0c\u51e0\u4e4e\u4eba\u9645\u4ea4\u5f80\u7684\u4efb\u4f55\u4e00\u65b9\u5bf9\u5f7c\u6b64\u5177\u4f53\u7684\u884c\u4e3a\u8868\u73b0\u90fd\u6709\u76f8\u5f53\u7a0b\u5ea6\u7684\u5171\u8bc6\uff0c\u4f46\u5728\u89e3\u91ca\u884c\u4e3a\u7684\u539f\u56e0\u65f6\u5374\u53ef\u80fd\u5404\u6267\u4e00\u8bcd\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u4f34\u4fa3\u53cc\u65b9\u53ef\u80fd\u610f\u8bc6\u4e0d\u5230\u5f7c\u6b64\u5f52\u56e0\u4e0a\u7684\u8fd9\u79cd\u5dee\u5f02\uff0c\u6bcf\u4e2a\u4eba\u90fd\u53ef\u80fd\u8ba4\u4e3a\u53e6\u4e00\u65b9\u4f1a\u50cf\u81ea\u5df1\u4e00\u6837\u770b\u95ee\u9898\u3002\u5982\u679c\u4f34\u4fa3\u6709\u610f\u601d\u5730\u53bb\u52aa\u529b\u4e86\u89e3\u5bf9\u65b9\u7684\u89c2\u70b9\uff0c\u884c\u52a8\u8005/\u89c2\u5bdf\u8005\u6548\u5e94\u5c31\u4f1a\u51cf\u5c11\uff0c\u4f46\u5f88\u5c11\u4f1a\u5b8c\u5168\u6d88\u5931\u3002\uff08\u636e\u6211\u89c2\u5bdf\uff0c\u4eba\u4eec\u5e38\u5e38\u5bbd\u4e8e\u5f8b\u5df1\uff0c\u4e25\u4e8e\u4ed6\u4eba\uff0c\u800c\u4e14\u81ea\u5df1\u773c\u4e2d\u7684\u81ea\u5df1\u548c\u522b\u4eba\u773c\u4e2d\u7684\u81ea\u5df1\u5e38\u5e38\u662f\u6709\u5f88\u5927\u504f\u5dee\u7684\uff09</li> <li>\u5c3d\u7ba1\u4f34\u4fa3\u5f7c\u6b64\u4e4b\u95f4\u6709\u771f\u7231\uff0c\u4e5f\u53ef\u80fd\u8868\u73b0\u51fa\u81ea\u6211\u670d\u52a1\u504f\u5dee\uff0c\u6b23\u7136\u5730\u628a\u6210\u529f\u5f52\u4e8e\u81ea\u5df1\uff0c\u800c\u6781\u529b\u63a8\u8131\u81ea\u5df1\u5728\u5931\u8d25\u4e2d\u7684\u7f6a\u8d23\u3002\u4e8b\u60c5\u987a\u5fc3\u65f6\u4eba\u4eec\u5f88\u5bb9\u6613\u8ba4\u8bc6\u5230\u81ea\u5df1\u6240\u8d77\u7684\u4f5c\u7528\uff0c\u800c\u60c5\u51b5\u53d8\u7cdf\u65f6\u5219\u559c\u6b22\u5bfb\u627e\u5916\u90e8\u7406\u7531\u3002\u56e0\u800c\uff0c\u867d\u7136\u4f34\u4fa3\u4eec\u4e0d\u4f1a\u544a\u8bc9\u5bf9\u65b9\u8fd9\u4e00\u70b9\uff0c\u4f46\u662f\u5f53\u53cc\u65b9\u5982\u80f6\u4f3c\u6f06\u65f6\uff0c\u5219\u5e38\u5e38\u8ba4\u4e3a\u81ea\u5df1\u5c45\u529f\u81f3\u4f1f\uff1b\u5f53\u53cc\u65b9\u53cd\u76ee\u6210\u4ec7\u65f6\uff0c\u5219\u8ba4\u4e3a\u81ea\u5df1\u4ecd\u65e0\u53ef\u539a\u975e\u3002\u8fd9\u4e00\u73b0\u8c61\u6709\u610f\u601d\u7684\u5730\u65b9\u662f\uff0c\u4eba\u4eec\u90fd\u80fd\u4f30\u8ba1\u5230\u4ed6\u4eba\u5b58\u5728\u81ea\u6211\u670d\u52a1\u504f\u5dee\uff0c\u800c\u770b\u4e0d\u5230\u81ea\u5df1\u4e5f\u5b58\u5728\u3002\u5927\u591a\u6570\u4eba\u90fd\u80fd\u8f7b\u6613\u5730\u8ba4\u8bc6\u5230\u522b\u4eba\u5bf9\u529f\u52b3\u8fc7\u5206\u7684\u81ea\u5c45\uff0c\u5bf9\u5931\u8d25\u82cd\u767d\u7684\u6258\u8bcd\uff1b\u4f46\u5374\u8ba4\u4e3a\u81ea\u5df1\u7c7b\u4f3c\u7684\u81ea\u6211\u670d\u52a1\u504f\u5dee\u660e\u667a\u800c\u51c6\u786e\u3002\u5728\u5e78\u798f\u6ee1\u610f\u7684\u4eb2\u5bc6\u5173\u7cfb\u4e2d\u4ecd\u5b58\u5728\u81ea\u6211\u670d\u52a1\u504f\u5dee\u3002\u7279\u522b\u662f\u53d1\u751f\u4e89\u5435\u65f6\u592b\u59bb\u53cc\u65b9\u90fd\u503e\u5411\u4e8e\u8ba4\u4e3a\u4e89\u5435\u662f\u5bf9\u65b9\u7684\u8fc7\u9519\u3002\u5982\u679c\u662f\u53d1\u751f\u4e86\u5a5a\u5916\u60c5\uff0c\u4eba\u4eec\u5f80\u5f80\u8ba4\u4e3a\u81ea\u5df1\u7684\u98ce\u6d41\u97f5\u4e8b\u4e0d\u8fc7\u662f\u65e0\u4f24\u5927\u96c5\u7684\u9022\u573a\u4f5c\u620f\uff0c\u4f46\u5374\u8ba4\u4e3a\u5bf9\u65b9\u540c\u6837\u7684\u884c\u4e3a\u4f24\u98ce\u8d25\u4fd7\u3001\u4ee4\u4eba\u75db\u5f7b\u5fc3\u6249\u3002\u6240\u4ee5\u4f34\u4fa3\u4eec\u5404\u81ea\u4e0d\u540c\u7684\u89c6\u89d2\u4f7f\u5f97\u81ea\u5df1\u80fd\u66f4\u597d\u5730\u5f00\u8131\u7f6a\u8d23\uff0c\u800c\u4e0d\u4f1a\u540c\u6837\u5730\u539f\u8c05\u670b\u53cb\u6216\u7231\u4eba\u6240\u72af\u7684\u9519\u8bef\u3002\u4ed6\u4eec\u503e\u5411\u4e8e\u8ba4\u4e3a\u4e89\u6267\u548c\u51b2\u7a81\u662f\u5bf9\u65b9\u9996\u5148\u6311\u8d77\u7684\u3002\u5927\u591a\u6570\u4eba\u89c9\u5f97\u81ea\u5df1\u5f88\u597d\u76f8\u5904\uff0c\u4f46\u5bf9\u65b9\u6709\u65f6\u96be\u4ee5\u5fcd\u53d7\u3002</li> </ul>"},{"location":"etc/reading/#chapter5","title":"Chapter5 \u6c9f\u901a","text":"<ul> <li>\u6c9f\u901a\u4e0d\u826f\u3002\u9996\u5148\uff0c\u4e0d\u5e78\u798f\u7684\u4f34\u4fa3\u5728\u8868\u8ff0\u610f\u56fe\u4e0a\u8868\u73b0\u5f97\u5f88\u7cdf\u7cd5\u3002\u5982\u679c\u4ed6\u4eec\u62b1\u6028\u67d0\u4e8b\uff0c\u5f88\u5c11\u80fd\u51c6\u786e\u5230\u4f4d\uff1b\u76f8\u53cd\uff0c\u4ed6\u4eec\u503e\u5411\u4e8e\u6570\u6028\u5e76\u8ff0\uff0c\u5373\u540c\u65f6\u8c08\u53ca\u51e0\u4e2a\u95ee\u9898\uff08\u4ee5\u81f3\u4e8e\u8c08\u5230\u8bb8\u591a\u95ee\u9898\u53cd\u800c\u5fd8\u8bb0\u4e86\u521a\u521a\u62b1\u6028\u8fc7\u7684\u4e8b\u60c5\uff09\u3002\u8fd9\u901a\u5e38\u4f7f\u4ed6\u4eec\u6700\u4e3a\u5173\u6ce8\u7684\u4e8b\u60c5\u63a9\u57cb\u5728\u540c\u65f6\u8d23\u96be\u7684\u8bb8\u591a\u6cae\u4e27\u4e8b\u4ef6\u4e4b\u4e2d\u3002\u5176\u6b21\uff0c\u4e0d\u5e78\u798f\u7684\u4f34\u4fa3\u5728\u5f7c\u6b64\u503e\u542c\u65b9\u9762\u4e5f\u8868\u73b0\u5f97\u5f88\u7cdf\u7cd5\u3002\u4ed6\u4eec\u5f88\u5c11\u8010\u5fc3\u4ed4\u7ec6\u601d\u7d22\u4f34\u4fa3\u6240\u8bf4\u7684\u8bdd\uff0c\u53cd\u800c\u4ed3\u4fc3\u5730\u5f97\u51fa\u7ed3\u8bba\uff0c\u5e76\u6839\u636e\u81ea\u5df1\u63e3\u6d4b\u7684\u4f34\u4fa3\u610f\u56fe\u7a81\u7136\u6539\u53d8\u505a\u6cd5\u3002\u5176\u8868\u73b0\u4e4b\u4e00\u5c31\u662f\u8bfb\u5fc3\u672f\uff0c\u5373\u4eba\u4eec\u60f3\u5f53\u7136\u5730\u8ba4\u4e3a\u65e0\u9700\u8be2\u95ee\u5c31\u80fd\u7406\u89e3\u4f34\u4fa3\u7684\u601d\u60f3\u3001\u60c5\u611f\u548c\u89c2\u70b9\u3002\u6240\u6709\u7684\u4eb2\u5bc6\u4f34\u4fa3\u90fd\u4f1a\u8868\u73b0\u51fa\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u7684\u201d\u8bfb\u5fc3\u201c\uff0c\u4f46\u82e6\u607c\u7684\u4f34\u4fa3\u5374\u4ee5\u6311\u5254\u548c\u6076\u610f\u7684\u65b9\u5f0f\u6765\u201d\u8bfb\u5fc3\u201c\uff1b\u4e2d\u6027\u6216\u79ef\u6781\u7684\u52a8\u673a\u5f80\u5f80\u88ab\u4ed6\u4eec\u89e3\u8bfb\u4e3a\u5b58\u5fc3\u4e0d\u826f\uff1b\u82e6\u607c\u7684\u4f34\u4fa3\u603b\u662f\u80fd\u5728\u5bf9\u65b9\u6240\u8bf4\u7684\u4efb\u4f55\u4e8b\u60c5\u4e0a\u627e\u51fa\u7eb0\u6f0f\u6216\u4e0d\u53ef\u884c\u6027\uff0c\u8fd9\u6837\u4ed6\u4eec\u7684\u503e\u542c\u80fd\u529b\u5f88\u5dee\u3002\u6700\u540e\uff0c\u4e0d\u5e78\u798f\u7684\u4f34\u4fa3\u5728\u4ea4\u8c08\u65f6\u5e38\u5e38\u8868\u73b0\u51fa\u6d88\u6781\u60c5\u611f\u3002\u4ed6\u4eec\u5e38\u5e38\u5bf9\u4f34\u4fa3\u7684\u62b1\u6028\u62a5\u4ee5\u8bbd\u523a\u6316\u82e6\uff0c\u8d2c\u4f4e\u548c\u9119\u89c6\u4f34\u4fa3\u3002\u8fd9\u4e0d\u4ec5\u4e8e\u4e8b\u65e0\u8865\uff0c\u53cd\u800c\u4f7f\u95ee\u9898\u53d8\u5f97\u66f4\u52a0\u4e25\u91cd\u3002\u8fd9\u7c7b\u6709\u7834\u574f\u6027\u7684\u4ea4\u5f80\u901a\u5e38\u4ee5\u6279\u8bc4\u5f00\u573a\uff0c\u653b\u51fb\u4f34\u4fa3\u7684\u4eba\u683c\u548c\u54c1\u5fb7\uff0c\u800c\u4e0d\u662f\u9488\u5bf9\u5f15\u8d77\u62b1\u6028\u7684\u5177\u4f53\u884c\u4e3a\u3002</li> <li>\u7cbe\u786e\u63cf\u8ff0\uff0c\u90a3\u4e9b\u6279\u8bc4\u4f34\u4fa3\u4eba\u683c\u548c\u9053\u5fb7\u7684\u62b1\u6028\u4f1a\u8d2c\u4f4e\u4f34\u4fa3\uff0c\u5f80\u5f80\u662f\u5c0f\u9898\u5927\u505a\uff0c\u628a\u5c0f\u95ee\u9898\u770b\u6210\u4e25\u91cd\u3001\u4e0d\u5bb9\u6613\u89e3\u51b3\u7684\u96be\u9898\u3002\u5c3d\u53ef\u80fd\u6e05\u695a\u660e\u767d\u3001\u8be6\u7ec6\u5177\u4f53\u5730\u6307\u51fa\u60f9\u6012\u6211\u4eec\u7684\u7279\u5b9a\u884c\u4e3a\uff0c\u4f34\u4fa3\u95f4\u7684\u6c9f\u901a\u5c31\u4f1a\u53d8\u5f97\u66f4\u4e3a\u660e\u667a\u3001\u51c6\u786e\u3002\u8fd9\u79cd\u65b9\u6cd5\u5c31\u662f\u884c\u4e3a\u63cf\u8ff0\uff0c\u8fd9\u6837\u4e0d\u4ec5\u80fd\u544a\u8bc9\u4f34\u4fa3\u81ea\u5df1\u7684\u60f3\u6cd5\uff0c\u8fd8\u80fd\u628a\u8c08\u8bdd\u91cd\u5fc3\u96c6\u4e2d\u5728\u53ef\u5904\u7406\u7684\u3001\u5355\u72ec\u7684\u67d0\u4e2a\u884c\u4e3a\u4e0a\uff0c\u800c\u884c\u4e3a\u6bd4\u4eba\u683c\u66f4\u5bb9\u6613\u6539\u53d8\u6b63\u786e\u7684\u884c\u4e3a\u63cf\u8ff0\u4e13\u6307\u67d0\u4e00\u7279\u5b9a\u4e8b\u4ef6\uff0c\u4e0d\u4f1a\u6d89\u53ca\u666e\u904d\u6027\u3002</li> <li>\u79ef\u6781\u503e\u542c\uff0c\u5728\u6c9f\u901a\u4e2d\u5f53\u6211\u4eec\u63a5\u53d7\u5230\u4ed6\u4eba\u7684\u4fe1\u606f\u65f6\uff0c\u6709\u4e24\u4e2a\u91cd\u8981\u7684\u4efb\u52a1\u8981\u5b8c\u6210\u3002\u7b2c\u4e00\u662f\u8981\u51c6\u786e\u5730\u7406\u89e3\u5bf9\u65b9\u8bdd\u8bed\u6240\u8868\u8fbe\u7684\u610f\u601d\uff0c\u7b2c\u4e8c\u662f\u8981\u5411\u5bf9\u65b9\u4f20\u8fbe\u5173\u6ce8\u548c\u7406\u89e3\uff0c\u8ba9\u4ed6\u4eec\u77e5\u9053\u6211\u4eec\u5bf9\u4ed6\u7684\u8bdd\u662f\u5728\u610f\u7684\u3002</li> <li>\u5b88\u793c\u800c\u9547\u5b9a\uff0c\u5728\u88ab\u4f34\u4fa3\u6fc0\u6012\u7684\u65f6\u5019\u80fd\u4fdd\u6301\u6e05\u9192\uff0c\u5728\u5f00\u59cb\u751f\u6c14\u7684\u65f6\u5019\u80fd\u51b7\u9759\u4e0b\u6765\uff0c\u90fd\u662f\u975e\u5e38\u53ef\u8d35\u7684\u6280\u80fd\u3002\u5982\u679c\u628a\u6124\u6012\u8be0\u91ca\u4e3a\u53ea\u662f\u601d\u8003\u95ee\u9898\u7684\u53e6\u4e00\u79cd\u65b9\u5f0f\uff0c\u4f60\u7684\u6c9f\u901a\u4f1a\u66f4\u597d\u3002</li> <li>\u5c0a\u91cd\u548c\u786e\u8ba4\u7684\u529b\u91cf\uff0c\u826f\u597d\u7684\u6c9f\u901a\u5305\u62ec\u5f88\u591a\u6784\u6210\u8981\u7d20\uff1a\u6709\u610f\u8bc6\u7684\u52aa\u529b\u4f20\u9012\u6e05\u6670\u3001\u76f4\u63a5\u7684\u4fe1\u606f\uff0c\u8ba4\u771f\u503e\u542c\uff0c\u5373\u4f7f\u51fa\u73b0\u4e89\u6267\u4ecd\u4fdd\u6301\u793c\u8c8c\u548c\u514b\u5236\u7b49\u7b49\u3002\u4f46\u6700\u5173\u952e\u7684\u8981\u7d20\u786e\u5b9e\u660e\u786e\u5730\u8868\u73b0\u6211\u4eec\u5bf9\u4f34\u4fa3\u89c2\u70b9\u7684\u5173\u5fc3\u548c\u5c0a\u91cd\u3002</li> </ul>"},{"location":"etc/reading/#chapter6","title":"Chapter6 \u76f8\u4e92\u4f9d\u8d56","text":"<ul> <li>\u76f8\u4e92\u4f9d\u8d56\u7406\u8bba\u8ba4\u4e3a\uff0c\u4eba\u4eec\u5c31\u50cf\u8d2d\u7269\u90a3\u6837\u5728\u4eba\u9645\u5546\u53a6\u91cc\u6d4f\u89c8\u3002\u6240\u6709\u4eba\u90fd\u5728\u5bfb\u627e\u6700\u5408\u610f\u7684\u5546\u54c1\u3002\u6211\u4eec\u5728\u5bfb\u6c42\u4ee5\u6700\u5c0f\u4ee3\u4ef7\u83b7\u53d6\u80fd\u63d0\u4f9b\u6700\u5927\u5956\u8d4f\u4ef7\u503c\u7684\u4eba\u9645\u4ea4\u5f80\uff0c\u6211\u4eec\u53ea\u4f1a\u4e0e\u90a3\u4e9b\u80fd\u63d0\u4f9b\u8db3\u591f\u5229\u76ca\u7684\u4f34\u4fa3\u7ef4\u6301\u4eb2\u5bc6\u5173\u7cfb\u3002\u4e0d\u8fc7\uff0c\u7531\u4e8e\u6bcf\u4e2a\u4eba\u90fd\u8fd9\u6837\u505a\uff0c\u6240\u4ee5\u4eb2\u5bc6\u5173\u7cfb\u4e2d\u7684\u4f34\u4fa3\u53cc\u65b9\u90fd\u5fc5\u987b\u6ee1\u8db3\u81ea\u5df1\u7684\u5229\u76ca\uff0c\u5426\u5219\u4eb2\u5bc6\u5173\u7cfb\u4e0d\u53ef\u80fd\u6301\u7eed\u4e0b\u53bb\u3002</li> <li>\u4eba\u9645\u4ea4\u5f80\u7ed3\u679c=\u5956\u8d4f - \u4ee3\u4ef7\uff0c\u5982\u679c\u67d0\u79cd\u4eba\u9645\u4ea4\u5f80\u7684\u5956\u8d4f\u5927\u4e8e\u4ee3\u4ef7\uff0c\u5c31\u4f1a\u5f97\u5230\u6b63\u503c\u7684\u7ed3\u679c\u3002\u4f46\u522b\u5fd8\u4e86\uff0c\u793e\u4f1a\u4ea4\u6362\u7406\u8bba\u5ba3\u79f0\u4eba\u4eec\u603b\u5728\u8ffd\u6c42\u53ef\u80fd\u7684\u6700\u597d\u7ed3\u679c\u3002\u4f60\u7684\u4eba\u9645\u4ea4\u5f80\u7ed3\u679c\u5373\u4fbf\u4e3a\u6b63\uff0c\u5e76\u4e0d\u8868\u793a\u8fd9\u79cd\u4ea4\u5f80\u5c31\u80fd\u597d\u5230\u8db3\u4ee5\u4f7f\u4f60\u7ee7\u7eed\u5446\u5728\u4f34\u4fa3\u8eab\u8fb9\u3002\u76f8\u4e92\u4f9d\u8d56\u7406\u8bba\u7684\u4e00\u4e2a\u6df1\u523b\u7684\u89c2\u70b9\u5c31\u8ba4\u4e3a\uff0c\u4eba\u9645\u4ea4\u5f80\u7684\u7ed3\u679c\u662f\u6b63\u8fd8\u662f\u8d1f\u5e76\u4e0d\u91cd\u8981\uff0c\u91cd\u8981\u7684\u662f\u6211\u4eec\u8bc4\u4ef7\u7ed3\u679c\u7684\u4e24\u4e2a\u6807\u51c6\u3002\u7b2c\u4e00\u4e2a\u6807\u51c6\u662f\u6211\u4eec\u7684\u671f\u671b\uff0c\u7b2c\u4e8c\u4e2a\u6807\u51c6\u662f\u5047\u5982\u6ca1\u6709\u73b0\u5728\u7684\u4f34\u4fa3\uff0c\u6211\u4eec\u8ba4\u4e3a\u81ea\u5df1\u4f1a\u8fc7\u5f97\u600e\u6837\u3002</li> <li>\u4eba\u9645\u5173\u7cfb\u7684\u671f\u671b\u6536\u76ca\uff0c\u76f8\u4e92\u4f9d\u8d56\u7406\u8bba\u5047\u5b9a\u6bcf\u4e2a\u4eba\u90fd\u6709\u4e00\u4e2a\u4e0e\u4f17\u4e0d\u540c\u7684\u6bd4\u8f83\u6c34\u5e73\uff0c\u5373\u6211\u4eec\u8ba4\u4e3a\u81ea\u5df1\u5728\u4e0e\u4ed6\u4eba\u4ea4\u5f80\u4e2d\u5e94\u5f53\u5f97\u5230\u7684\u7ed3\u679c\u503c\u3002comparison level \u5efa\u7acb\u5728\u8fc7\u53bb\u7684\u7ecf\u9a8c\u4e4b\u4e0a\u3002\u5982\u679c\u4eba\u4eec\u66fe\u6709\u8fc7\u5956\u8d4f\u4ef7\u503c\u5f88\u9ad8\u7684\u4f34\u4fa3\u5173\u7cfb\uff0c\u5c31\u53ef\u80fd\u6709\u8f83\u9ad8\u7684CL, \u8868\u660e\u4ed6\u4eec\u73b0\u5728\u8fd8\u671f\u671b\u5e76\u89c9\u5f97\u81ea\u5df1\u7406\u5e94\u5f97\u5230\u975e\u5e38\u597d\u7684\u4ea4\u5f80\u7ed3\u679c\u3002\u76f8\u53cd\uff0c\u5982\u679c\u8fc7\u53bb\u7ecf\u5386\u8fc7\u56f0\u96be\u91cd\u91cd\u7684\u4eb2\u5bc6\u5173\u7cfb\uff0c\u90a3\u4e48\u4ed6\u4eec\u7684\u671f\u671b\u548cCL\u90fd\u4f1a\u5f88\u4f4e\u3002 \u7ed3\u679c - CL = \u6ee1\u610f\u5ea6\u3002</li> <li>\u4eba\u9645\u5173\u7cfb\u7684\u66ff\u4ee3\u6536\u76ca\uff0c\u66ff\u4ee3\u7684\u6bd4\u8f83\u6c34\u5e73(comparison level for alternative, CL<sub>alt</sub>)\uff0c\u6765\u786e\u5b9a\u6211\u4eec\u5728\u5176\u4ed6\u7684\u4eb2\u5bc6\u5173\u7cfb\u4e2d\u662f\u5426\u4f1a\u66f4\u597d\u3002CL<sub>alt</sub>\u662f\u6307\u5982\u679c\u6211\u4eec\u629b\u5f03\u76ee\u524d\u7684\u4eb2\u5bc6\u5173\u7cfb\uff0c\u800c\u8f6c\u6295\u53ef\u4ee5\u9009\u62e9\u7684\u66f4\u597d\u7684\u4f34\u4fa3\u6216\u60c5\u5883\uff0c\u6240\u80fd\u5f97\u5230\u7684\u4ea4\u5f80\u7ed3\u679c\u3002\u5982\u679c\u5176\u4ed6\u7684\u4eb2\u5bc6\u5173\u7cfb\u6709\u5e0c\u671b\u5f97\u5230\u6bd4\u76ee\u524d\u7684\u5173\u7cfb\u66f4\u597d\u7684\u6536\u76ca\uff0c\u5373\u4f7f\u6211\u4eec\u5bf9\u73b0\u72b6\u8fd8\u6ee1\u610f\uff0c\u4e5f\u6709\u53ef\u80fd\u4f1a\u79bb\u5f00\u73b0\u5728\u7684\u4f34\u4fa3\u53bb\u8ffd\u6c42\u66f4\u5927\u7684\u6536\u76ca\uff08\u8bb0\u4f4f\uff0c\u6211\u4eec\u603b\u5728\u8ffd\u6c42\u53ef\u80fd\u7684\u6700\u597d\u7ed3\u679c\uff09\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5373\u4f7f\u6211\u4eec\u5bf9\u76ee\u524d\u7684\u4eb2\u5bc6\u5173\u7cfb\u4e0d\u5f88\u6ee1\u610f\uff0c\u5728\u6ca1\u6709\u66f4\u597d\u7684\u66ff\u4ee3\u9009\u62e9\u51fa\u73b0\u4e4b\u524d\uff0c\u6211\u4eec\u4e5f\u4e0d\u53ef\u80fd\u8131\u79bb\u73b0\u5728\u7684\u5173\u7cfb\u3002\u8fd9\u4e2a\u89c2\u70b9\u7279\u522b\u91cd\u8981\uff0c\u53ef\u4ee5\u89e3\u91ca\u4e3a\u4ec0\u4e48\u4eba\u4eec\u4ecd\u4f1a\u5f85\u5728\u4f7f\u4ed6\u4eec\u75db\u82e6\u60b2\u60e8\u7684\u4eb2\u5bc6\u5173\u7cfb\u4e2d\u800c\u4e0d\u79bb\u53bb\uff1a\u5c3d\u7ba1\u73b0\u5b9e\u7684\u5904\u5883\u975e\u5e38\u75db\u82e6\uff0c\u4f46\u7f6e\u8eab\u5176\u4e2d\u7684\u4eba\u4eec\u8ba4\u4e3a\u4e00\u65e6\u79bb\u5f00\u60c5\u51b5\u4f1a\u66f4\u7cdf\u3002</li> <li>\u76f8\u4e92\u4f9d\u8d56\u7684\u4eb2\u5bc6\u5173\u7cfb\u7406\u8bba\u628a\u6d6a\u6f2b\u7684\u4eb2\u5bc6\u5173\u7cfb\u529f\u5229\u5316\u4e86\uff0c\u8fc7\u4e8e\u5173\u6ce8\u4f34\u4fa3\u4ea4\u5f80\u8fc7\u7a0b\u4e2d\u7684\u5956\u8d4f\u548c\u4ee3\u4ef7\uff0c\u4f1a\u4f7f\u6211\u4eec\u5ffd\u89c6\u5176\u4ed6\u5f71\u54cd\u4f34\u4fa3\u5173\u7cfb\u6210\u8d25\u7684\u91cd\u8981\u56e0\u7d20</li> <li>\u4eba\u9645\u4ea4\u5f80\u7684 outcome, CL, CL<sub>alt</sub>, \u51b3\u5b9a\u4e86\u4eba\u9645\u4ea4\u5f80\u7684\u6ee1\u610f\u5ea6\uff0c\u7a33\u5b9a\u6027\uff0c\u4e3b\u5bfc\u5173\u7cfb\u3002</li> <li>\u7814\u7a76\u8c03\u67e5\u8868\u660e\uff0c\u968f\u7740\u5a5a\u59fb\u65f6\u95f4\u7684\u589e\u52a0\uff0c\u5e78\u798f\u611f\u4f1a\u51cf\u5c11\uff0c\u914d\u5076\u4eec\u901a\u5e38\u6765\u770b\u53ea\u4e0e\u4ed6\u4eec\u7ed3\u5a5a\u4e4b\u524d\u4e00\u6837\u5e78\u798f\u3002\u975e\u5e38\u660e\u663e\uff0c\u627e\u5230\u4f60\u751f\u547d\u4e2d\u7684\u771f\u7231\u5e76\u4e0d\u80fd\u8ba9\u4f60\u6c38\u8fdc\u5e78\u798f\u3002</li> <li>\u5df2\u5a5a\u4f34\u4fa3\u5728\u4e00\u8d77\u751f\u6d3b\u7684\u65e5\u5b50\u91cc\uff0c\u5bf9\u5f85\u5f7c\u6b64\u7684\u65b9\u5f0f\u53ef\u80fd\u6bd4\u5bf9\u5f85\u5176\u4ed6\u4efb\u4f55\u4eba\u66f4\u523b\u8584\u3002\u5982\u679c\u5173\u7cfb\u4eb2\u5bc6\u7684\u4eba\u5904\u5728\u6700\u7cdf\u7cd5\u7684\u72b6\u6001\uff0c\u5bf9\u5f85\u5f7c\u6b64\u53ef\u80fd\u6bd4\u5bf9\u5f85\u5b8c\u5168\u964c\u751f\u7684\u4eba\u66f4\u7c97\u9c81\u3001\u65e0\u793c\u3001\u6120\u6012\u3001\u81ea\u79c1\u548c\u9ebb\u6728\u3002</li> <li>\u5931\u53bb\u901a\u5e38\u6bd4\u540c\u7b49\u7a0b\u5ea6\u7684\u5f97\u5230\u5bf9\u6211\u4eec\u7684\u5f71\u54cd\u66f4\u5927\uff1b\u6211\u4eec\u559c\u6b22\u5f97\u5230\uff0c\u4f46\u6211\u4eec\u66f4\u618e\u6068\u5931\u53bb\u3002\u7c7b\u4f3c\u7684\uff0c\u4eb2\u5bc6\u5173\u7cfb\u4e2d\u7684\u8ba8\u538c\u4e8b\u4ef6\u6bd4\u7406\u8bba\u4e0a\u540c\u7b49\u7a0b\u5ea6\u7684\u5408\u610f\u4e8b\u4ef6\u66f4\u5f15\u4eba\u6ce8\u76ee\u3001\u5f71\u54cd\u6df1\u8fdc\u3002\u8868\u626c\u548c\u6279\u8bc4\u7684\u6548\u679c\u5e76\u4e0d\u4f1a\u5f7c\u6b64\u62b5\u6d88\uff0c\u8868\u626c\u80fd\u591f\u524a\u5f31\u6279\u8bc4\u5e26\u6765\u7684\u6253\u51fb\uff0c\u4f46\u4e24\u8005\u52a0\u5728\u4e00\u8d77\u4f60\u8fd8\u662f\u4f1a\u7565\u5fae\u6709\u70b9\u82e6\u607c\u3002\u574f\u6bd4\u597d\u66f4\u6709\u529b\u91cf\u3002\u5b9e\u9645\u4e0a\uff0c\u8981\u4fdd\u6301\u6ee1\u610f\u7684\u4eb2\u5bc6\u5173\u7cfb\uff0c\u6211\u4eec\u6216\u8bb8\u9700\u8981\u81f3\u5c11 5:1 \u7684\u5956\u8d4f-\u4ee3\u4ef7\u6bd4\u7387\u3002</li> <li>\u4eba\u7c7b\u52a8\u673a\u7684\u81ea\u6211\u5ef6\u4f38\u6a21\u578b\u7684\u6838\u5fc3\u601d\u60f3\uff0c\u8be5\u7406\u8bba\u8ba4\u4e3a\uff0c\u80fd\u6269\u5c55\u6211\u4eec\u7684\u5174\u8da3\u3001\u6280\u80fd\u548c\u7ecf\u9a8c\u7684\u4f34\u4fa3\u5173\u7cfb\u5c31\u80fd\u5438\u5f15\u6211\u4eec\u3002\u65b0\u5947\u7684\u6d3b\u52a8\u3001\u65b0\u624d\u80fd\u7684\u53d1\u5c55\u548c\u65b0\u7684\u601d\u60f3\u89c2\u70b9\u7684\u83b7\u5f97\u90fd\u5177\u6709\u5185\u5728\u7684\u6ee1\u8db3\u6027\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u521a\u521a\u604b\u7231\u7684\u4eba\u5e38\u5e38\u4f1a\u5feb\u4e50\u65e0\u6bd4\u7684\u539f\u56e0\u6240\u5728\uff1a\u65b0\u5efa\u7acb\u7684\u4eb2\u5bc6\u901a\u5e38\u5305\u542b\u6709\u77e5\u8bc6\u7684\u589e\u52a0\u548c\u80fd\u4fc3\u8fdb\u81ea\u6211\u6982\u5ff5\u53d1\u5c55\u7684\u76f8\u4e92\u5173\u7cfb\u3002\u4f46\u4e00\u65e6\u65b0\u7684\u4f34\u4fa3\u9010\u6e10\u53d8\u5f97\u719f\u6089\u8d77\u6765\uff0c\u81ea\u6211\u5ef6\u4f38\u5f80\u5f80\u4f1a\u53d8\u6162\uff0c\u8fd9\u65f6\u8bb8\u591a\u4eba\u4f1a\u5f00\u59cb\u89c9\u5f97\u4f34\u4fa3\u5173\u7cfb\u6bd4\u8d77\u5f53\u521d\u521a\u5efa\u7acb\u65f6\u663e\u5f97\u66f4\u4e3a\u67af\u71e5\u548c\u5e73\u5eb8\u3002\u6839\u636e\u81ea\u6211\u5ef6\u4f38\u6a21\u578b\uff0c\u4fdd\u6301\u5feb\u4e50\u7684\u5173\u952e\u662f\u521b\u9020\u6027\u5730\u53d1\u73b0\u6301\u7eed\u4f60\u4e2a\u4eba\u6210\u957f\u7684\u65b9\u6cd5\uff0c\u4ece\u800c\u6d88\u9664\u5173\u7cfb\u7684\u6c89\u95f7\u3002</li> </ul>"},{"location":"etc/reading/#chapter7","title":"Chapter7 \u53cb\u8c0a","text":"<ul> <li>\u6709\u5b66\u8005\u628a\u53cb\u8c0a\u5b9a\u4e49\u4e3a\u201d\u4e00\u79cd\u81ea\u53d1\u7684\u4eba\u9645\u5173\u7cfb\uff0c\u901a\u5e38\u8868\u73b0\u51fa\u4eb2\u5bc6\u548c\u6276\u52a9\uff0c\u53cc\u65b9\u5f7c\u6b64\u6b23\u8d4f\uff0c\u5e76\u4f01\u6c42\u5bf9\u65b9\u7684\u966a\u4f34\u201c\u3002</li> <li>\u53cb\u8c0a\u4e00\u822c\u6bd4\u7231\u60c5\u627f\u62c5\u7684\u8d23\u4efb\u66f4\u5c11\uff0c\u60c5\u611f\u5f3a\u5ea6\u66f4\u5f31\uff0c\u6392\u4ed6\u7a0b\u5ea6\u66f4\u4f4e\u3002\u5e76\u4e14\u548c\u7231\u60c5\u4e0d\u540c\uff0c\u53cb\u8c0a\u4e00\u822c\u4e0d\u5b58\u5728\u6027\u7684\u4eb2\u5bc6\u3002</li> <li>\u5c0a\u91cd\uff0c\u6700\u4eb2\u5bc6\u7684\u670b\u53cb\u5f80\u5f80\u662f\u6211\u4eec\u5c0a\u91cd\u7684\u4eba</li> <li>\u4fe1\u4efb\uff0c\u5f53\u6211\u4eec\u81ea\u4fe1\u5730\u8ba4\u4e3a\u670b\u53cb\u4f1a\u4ec1\u6148\u5730\u5bf9\u5f85\u6211\u4eec\uff0c\u65e0\u79c1\u5730\u8003\u8651\u6211\u4eec\u6700\u5927\u7684\u5229\u76ca\u65f6\uff0c\u6211\u4eec\u5c31\u5bf9\u4ed6\u4eec\u4ea7\u751f\u4e86\u4fe1\u4efb\u3002\u8fd9\u79cd\u81ea\u4fe1\u9700\u8981\u65f6\u95f4\u6765\u57f9\u80b2\uff0c\u4f46\u5982\u679c\u6709\u4eba\u7559\u610f\u6211\u4eec\u7684\u613f\u671b\uff0c\u65e0\u79c1\u3001\u53ef\u9760\u5730\u5bf9\u5f85\u6211\u4eec\uff0c\u4fe1\u4efb\u5c31\u80fd\u5efa\u7acb\u8d77\u6765\u3002\uff08\u66fe\u88ab\u670b\u53cb\u80cc\u53db\u7684\u4eba\u5e38\u5e38\u5f88\u96be\u6062\u590d\u5bf9\u670b\u53cb\u7684\u4fe1\u4efb\u548c\u5bf9\u4eba\u9645\u5173\u7cfb\u7684\u6ee1\u610f\uff09</li> <li>\u8d44\u672c\u5316\uff0c\u6211\u4eec\u548c\u597d\u53cb\u5206\u4eab\u5feb\u4e50\u65f6\uff0c\u5feb\u4e50\u500d\u589e\uff0c\u4e0d\u4f1a\u51cf\u5c11\u3002\u5f53\u6211\u4eec\u4ea4\u597d\u8fd0\u65f6\uff0c\u5e76\u4e0d\u603b\u80fd\u4ece\u522b\u4eba\u90a3\u91cc\u5f97\u5230\u70ed\u5fc3\u7684\u795d\u8d3a\u3002\u4f46\u597d\u53cb\u901a\u5e38\u4f1a\u4e3a\u6211\u4eec\u7684\u6210\u529f\u611f\u5230\u6b23\u559c\uff0c\u4ed6\u4eec\u7684\u5174\u594b\u80fd\u589e\u52a0\u6211\u4eec\u7684\u6b22\u4e50\u3002\u4e0e\u90a3\u4e9b\u5bf9\u6211\u4eec\u597d\u8fd0\u6f20\u7136\u6216\u51b7\u6de1\u7684\u4eba\u76f8\u6bd4\uff0c\u90a3\u4e9b\u80fd\u63d0\u5347\u6211\u4eec\u5feb\u4e50\u7684\u4eba\u8ba9\u6211\u4eec\u611f\u5230\u66f4\u4eb2\u8fd1\u3002\u5177\u6709\u8d44\u672c\u5316\u7279\u5f81\u7684\u4eba\u9645\u5173\u7cfb\u901a\u5e38\u6bd4\u8d44\u672c\u5316\u4e0d\u8db3\u66f4\u4ee4\u4eba\u6ee1\u610f\u3001\u6301\u7eed\u7684\u65f6\u95f4\u4e5f\u66f4\u957f\u3002</li> <li>\u793e\u4f1a\u652f\u6301\uff0c \u6211\u4eec\u83b7\u5f97\u7684\u793e\u4f1a\u652f\u6301\u6709\u56db\u79cd\u3002\u8868\u73b0\u4e3a\u5173\u7231\u3001\u63a5\u7eb3\u548c\u5b89\u6170\u7b49\u5f62\u5f0f\u7684\u611f\u60c5\u652f\u6301\uff1b\u8868\u73b0\u4e3a\u62e5\u62b1\u6216\u6402\u62b1\u7684\u8eab\u4f53\u5b89\u6170\uff1b\u8868\u73b0\u4e3a\u8d44\u8baf\u548c\u6307\u5bfc\u5f62\u5f0f\u7684\u5efa\u8bae\u652f\u6301\uff1b\u548c\u8868\u73b0\u4e3a\u91d1\u94b1\u6216\u7269\u54c1\u7684\u7269\u8d28\u652f\u6301\u6216\u6709\u5f62\u63f4\u52a9\u3002\u793e\u4f1a\u652f\u6301\u4ef7\u503c\u5de8\u5927\uff0c\u968f\u7740\u65f6\u95f4\u7684\u6d41\u901d\uff0c\u4e2a\u4f53\u63a5\u53d7\u7684\u8fd9\u56db\u79cd\u793e\u4f1a\u652f\u6301\u8d8a\u591a\uff0c\u5173\u7cfb\u6ee1\u610f\u5ea6\u548c\u4e3b\u89c2\u5e78\u798f\u611f\u5c31\u8d8a\u5927\u3002</li> <li>\u957f\u671f\u6765\u770b\uff0c\u771f\u6b63\u8d77\u4f5c\u7528\u7684\u5e76\u975e\u670b\u53cb\u5177\u4f53\u7684\u5e2e\u52a9\u884c\u4e3a\uff0c\u800c\u662f\u6211\u4eec\u5bf9\u670b\u53cb\u5e2e\u52a9\u884c\u4e3a\u7684\u8ba4\u77e5\u3002\u6211\u4eec\u77e5\u89c9\u5230\u7684\u652f\u6301\u548c\u6211\u4eec\u5b9e\u9645\u5f97\u5230\u7684\u652f\u6301\u53ea\u80fd\u7c97\u7565\u5730\u5339\u914d\uff0c\u5f53\u4eba\u4eec\u8ba4\u4e3a\u81ea\u5df1\u7684\u670b\u53cb\u4e0d\u80af\u4ed7\u4e49\u76f8\u52a9\u65f6\uff0c\u5219\u65e0\u8bba\u670b\u53cb\u662f\u5426\u771f\u6b63\u5982\u6b64\u90fd\u4f1a\u611f\u5230\u82e6\u607c\u3002</li> <li>\u5e94\u7b54\u6027\uff0c\u8ba4\u4e3a\u67d0\u4eba\u5bf9\u4f60\u7684\u9700\u8981\u548c\u6b32\u671b\u8868\u73b0\u51fa\u5173\u6ce8\u3001\u5c0a\u91cd\u3001\u70ed\u5fc3\u548c\u652f\u6301\uff0c\u8fd9\u79cd\u5224\u65ad\u5c31\u662f\u6240\u8c13\u7684\u611f\u77e5\u5230\u7684\u4f34\u4fa3\u5e94\u7b54\u6027\uff0c\u5b83\u975e\u5e38\u5177\u6709\u5956\u8d4f\u4ef7\u503c\uff0c\u90a3\u4e9b\u80fd\u8ba9\u6211\u4eec\u611f\u53d7\u5230\u81ea\u5df1\u6709\u4ef7\u503c\u3001\u7406\u89e3\u548c\u5c0a\u91cd\u7684\u4eba\u90fd\u4f1a\u5438\u5f15\u6211\u4eec\u3002\u611f\u77e5\u5230\u7684\u4f34\u4fa3\u5e94\u7b54\u6027\u80fd\u63d0\u5347\u4eb2\u5bc6\u611f\uff0c\u4fc3\u8fdb\u81ea\u6211\u8868\u9732\u3001\u4fe1\u4efb\u548c\u76f8\u4e92\u4f9d\u8d56\u3002</li> <li>\u53cb\u8c0a\u7684\u89c4\u5219\uff1a\u4e0d\u8981\u5520\u53e8\u4e0d\u4f11\u3001\u4fdd\u6301\u4fe1\u5fc3\u3001\u7ed9\u4e88\u611f\u60c5\u4e0a\u7684\u793e\u4f1a\u652f\u6301\u3001\u5728\u5371\u96be\u65f6\u81ea\u53d1\u5730\u63d0\u4f9b\u5e2e\u52a9\u3001\u4fe1\u8d56\u5e76\u80fd\u5f7c\u6b64\u503e\u8bc9\u3001\u4e0e\u5bf9\u65b9\u5206\u4eab\u6210\u529f\u7684\u559c\u60a6\u3001\u4e0d\u5ac9\u5992\u5f7c\u6b64\u7684\u5173\u7cfb\u3001\u670b\u53cb\u4e0d\u5728\u573a\u65f6\u80fd\u7ef4\u62a4\u670b\u53cb\u3001\u6b20\u503a\u5fc5\u8fd8\u3001\u77e5\u6069\u56fe\u62a5\u3001\u5728\u4e00\u8d77\u65f6\u52aa\u529b\u53d6\u60a6\u5bf9\u65b9\uff08\u8fd9\u91cc\u6211\u89c9\u5f97\u524d\u63d0\u662f \u201d\u4e0d\u8fdd\u5fc3\u7684\u62d2\u7edd\u4ed6\u4eba\u201c\uff09</li> <li>\u5927\u5b66\u6bd5\u4e1a\u4e4b\u540e\uff0c\u4eba\u4eec\u5f80\u5f80\u53ea\u4e0e\u5c11\u6570\u51e0\u4e2a\u670b\u53cb\u4ea4\u5f80\uff0c\u4f46\u4e0e\u670b\u53cb\u4e4b\u95f4\u7684\u4eba\u9645\u4ea4\u5f80\u5c42\u6b21\u66f4\u6df1\u3001\u76f8\u4e92\u4f9d\u8d56\u7a0b\u5ea6\u66f4\u5f3a</li> <li>\u5927\u91cf\u7684\u7814\u7a76\u8868\u660e\u5973\u6027\u4e4b\u95f4\u7684\u53cb\u8c0a\u662f\u4ee5\u60c5\u611f\u5206\u4eab\u548c\u81ea\u6211\u8868\u9732\u4e3a\u5176\u7279\u5f81\u7684\uff0c\u800c\u7537\u6027\u53cb\u8c0a\u5219\u662f\u56f4\u7ed5\u7740\u5171\u540c\u6d3b\u52a8\u3001\u76f8\u4f34\u76f8\u968f\u548c\u641e\u7b11\u5a31\u4e50\u800c\u5c55\u5f00\u7684\u3002\u8fd9\u663e\u5f97\u8fc7\u4e8e\u7b80\u5355\u5316\uff0c\u4f46\u591a\u5e74\u524d\u5948\u7279\u521b\u9020\u51fa\u7684\u4e24\u4e2a\u7cbe\u8f9f\u8bcd\u8bed\u4eca\u5929\u770b\u6765\u4ecd\u71a0\u71a0\u751f\u8f89\uff1a\u5973\u6027\u7684\u53cb\u8c0a\u662f\u201d\u9762\u5bf9\u9762\u201c\uff08face-to-face\uff09\uff0c\u800c\u7537\u6027\u7684\u53cb\u8c0a\u5219\u662f\u201d\u80a9\u5e76\u80a9\u201c\uff08side-by-side\uff09</li> <li>\u7537\u4eba\u548c\u5973\u4eba\u4e4b\u95f4\u80fd\u6210\u4e3a\u5bc6\u53cb\u5417\uff1f\u5f53\u7136\uff08\u5176\u5b9e\u5f53\u524d\u6211\u7684\u89c2\u70b9\u662f\u7537\u6027\u4e0e\u5973\u6027\u4e4b\u95f4\u6ca1\u6709\u670b\u53cb\u5173\u7cfb\uff09\u3002\u5927\u591a\u6570\u4eba\u90fd\u66fe\u548c\u8bb8\u591a\u5f02\u6027\u6709\u8fc7\u4eb2\u5bc6\u7684\u53cb\u8c0a\uff0c\u8fd9\u79cd\u670b\u53cb\u5173\u7cfb\u5728\u5927\u5b66\u751f\u4e4b\u95f4\u66f4\u662f\u53f8\u7a7a\u89c1\u60ef\u3002\u7136\u800c\u4e00\u65e6\u4ed6\u4eec\u79bb\u5f00\u6821\u56ed\uff0c\u5927\u591a\u6570\u4eba\u4e0d\u518d\u4f1a\u7ef4\u6301\u4eb2\u5bc6\u7684\u5f02\u6027\u53cb\u8c0a\u3002\u5177\u6709\u9ad8\u8868\u8fbe\u6027\u7684\u7537\u6027\u4ee5\u53ca\u5177\u6709\u9ad8\u5de5\u5177\u6027\u7684\u5973\u6027\uff0c\u6bd4\u4ed6\u4eec\u7684\u540c\u8f88\u66f4\u6709\u53ef\u80fd\u4e0e\u5f02\u6027\u5efa\u7acb\u4eb2\u5bc6\u7684\u53cb\u8c0a\uff08\u4e00\u5982\u65e2\u5f80\uff0c\u76f8\u50cf\u624d\u80fd\u76f8\u5438\uff09\u3002</li> <li>\u5f02\u6027\u53cb\u8c0a\u7684\u91cd\u5927\u95ee\u9898\u662f\u670b\u53cb\u4e4b\u95f4\u662f\u5426--\u6bd5\u7adf\u5f7c\u6b64\u975e\u5e38\u4eb2\u5bc6--\u4f1a\u53d1\u751f\u6027\u5173\u7cfb\u3002\u7537\u6027\u6bd4\u5973\u6027\u66f4\u53ef\u80fd\u8ba4\u4e3a\u6027\u4e8b\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u7537\u6027\u8ba4\u4e3a\u5973\u6027\u670b\u53cb\u5bf9\u6027\u4e8b\u7684\u5174\u8da3\u5f80\u5f80\u4f1a\u8d85\u51fa\u5b9e\u9645\u3002\u800c\u5973\u6027\u4e00\u65b9\u901a\u5e38\u4f1a\u4f4e\u4f30\u7537\u6027\u670b\u53cb\u60f3\u548c\u5979\u4e0a\u5e8a\u7684\u610f\u613f\u7a0b\u5ea6\uff0c\u6240\u4ee5\u7ecf\u5e38\u4f1a\u53d1\u751f\u4e00\u4e9b\u8bef\u4f1a\uff1a\u201d\u5927\u591a\u6570\u5973\u6027\u5e76\u4e0d\u4f1a\u56de\u5e94\u7537\u6027\u670b\u53cb\u7684\u6027\u6e34\u671b\uff0c\u5c3d\u7ba1\u6709\u65f6\u7537\u6027\u4f1a\u81ea\u6211\u6b3a\u9a97\u5730\u8ba4\u4e3a\u5973\u6027\u670b\u53cb\u4f1a\u5728\u6027\u4e8b\u4e0a\u62a5\u7b54\u81ea\u5df1\u201c</li> <li>\u591a\u6570\u60c5\u51b5\u4e0b\u4eba\u4eec\u4e0d\u4f1a\u628a\u5f02\u6027\u53cb\u8c0a\u8f6c\u53d8\u4e3a\u7231\u60c5\uff0c\u4ed6\u4eec\u5b9e\u9645\u4e0a\u4f1a\u5c3d\u529b\u4fdd\u6301\u67cf\u62c9\u56fe\u5f0f\u7684\u4f19\u4f34\u5173\u7cfb\u3002\u4e4b\u6240\u4ee5\u8fd9\u6837\u505a\u6709\u51e0\u4e2a\u539f\u56e0\uff0c\u6709\u65f6\u4eba\u4eec\u4e0d\u613f\u610f\u5192\u7740\u5931\u53bb\u6709\u4ef7\u503c\u7684\u4eba\u9645\u5173\u7cfb\u7684\u98ce\u9669\uff0c\u800c\u628a\u5f02\u6027\u53cb\u8c0a\u8f6c\u53d8\u4e3a\u7231\u60c5\u3002  </li> </ul>"},{"location":"etc/reading/#chapter8","title":"Chapter8 \u7231\u60c5","text":"<ul> <li>\u7231\u60c5\u4e09\u89d2\u7406\u8bba\uff0c\u7231\u60c5\u7684\u7b2c\u4e00\u4e2a\u6210\u5206\u662f\u4eb2\u5bc6\uff08intimacy\uff09\uff0c\u5305\u62ec\u70ed\u60c5\u3001\u7406\u89e3\u3001\u6c9f\u901a\u3001\u652f\u6301\u548c\u5206\u4eab\u7b49\u7231\u60c5\u4e2d\u5e38\u89c1\u7684\u7279\u5f81\u3002\u7b2c\u4e8c\u4e2a\u6210\u5206\u662f\u6fc0\u60c5\uff08passion\uff09\uff0c\u5176\u4e3b\u8981\u7279\u5f81\u662f\u6027\u7684\u5524\u9192\u548c\u6b32\u671b\u3002\u6fc0\u60c5\u5e38\u4ee5\u6027\u6e34\u671b\u7684\u5f62\u5f0f\u51fa\u73b0\uff0c\u4f46\u4efb\u4f55\u80fd\u4f7f\u4f34\u4fa3\u611f\u5230\u6ee1\u8db3\u7684\u5f3a\u70c8\u60c5\u611f\u90fd\u8981\u5f52\u4e8e\u6b64\u7c7b\u3002\u7231\u60c5\u7684\u6700\u540e\u4e00\u4e2a\u6210\u5206\u662f\u627f\u8bfa\uff08commitment\uff09\uff0c\u6307\u6295\u8eab\u4e8e\u7231\u60c5\u548c\u52aa\u529b\u7ef4\u62a4\u7231\u60c5\u7684\u51b3\u5fc3\u3002\u627f\u8bfa\u5728\u672c\u8d28\u4e0a\u4e3b\u8981\u662f\u8ba4\u77e5\u6027\u7684\uff0c\u800c\u4eb2\u5bc6\u662f\u60c5\u611f\u6027\u7684\uff0c\u6fc0\u60c5\u5219\u662f\u4e00\u79cd\u52a8\u673a\u6216\u8005\u9a71\u529b\u3002\u604b\u7231\u5173\u7cfb\u7684\u201d\u706b\u70ed\u201c\u6765\u81ea\u4e8e\u6fc0\u60c5\uff0c\u6e29\u60c5\u6765\u81ea\u4e8e\u4eb2\u5bc6\uff1b\u60f3\u5f62\u800c\u4e0b\uff0c\u627f\u8bfa\u53cd\u6620\u7684\u5219\u662f\u5b8c\u5168\u4e0e\u60c5\u611f\u6216\u6027\u60c5\u65e0\u5173\u7684\u51b3\u7b56\u3002</li> <li>\u73b0\u5b9e\u4e2d\u201d\u7231\u60c5\u662f\u76f2\u76ee\u7684\u201c\uff1a\u4eba\u4eec\u4f1a\u4f4e\u4f30\u6216\u5ffd\u89c6\u7231\u4fa3\u7684\u7f3a\u70b9\u3002\u4ed6\u4eec\u5c06\u7231\u4fa3\u7684\u5f62\u8c61\u7406\u60f3\u5316\uff0c\u8fd9\u4e0e\u4ed6\u4eec\u9762\u5bf9\u7684\u5177\u4f53\u4e8b\u5b9e\u6709\u7740\u91cd\u5927\u5dee\u522b\u3002\u4e8b\u5b9e\u4e0a\uff0c\u7231\u60c5\u548c\u53cb\u8c0a\u7684\u4e3b\u8981\u5dee\u522b\u5728\u4e8e\u6211\u4eec\u7684\u60f3\u8c61--\u7231\u4fa3\u662f\u8ff7\u4eba\u3001\u795e\u79d8\u800c\u4e14\u6709\u5438\u5f15\u529b\u7684\uff0c\u800c\u670b\u53cb\u5219\u4e0d\u662f\u8fd9\u6837</li> </ul>"},{"location":"etc/studio/","title":"Studio \u5de5\u4f5c\u5ba4\u7ec4\u88c5\u8ba1\u5212","text":"<p>\u79c9\u7740\u7535\u5b50\u4ea7\u54c1\u201d\u4e70\u65b0\u4e0d\u4e70\u65e7\uff0c\u65e9\u4e70\u65e9\u4eab\u53d7\u201c\u7684\u539f\u5219\uff0c\u52a0\u4e4bapple macbook pro \u65b0\u6b3e 3nm \u82af\u7247\u7684\u53d1\u5e03\uff0c\u539f\u8ba1\u5212\u8d2d\u4e70 M2Max Mac Studio 5nm\u5236\u7a0b\u7684\u8ba1\u5212\u66f4\u6539\uff0c\u672c\u8ba1\u5212\u672c\u6765\u662f2023\u5e7412\u6708\u4efd\u5f00\u59cb\u7ec4\u88c5\u4e00\u4e2a Mac Studio M2max \u5de5\u4f5c\u5ba4\u8ba1\u5212\uff0c\u4f46\u9274\u4e8e M3 \u7cfb\u5217\u8f83\u4e4b M2 \u7cfb\u5217\u7684\u63d0\u5347\u975e\u5e38\u53ef\u89c2\uff0c\u4e14 M3Max \u7684\u82af\u7247\u53ef\u80fd\u81f3\u5c11\u8981\u7b49\u52302024.6\u6708\u4e2d\u65ec\u751a\u81f3\u53ef\u80fd\u662f\u5e74\u5e95\u624d\u53d1\u5e03\uff0c\u800c\u6211\u624b\u4e2d\u53ea\u6709\u4e00\u6b3e2015\u5e74\u7684MacBook\uff0c\u8fd9\u4e2d\u95f4\u5c06\u6709\u975e\u5e38\u957f\u4e00\u6bb5\u65f6\u95f4\u7684\u7a7a\u7a97\u671f\u4f7f\u5f97\u6211\u7684\u8ba1\u5212\u65e0\u6cd5\u63a8\u884c\u3002\u8003\u8651\u5230\u6211\u7684\u7b14\u8bb0\u672c\u8fc7\u4e8e\u8001\u65e7\uff0c\u8fdf\u65e9\u8981\u6362\uff0c\u6240\u4ee5\u8c03\u6574\u8ba1\u5212\u5148\u6362\u8d2d\u4e00\u53f0\u6700\u65b0\u6b3e 3nm \u5236\u7a0b\u7684 macbook pro 16 inches 18G + 512G m3 pro\u3002 \u9884\u7b97\uff1a \u539f\u8ba1\u5212\u4e70\u7535\u8111\u7684\u94b1\u52a0\u4eca\u5e74\u7684\u751f\u6d3b\u8d39\u5171 5W\uff0c\u68ad\u54c8\u51c6\u5907\u5403\u571f\u3002</p>"},{"location":"etc/studio/#_1","title":"\u684c\u642d","text":"<ul> <li> Macbook Pro 2023 16inches M3pro 18G + 512G </li> <li> Mac studio \u6700\u4f4e\u914d\u7f6e\uff08M2 Max \u4e10\u7248\u53ef\u80fd\u6027\u4ef7\u6bd4\u8981\u9ad8\u4e9b\uff0c\u660e\u5e74\u7684\u8bdd\u5e94\u8be5\u4f1a\u6709 M3 max \u6b3e\uff09</li> <li> Mac magic keyboard with Touch ID </li> <li> Mac magic touchpad </li> <li> magic keyboard and touchpad \u6574\u5408\u5e95\u5ea7 </li> <li> \u963f\u5361\u897f\u65af\u96f7\u7535\u56db\u79fb\u52a8\u786c\u76d8\u76d2\u505a\u6269\u5bb9\u8bbe\u5907 </li> <li> itgz\u96f7\u7535\u56db\u786c\u76d8\u76d2 </li> <li> \u663e\u793a\u5668  ViewSonic 5K 27inchs \u955c\u9762 5120*2880 218ppi\uff08ppi \u8272\u6df1\u53ca\u5c3a\u5bf8\u540c studio display\uff09</li> <li> \u663e\u793a\u5668 ViewSonic 4K 27inchs \u955c\u9762 3840*2160 163ppi </li> <li> webCam logitech C920Pro </li> <li> \u4e00\u53f0\u5347\u964d\u684c (lego E6\u767d\u8272 1.8m * 0.8) </li> <li> \u4eba\u4f53\u5de5\u5b66\u6905 (\u4eac\u4e1c\u4eac\u9020 Z9 Smart) </li> <li> \u684c\u4e0b\u7406\u7ebf\u67b6 + \u63d2\u677f + \u684c\u57ab(1.2m * 0.6) </li> <li> \u53cc\u5c4f\u663e\u793a\u5668\u652f\u67b6 \uff08\u5317\u72d0 E500-2 \u627f\u91cd8kg\uff09</li> <li> \u97f3\u54cd \uff08EDIFIER S880\uff09</li> <li> \u5c0f\u7c73\u591a\u7ebf\u5708\u65e0\u7ebf\u5145\u7535\u677f\uff0820W * 3\u53f0\u8bbe\u5907\uff09</li> <li> \u7c73\u5bb6\u667a\u80fd\u663e\u793a\u5668\u6302\u706f1S </li> <li> \u5c0f\u7c73\u8def\u7531\u5668 * 2\uff083\uff09\u6709\u7ebf\u6216\u65e0\u7ebf\u7ec4\u7f51\uff08redmi AX5400 \u8fd8\u6709\u4e00\u6b3e\u5347\u7ea7\u7248 AX6000\uff09</li> <li> \u4e00\u53f0\u6253\u5370\u673a </li> </ul>"},{"location":"etc/studio/#_2","title":"\u751f\u6d3b","text":"<ul> <li> \u7c73\u5bb6\u5438\u5c18\u56682</li> <li> \u7c73\u5bb6\u7167\u7247\u6253\u5370\u673a1s</li> <li> \u79d1\u9ea6\u65af\u65e5\u5e38\u5bb6\u7528\u5de5\u5177\u7bb1\u5957\u88c5</li> <li> \u4e00\u5757\u5730\u6bef(\u7c73\u9a7c\u8272 2m * 1.4m) </li> <li> \u7c73\u5bb6\u58f0\u6ce2\u7535\u52a8\u7259\u5237 T302</li> <li> \u5c0f\u7c73\u7a7a\u6c14\u51c0\u5316\u5668</li> <li> \u7c73\u5bb6\u5e8a\u5934\u706f</li> <li> \u51ac\u5929\u53ef\u4ee5\u4e70\u4e00\u4e2a\u5e10\u7bf7\u26fa\ufe0f\u4fdd\u6696 </li> <li> \u4e66\u67b6</li> <li> \u8863\u67dc</li> </ul>"},{"location":"etc/studio/#_3","title":"\u95ee\u9898","text":"<ul> <li>\u5347\u964d\u684c\u5bf9\u6bd4\u4f20\u7edf\u684c\u5b50\u7a33\u5b9a\u6027\u8f83\u5dee\uff0c\u6216\u591a\u6216\u5c11\u4f1a\u6709\u4e00\u4e9b\u6643\u52a8\uff0c\u9ad8\u5ea6\u5347\u9ad8\u8fd9\u79cd\u8868\u73b0\u66f4\u52a0\u660e\u663e </li> <li>\u65e0\u7ebf\u5145\u7535\u677f\u6709\u4e00\u70b9\u7535\u6d41\u7684\u6ecb\u6ecb\u58f0 </li> <li>mac \u5185\u7f6e\u89e6\u63a7\u677f\u6709\u624b\u638c\u8bef\u89e6\u5904\u7406\uff0c\u4f46\u662f magic touchpad \u6ca1\u6709\uff0c\u6253\u5b57\u65f6\u624b\u638c\u5f88\u5bb9\u6613\u8bef\u89e6\u8bc6\u522b\u4e3a\u8f7b\u70b9\uff08\u6682\u65f6\u4e0d\u77e5\u9053 BetterTouchTool \u662f\u5426\u53ef\u4ee5\u5904\u7406\uff09</li> <li>\u4ece intel \u7248\u672c\u7684 MacBook \u8fc1\u79fb\u5230 Arm \u7248\u7684 Mac \u540e\u51fa\u73b0\u4e86\u5f88\u591a\u95ee\u9898\u3002\u5177\u4f53\u89c1intel to arm</li> </ul>"},{"location":"etc/terminology/","title":"terminology","text":""},{"location":"etc/terminology/#mit_missing_semester","title":"MIT_missing_semester","text":""},{"location":"etc/terminology/#cs50","title":"CS50","text":""},{"location":"etc/terminology/#cs61a","title":"CS61A","text":""},{"location":"etc/terminology/#algorithms","title":"Algorithms","text":""},{"location":"etc/terminology/#nand2tetris","title":"Nand2tetris","text":"<ul> <li>variable. from the perspective of assemble laguage\uff0c variable is a register of memory corresponding to some address</li> <li>pointer. pointer is a address variable </li> <li>combinational circuits. combinational circuits's out is only related to input . ALU</li> <li>sequential circuits. sequential circuits's output is not only related to the input, but also related to the output of the last clock\u3002register counter </li> <li>every line of assemble language is corresponding to a machine code. machine code is corresponding to the perspective of Computer, character and symbol(String) corresponding to the perspective of our human. symbolic programming. symbolic abstraction.  </li> <li>data register, address register, memory register.  </li> <li>assemble, assembler, </li> </ul>"},{"location":"etc/terminology/#computer-network","title":"Computer Network","text":"<ul> <li>web world wide web  </li> <li>WiFi: 802.11 wireless local area network(WLAN)</li> <li></li> </ul>"}]}